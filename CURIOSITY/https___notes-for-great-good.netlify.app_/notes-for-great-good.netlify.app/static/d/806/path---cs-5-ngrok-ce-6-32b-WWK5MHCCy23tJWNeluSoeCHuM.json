{
  "data": {
    "markdownRemark": {
      "html": "<h3>DevOps and Deployment:</h3>\n<ul>\n<li>\n<p>Not CS, not software development, but it's a necessary byproduct of the two.</p>\n</li>\n<li>\n<p>Just like when creating any sort of product, you have to find a way to get that product to end users</p>\n</li>\n</ul>\n<h3>How is This Process Done?</h3>\n<ul>\n<li>\n<p>Depends on what you're trying to deploy</p>\n<ul>\n<li>Static HTML that has no reliance on things like a Node server or a database can be handled by a myriad of hosting services out there.</li>\n<li>If your application relies on a database or Node server or is dynamic, you can configure a virtual machine from DigitalOcean or a Docker instance or use a web services platform like AWS or Google Cloud Platform or Azure.</li>\n</ul>\n</li>\n</ul>\n<p>Code on your local machine\nYou're saving it to some version control</p>\n<ul>\n<li>Local host server running your front-end webpack create-react-app environment</li>\n<li>Local host server propping up your API and you're running CORS to manage to talk to the two</li>\n<li>Persisting Mongo instance</li>\n</ul>\n<p>What has to happen in order for your end users to interface with your code?</p>\n<h2><a href=\"https://ngrok.com/\">Ngrok</a></h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">npm init -y\nnpm install --save express body-parser\ntouch server.js</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> bodyParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bodyparser'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3030</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Hellow world from </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Magic happening on </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>process.env.PORT</p>\n<ul>\n<li>\n<p>this says if there is no port I've given as a fallback port, if you can pull out an environment variable somewhere in my machine or assign one for me, use that port to hold up the server</p>\n<ul>\n<li>could be used by Heroku/Netlify</li>\n</ul>\n</li>\n<li>\n<p>can have multiple variables and processes</p>\n<ul>\n<li>example: this is a developer port, this is a live server port</li>\n</ul>\n</li>\n</ul>\n<p>We are hosting and ngrok takes our local host and exposes it to the WWW. If my server goes down, it goes down as well.</p>\n<p>If you don't know what port your web server is listening on, it's probably on port 80 for the default for HTTP.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">ngrok http 3030</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Gives us a HTTP port and a HTTPS port</p>\n<p>Demo:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">- Created public Github repo\n- git clone\n- npm init\n- touch server.js\n- npm install --save express body-parser</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>server.js</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> bodyParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bodyparser'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> corst <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cors'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3030</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Hellow world from </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>'<span class=\"token operator\">/</span>payload<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Magic happening on </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>.gitignore\n<code class=\"language-text\">/node_modules</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">- git add .\n- git commit -m &quot;init&quot;\n- git push -u origin master</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h4><a href=\"https://github.com/ryanhca/ngrok-webhooks\">Ryan's Repo</a></h4>\n<h3>Steps:</h3>\n<ul>\n<li>Create a repo</li>\n<li>Open settings</li>\n<li>\n<p>Webhooks</p>\n<ul>\n<li>Webhooks allow external services to be notified when certain events happen. When specified events happen, we'll send a POST request to each of the URLs you provide. Learn more in our <a href=\"https://developer.github.com/webhooks/\">Webhooks Guide</a>.</li>\n<li>\n<p>Creating webhooks</p>\n<ul>\n<li>Will guide you through how to get it started</li>\n</ul>\n</li>\n<li>Add webhooks</li>\n</ul>\n</li>\n</ul>\n<p>First thing you want to do is look at the payload URL</p>\n<p>If you have ngroks set up, the URL from ngroks is the one you'll need.</p>\n<ul>\n<li>Want to set application/json as your content type</li>\n<li>If you have a secret, or need authentication on your ngrok, you can get an authentication, it will send that secret along with the resource request</li>\n<li>clicking add webhook pushes some information</li>\n<li>\n<p>Let me select the individual events</p>\n<ul>\n<li>Fork</li>\n</ul>\n</li>\n</ul>\n<p>If you want to test, you can send a test request</p>\n<p>Since Ryan subscribed to the webhook to hit the URL on this post route of payload, any time someone interfaces with one of these events, it will send a request to that route.</p>\n<ul>\n<li>If this was just <a href=\"http://localhost\">http://localhost</a> ... there's no way Github could talk to the localhost without it being on the WWW.</li>\n</ul>\n<p>ngrok is hosting this URL, but they're propping up/ piggybacking off of your local machine's port and builds it as a live URL.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Forwarding http//9146070a.ngrok.io -&gt; localhost:3030</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>What this line is saying is:\nExpose localhost:3030 to this internet URL</p>\n<ul>\n<li>It's a proxy</li>\n</ul>\n<p>Proxy:</p>\n<ul>\n<li>Middleman</li>\n<li>\n<p>Authority to represent someone else</p>\n<ul>\n<li>Told ngrok it was allowed to represent my port</li>\n</ul>\n</li>\n</ul>\n<p>Where does this code currently live? Who is spinning up the code?</p>\n<p>My code lives on my machine and my machine is spinning it on a local host and ngrok is exposing it to the world.</p>\n<p>Webhooks exposes a couple of things:</p>\n<ul>\n<li>Sometimes you want services to request information to your server</li>\n<li>You can use that information to your benefit</li>\n</ul>\n<p>They'll report it to the ngrok URL which is hosting and standing proxy for my local host.</p>\n<p>The URL that you give to the Github webhook payload portion is the URL that needs to be live on the internet</p>\n<ul>\n<li>\n<p><a href=\"http://localhost:3030/payload\">http://localhost:3030/payload</a></p>\n<ul>\n<li>Could not connect to server</li>\n</ul>\n</li>\n</ul>",
      "frontmatter": {
        "date": "2018-06-23",
        "title": "CS5: Ngrok",
        "chapter": null,
        "subtitle": null,
        "tags": ["CS5", "Ngrok", "DevOps"],
        "path": "/CS5-Ngrok"
      }
    }
  },
  "pageContext": {
    "isCreatedByStatefulCreatePages": false,
    "pathSlug": "/CS5-Ngrok",
    "prev": {
      "frontmatter": {
        "path": "/CS5-Netlify",
        "title": "CS5: Netlify",
        "tags": ["CS5", "Netlify", "DevOps"],
        "subtitle": null,
        "chapter": null
      }
    },
    "next": {
      "frontmatter": {
        "path": "/CS5-Solution-GCP-Docker",
        "title": "CS5: Google Cloud Platform + Docker",
        "tags": ["CS5", "docker", "DevOps", "Google Cloud Platform"],
        "subtitle": null,
        "chapter": null
      }
    }
  }
}
