{
  "data": {
    "markdownRemark": {
      "html": "<p>We'll primarily deal with actual arrays, that is, those declared with the built-in C++ syntax such as: <code class=\"language-text\">int tenIntegerArray[10]</code></p>\n<p>Techniques discussed apply to data structures with similar attributes. Moxst common of these structures is a <em>vector</em>.</p>\n<p>The term <em>vector</em> is often used as a synonym for any array of a single dimension, but we'll use it here in the more specific sense of a structure that has the attributes of an array without a specified maximum number of elements (An array is of a fixed size, a vector can grow or shrink automatically as needed).</p>\n<p>This chapter will have restrictions that allow us to use structures with a fixed number of elements but problems without such restrictions can use vectors.</p>\n<p><strong>Array</strong>: Collection of variables of the same type organized under one name, where individual variables are denoted by a number (subscript).</p>\n<p><strong>Random access</strong>: Any element can be accessed at any time.</p>\n<h2>List of Basic Operations of Arrays:</h2>\n<p><strong>1) Store: Assigning values</strong>\nTo assign integer 5 to first element of previously declared array: <code class=\"language-text\">tenIntegerArray[0] = 5</code></p>\n<p><em>Note</em>: Values of the elements are \"garbage\" until particular values are assigned, so arrays should be initialized before use.</p>\n<p><strong>Assigning a value to every element</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> tenIntegerArray<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">57</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>Setting every element in 10-element array to -1</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> integerArray<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> tenIntegerArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>2) Copy: Either because need original array after manipulation or because we want to copy parts to a new array</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> tenIntegerArray<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">57</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> secondArray<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> secondArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tenIntegerArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><strong>3) Retrieval and Search</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> tenIntegerArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>4) Searching for a Specific Value</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ARRAY_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> intArray<span class=\"token punctuation\">[</span>ARRAY_SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30987</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">287</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> targetValue <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> targetPos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>intArray<span class=\"token punctuation\">[</span>targetPos<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> targetValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>targetPos <span class=\"token operator\">&lt;</span> ARRAY_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> targetPos<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><em>Note</em>: If targetValue is not found, targetPos will be equal to ARRAY<em>SIZE after the loop. This is enough to signify the event because ARRAY</em>SIZE is not a valid element number, but it is up to the code following it to check that. Also, this does not handle the possibility of the value appearing more than once as it will return after the first match.</p>\n<p><strong>5) Criterion-based Search</strong>:</p>\n<p>When the value you're looking for isn't a fixed value and is instead a value based on the relationship with other values in the array - for example, largest.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ARRAY_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> intArray<span class=\"token punctuation\">[</span>ARRAY_SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">57</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30987</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">287</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> highestValue <span class=\"token operator\">=</span> intArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ARRAY_SIZE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> highestValue<span class=\"token punctuation\">)</span> highestValue <span class=\"token operator\">=</span> intArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This basic structure can be applied to all sorts of situations in which you want to look at every element and find the value that most exemplifies a given quality.</p>\n<p><strong>6) Sort: Putting data in a specified order</strong>:</p>\n<p>For most situations, you can make do with two sorts in your toolbox - a fast, easy-to-use sort and a decent easy-to-understand sort you can modify with confidence when the need arises. For fast and easy, we'll use the standard library function qsort, and when we need something to tweak, we'll use an insertion sort.</p>\n<p><strong>7) Fast-and-Easy Sorting with qsort</strong>:</p>\n<p>To use <em>qsort</em>, you have to write a comparator function. That function will be called by qsort whenever it needs to compare two elements in the array to see which should appear earlier in sorted order. The function is passed two void pointers which should be cast to the element type in your array. The function should return an int, either positive, negative, or zero depending on whether the first element is larger, smaller, or equal to the second element.</p>\n<p><strong>Comparator function example</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">compareFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> voidA<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> voidB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> intA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>voidA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> intB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>voidB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>intA <span class=\"token operator\">-</span> <span class=\"token operator\">*</span>intB<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ARRAY_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> intArray<span class=\"token punctuation\">[</span>ARRAY_SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">84</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">68</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>intArray<span class=\"token punctuation\">,</span> ARRAY_SIZE<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> comapreFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>8) Easy-to-Modify Sorting with Insertion Sort</strong>:</p>\n<p>Basic implementation for our integer array:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> SIZE_ARRAY <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> start <span class=\"token operator\">&amp;&amp;</span> intArray<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> intArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> intArray<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        intArray<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> intArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        intArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Explanation:\nOuter loop selects next 'card'. Loop initializes i to start + 1 because a list of only one element is by definition a sorted list. Inner loop puts the current value in the correct position by swapping current value with its predecessor until it's in its place.</p>\n<p><strong>9) Compute Statistics</strong>:</p>\n<p>Similar to retrieval operation in that you need to look at every element in the array before returning a value, but instead of returning a value of one of the array elements, you return a statistic computed from all the values in the array. Examples include average, median, or mode.</p>\n<p><strong>Example: Average</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ARRAY_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> gradeArray<span class=\"token punctuation\">[</span>ARRAY_SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">76</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">83</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">,</span> <span class=\"token number\">92</span><span class=\"token punctuation\">,</span> <span class=\"token number\">74</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ARRAY_SIZE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sum <span class=\"token operator\">+=</span> gradeArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">double</span> average <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> ARRAY_SIZE<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Example: Data Validation</strong>:</p>\n<p>Array of double values represents payments to vendors. Only positive values are valid, so negative values indicate data integrity problems. As part of validation report, you might write a loop to count the number of negative values in the array.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ARRAY_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> countNegative <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ARRAY_SIZE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vendorPayments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> countNegative__<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Problem: Finding the Mode</h2>\n<p>In statistics, the mode of a set of values is the value that appears most often. Write code that processes an array of survey data, where survey takers have responded to a question with a number in the range 1-10 to determine the mode of the data set. For our purpose, if multiple modes exist, any may be chosen.</p>\n<h4>Pseudo Code</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> mostFrequent <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> highestFrequency <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> currentFrequency <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ARRAY_SIZE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    currentFrequency<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>surveyData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> IS LAST OCCURRENCE OF A VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentFrequency <span class=\"token operator\">></span> highestFrequency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            highestFrequency <span class=\"token operator\">=</span> currentFrequency<span class=\"token punctuation\">;</span>\n            mostFrequent <span class=\"token operator\">=</span> surveyData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        currentFrequency <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Completed:</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> mostFrequent<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> highestFrequency <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> currentFrequency <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ARRAY_SIZE<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    currentFrequency<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// if (surveyData[i] IS LAST OCCURRENCE OF A VALUE)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> ARRAY_SIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> surveyData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> surveyData<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentFrequency <span class=\"token operator\">></span> highestFrequency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            highestFrequency <span class=\"token operator\">=</span> currentFrequency<span class=\"token punctuation\">;</span>\n            mostFrequent <span class=\"token operator\">=</span> surveyData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        currentFrequency <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// using qsort with earlier compareFunc to group in order</span>\n<span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>surveyData<span class=\"token punctuation\">,</span> ARRAY_SIZE<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> compareFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Refactoring</strong>: Improving working code - not changing what it does, but how it does it</p>\n<p><strong>Histogram</strong>: A graph showing how often different values appear in an underlying dataset.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAX_RESPONSE <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> histogram<span class=\"token punctuation\">[</span>MAX_RESPONSE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX_RESPONSE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    histogram<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ARRAY_SIZE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    histogram<span class=\"token punctuation\">[</span>surveyData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>With histogram data in place, we can write the rest. Note the histogram code was written separately, so that it could be tested separately.</p>\n<p><strong>No time is saved by writing all of the code at once in a situation where the problem is easily separated into parts that can be individually written and tested</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> mostFrequent <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX_RESPONSE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>histogram<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> histogram<span class=\"token punctuation\">[</span>mostFrequent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> mostFrequent<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nmostFrequent<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Writing an original (to the programmer) program is a learning process and can't be expected to always progress in a straight line. A long journey is not a waste of time if you learned something from it that you wouldn't have learned by going the short way.</p>\n<h2>Arrays of Fixed Data</h2>\n<p>It's often useful to create an array where values never change after initialization to allow a simple loop or direct array lookup to replace a whole block of control statements.</p>\n<h4>Example: Replacing the punctuation switch for Decode a Message</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> punctuation<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">','</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">';'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\noutputCharacter <span class=\"token operator\">=</span> punctuation<span class=\"token punctuation\">[</span>number <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h4>Example: If we then had to encode using same algorithm</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ARRAY_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> targetPos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>punctuation<span class=\"token punctuation\">[</span>targetPos<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> targetValue <span class=\"token operator\">&amp;&amp;</span> targetPos <span class=\"token operator\">&lt;</span> ARRAY_SIZE<span class=\"token punctuation\">)</span> targetPos<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> punctuationCode <span class=\"token operator\">=</span> targetPos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Suppose writing program to compute cost of a business license in a state where the license cost varies as the gross sales figures of the business varies.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> NUM_CATEGORIES <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> categoryThresholds<span class=\"token punctuation\">[</span>NUM_CATEGORIES<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150000.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000000.0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> licenseCost<span class=\"token punctuation\">[</span>NUM_CATEGORIES<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">80.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000.0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncategory <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>category <span class=\"token operator\">&lt;</span> NUM_CATEGORIES <span class=\"token operator\">&amp;&amp;</span> categoryThresholds<span class=\"token punctuation\">[</span>category<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> grossSales<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    category<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ncost <span class=\"token operator\">=</span> licenseCost<span class=\"token punctuation\">[</span>category <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ol>\n<li>First array stores gross sales threshold for each business category</li>\n<li>Second array stores business license cost per category</li>\n<li>Initialize category to 0</li>\n<li>Search through categoryThresholds array, stopping when threshold exceeds the gross sales or when out of categories</li>\n<li>Use category to reference the license cost from licenseCost array.</li>\n</ol>\n<h2>Non-Scalar Arrays</h2>\n<p>Usually the use of compound data types doesn't have to complicate our thinking about array processing because it just involves one data member of the struct or class and you can ignore the other parts of the data structure.</p>\n<p>Sometimes, the use of compound data types does require us to make some changes to our approach.</p>\n<p>For example, consider the problem of finding the highest of a set of student grades. Suppose that instead of an array of int, we have an array of data structures, each representing a student record:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">student</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> studentID<span class=\"token punctuation\">;</span>\n    string name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Always easy to initialize an array, even when a struct!</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ARRAY_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nstudent sutdentArray<span class=\"token punctuation\">[</span>ARRAY_SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span><span class=\"token number\">87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10001</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fred\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10002</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10003</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alistair\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10004</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sasha\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token number\">84</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10005</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Erin\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10006</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Belinda\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10007</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Leslie\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10008</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Candy\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token number\">81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10009</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Aretha\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token number\">68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10010</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Veronica\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>To get the highest grades:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> highest <span class=\"token operator\">=</span> studentArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>grade<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">&lt;</span> ARRAY_SIZE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>studentArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">></span> highest<span class=\"token punctuation\">)</span> highest <span class=\"token operator\">=</span> studentArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>grade<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In order to retrieve any data for the highest scoring student (name, id, grade), it would be better to track the array position rather than the highest grade:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> highPosition <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ARRAY_SIZE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>studentArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">></span> studentArray<span class=\"token punctuation\">[</span>highPosition<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>grade<span class=\"token punctuation\">)</span> highPosition <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Multidimensional Arrays</h2>\n<p>Business license example from earlier:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> licenseData<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>numberCategories<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150000.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000000.0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token number\">50.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50000.0</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Using a multidimensional array usually lowers readability, and isn't really worth it. However, if you have multiple things you need to compare in order to compute a statistic, it may be better to have a multidimensional array in order to process the entire array at once.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> NUM_AGENTS <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> NUM_MONTHS <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sales<span class=\"token punctuation\">[</span>NUM_AGENTS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>NUM_MONTHS<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span><span class=\"token number\">1856</span><span class=\"token punctuation\">,</span> <span class=\"token number\">498</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30924</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87478</span><span class=\"token punctuation\">,</span> <span class=\"token number\">328</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2653</span><span class=\"token punctuation\">,</span> <span class=\"token number\">387</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3754</span><span class=\"token punctuation\">,</span> <span class=\"token number\">387587</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2873</span><span class=\"token punctuation\">,</span> <span class=\"token number\">276</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token number\">5685</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3758</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6453</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98357</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2334</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1233</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2333</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3222</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13443</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3443</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token number\">34433</span><span class=\"token punctuation\">,</span> <span class=\"token number\">343566</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24567</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35453</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1343</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1435</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1334</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1254</span><span class=\"token punctuation\">,</span> <span class=\"token number\">454</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3453</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7853</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4343</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> highestSales <span class=\"token operator\">=</span> sales<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> agent <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> agent <span class=\"token operator\">&lt;</span> NUM_AGENTS<span class=\"token punctuation\">;</span> agent<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> month <span class=\"token operator\">&lt;</span> NUM_MONTHS<span class=\"token punctuation\">;</span> month<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sales<span class=\"token punctuation\">[</span>agent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>month<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> highestSales<span class=\"token punctuation\">)</span>\n            highestSales <span class=\"token operator\">=</span> sales<span class=\"token punctuation\">[</span>agent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>month<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>It may occur to you that the first time through the nested loops, both of our loop counters will be 0, so we will be comparing this initial value of highestSales to itself. This doesn't affect the outcome, but sometimes novice programmers will attempt to avoid this tiny inefficiency by putting in a second if statement in the inner loop body:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>agent <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> month <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sales<span class=\"token punctuation\">[</span>agent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>month<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> highestSales<span class=\"token punctuation\">)</span>\n        highestSales <span class=\"token operator\">=</span> sales<span class=\"token punctuation\">[</span>agent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>month<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>This, however, is considerably <em>less</em> efficient than the previous version because we would be performing 50 extra comparisons while avoiding only one.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">double</span> <span class=\"token function\">arrayAverage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> intArray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ARRAY_SIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ARRAY_SIZE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> intArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">double</span> average <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> ARRAY_SIZE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> average<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> highestAverage <span class=\"token operator\">=</span> <span class=\"token function\">arrayAverage</span><span class=\"token punctuation\">(</span>sales<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> agent <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> agent <span class=\"token operator\">&lt;</span> NUM_AGENTS<span class=\"token punctuation\">;</span> agent<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> agentAverage <span class=\"token operator\">=</span> <span class=\"token function\">arrayAverage</span><span class=\"token punctuation\">(</span>sales<span class=\"token punctuation\">[</span>agent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>agentAverage <span class=\"token operator\">></span> highestAverage<span class=\"token punctuation\">)</span> highestAverage <span class=\"token operator\">=</span> agentAverage<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Highest monthly average: \"</span> <span class=\"token operator\">&lt;&lt;</span> highestAverage <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Because the direct relationship between arrays and addresses in C++, sales[agent] indicates the address of the first element of the specified row, which can then be used by our function as the base address of a one-dimensional array consisting of just that row.</p>\n<p>If the data you want to individually process isn't contiguous in the array initalizer, you've organized the data the wrong way.</p>\n<p>Because average monthly sales for the current agent is potentially referenced twice (once in the assignment statement and once in the conditional), temp variable eliminates the possibility of calling arrayAverage twice for the same agent data.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> ARRAY_SIZE<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Number of survey responses: \"</span><span class=\"token punctuation\">;</span>\ncin <span class=\"token operator\">>></span> ARRAY_SIZE<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>surveyData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>ARRAY_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ARRAY_SIZE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Survey response \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> surveyData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Using an array works in this situation because we know the size of the array at the start.</p>\n<p>Because it's dynamically allocated, we need to deallocate the surveyData using delete[].</p>\n<p>delete[] is used for arrays. It doesn't really matter with ints, but with objects, this ensures that objects are deleted before the array (so it's good practice to always use it when dealing with arrays).</p>\n<p>If you don't know the size of the array, you can use a vector, which works like an array but when a vector has filled its original size, you can use push_back to add further elements to the array:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> surveyData<span class=\"token punctuation\">;</span>\nsurveyData<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> surveyResponse<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter next survey response or -1 to end: \"</span><span class=\"token punctuation\">;</span>\ncin <span class=\"token operator\">>></span> surveyResponse<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>surveyResponse <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    surveyData<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>surveyResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter next survey response or -1 to end: \"</span><span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> surveyResponse<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> vectorSize <span class=\"token operator\">=</span> surveyData<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAX_RESPONSE <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> histogram<span class=\"token punctuation\">[</span>MAX_RESPONSE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX_RESPONSE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    histogram<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vectorSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    histogram<span class=\"token punctuation\">[</span>surveyData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> mostFrequent <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX_RESPONSE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>histogram<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> histogram<span class=\"token punctuation\">[</span>mostFrequent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>mostFrequent <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nmostFrequent<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><em>Note</em>: Reserve step isn't necessary but helps prevent vector from needing to resize as frequently.</p>\n<p>We may not need an array for survey data, only for histogram.</p>\n<p>We need a data structure only when we need to read in all the values before processing or need to process the values more than once. In this particular situation, neither condition is true.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAX_RESPONSE <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> histogram<span class=\"token punctuation\">[</span>MAX_RESPONSE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX_RESPONSE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    histogram<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> surveyResponse<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter new survey response or -1 to end: \"</span><span class=\"token punctuation\">;</span>\ncin <span class=\"token operator\">>></span> surveyResponse<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>surveyResponse <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    histogram<span class=\"token punctuation\">[</span>surveyResponse <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter next survey response or -1 to end: \"</span><span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> surveyResponse<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> mostFrequent <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX_RESPONSE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>histogram<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> histogram<span class=\"token punctuation\">[</span>mostFrequent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        mostFrequent <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nmostFrequent<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The vector version is inefficient in space because it stores values you don't need to store and inefficient in time because it adds an additional loop. In effect, it does more work without any corresponding benefit.</p>\n<p><strong>Performance tuning</strong>: Systematic analysis and improvement of a program's efficiency in time and space.</p>\n<h4>When to Choose an Array</h4>\n<p>If you are sure you need to process data multiple times and have a good idea about the maximum size, the last criterion for deciding whether or not to use an array is random access.</p>\n<p><strong>Random access</strong>: When it is possible to access any element at any time and it takes the same amount of time as accessing any other element.</p>\n<p>If you only need sequential access, you might think about using a different data structure.</p>\n<p>\"Use arrays wisely, but don't let the perfect be the enemy of the good.\"</p>\n<hr>\n<h2>3-1</h2>\n<p>Are you disappointed we didn't do more sorting? I'm here to help. To make sure you are comfortable with qsort, write code that uses the function to sort an array of our <em>student</em> struct. First have it sort by grade, and then try it again using the student ID.</p>\n<h2>3-2</h2>\n<p>Rewrite the code that finds the agent with the best monthly sales average so that it finds the agent with the highest median sales. As stated earlier, the median of a set of values is the \"one in the middle\" such that half of the other values are higher and half of the other values are lower. If there is an even number of values, the median is the simple average of the two values in the middle. For example, in the set 10, 6, 2, 14, 7, 9, the values in the middle are 7 and 9. The average of 7 and 9 is 8, so 8 is the median.</p>\n<h2>3-3</h2>\n<p>Write a bool function that is passed an array and the number of elements in that array and determine whether the data in the array is sorted. This should require only one pass!</p>\n<h2>3-4</h2>\n<p>Here's a variation on the array of const values. Write a program for creating a substitution cipher problem. In a substitution cipher problem, all messages are made of uppercae letters and punctuation. The original message is called the plaintext and you create the ciphertext by substituting each letter with another letter (for example, C would become an X). For this poroblem, hard-code a const array of 26 char elements for the cipher and have your program read a plaintext message and output the equivalent ciphertext.</p>\n<h2>3-5</h2>\n<p>Have the previous program convert the ciphertext back to the plaintext to verify the encoding and decoding</p>\n<h2>3-6</h2>\n<p>To make the ciphertext problem even more challenging, have your program randomly generate the cipher array instead of a hard-coded const array. Effectively, this means placing a random character in each element of the array, but remember that you can't substitute a letter for itself. So the first element can't be A. And you can't use the same letter for two substitutions - that is, if the first element is S, no other element can be S.</p>\n<h2>3-7</h2>\n<p>Write a program that is given an array of integers and determines the mode, which is the number that appears most frequently in the array</p>\n<h2>3-8</h2>\n<p>Write a program that processes an array of <em>student</em> objects and determines the grade quartiles - that is, the grade one would need to score as well or better than 25% of the students, 50% of the students, and 75% of the students</p>\n<h2>3-9</h2>\n<p>Consider this modification of the sales array. Because salespeople come and go throughout the year, we are now marking months prior to a sales agent's hiring or after a sales agent's last month with a -1. Rewrite your highest sales average, or highest sales median, code to compensate.</p>",
      "frontmatter": {
        "date": "2018-12-07",
        "title": "Think Like a Programmer:",
        "chapter": "Chapter Three",
        "subtitle": "Solving Problems with Arrays",
        "tags": ["problem solving", "Think Like a Programmer"],
        "path": "/Think-Like-a-Programmer-Chapter-III"
      }
    }
  },
  "pageContext": {
    "isCreatedByStatefulCreatePages": false,
    "pathSlug": "/Think-Like-a-Programmer-Chapter-III",
    "prev": {
      "frontmatter": {
        "path": "/Think-Like-a-Programmer-Chapter-II",
        "title": "Think Like a Programmer:",
        "tags": ["problem solving", "Think Like a Programmer"],
        "subtitle": "Pure Puzzles",
        "chapter": "Chapter Two"
      }
    },
    "next": {
      "frontmatter": {
        "path": "/Computer-Science-Distilled-Chapter-I",
        "title": "Computer Science Distilled",
        "tags": ["computer science", "Computer Science Distilled", "logic"],
        "subtitle": "1.1 Basics & 1.2 Logic",
        "chapter": "Chapter One"
      }
    }
  }
}
