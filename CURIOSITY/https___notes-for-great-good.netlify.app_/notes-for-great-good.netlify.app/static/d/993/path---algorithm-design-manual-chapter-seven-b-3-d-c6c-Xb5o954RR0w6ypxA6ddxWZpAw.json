{
  "data": {
    "markdownRemark": {
      "html": "<h3>Backtracking:</h3>\n<p>Backtracking is a systematic way to iterate through all possible configurations of a search space. The configuration may represent all possible arrangements of objects (permutations) or all possible ways of building a collection of them (subsets).</p>\n<p>Backtracking creates a tree of partial solutions where each vertex represents one partial solution. An edge exists from <em>x</em> to <em>y</em> if node <em>y</em> was created by advancing from <em>x</em>. The process of constructing solutions corresponds to doing depth-first traversal of the backtrack tree.</p>\n<p>Backtrack-DFS(A, k)</p>\n<p>    if A = (a<sub>1</sub>, a<sub>2</sub>, ...a<sub>k</sub>) is a solution, report it<br/>\n    else<br/>\n        k = k + 1<br/>\n        compute S<sub>k</sub><br/>\n        while S<sub>k</sub> does not equal 0 do<br/>\n            a<sub>k</sub> = an element in S<sub>k</sub><br/>\n            S<sub>k</sub> = S<sub>k</sub> - a<sub>k</sub><br/>\n            Backtrack-DFS(A, k)</p>\n<p>Breadth-first would also work, but takes up more space. Current state of search represented by path from root to current search depth-first node. Requires space proportional to height of tree. In breadth-first search, the queue stores all nodes at the current level, proportional to the width of the tree.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">bool finished <span class=\"token operator\">=</span> False<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* found solution yet? */</span>\n<span class=\"token function\">backtrack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> data input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">[</span>MAXCANDIDATES<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* candidates for next position */</span>\n    <span class=\"token keyword\">int</span> ncandidates<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* next position candidate count */</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* counter */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_a_solution</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">process_solution</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        k <span class=\"token operator\">=</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">construct_candidates</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> ncandidates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> ncandidates<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">make_move</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">backtrack</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">unmake_move</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>finished<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* terminate early */</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Backtracking ensures correctness by enumerating all possibilities and efficiency by never visiting a state more than once.</p>\n<p>Because each candidate array <em>c</em> is allocated with each recursive procedure call, subsets of not-yet-considered extension candidates at each position will not interfere with each other.</p>\n<p>The application-specific parts of the algorithm consist of five subroutines:</p>\n<ul>\n<li>\n<p><em>is</em>a<em>solution(a, k, input)</em> - Boolean function to test whether the first <em>k</em> elements of vector <em>a</em> form a complete solution for the problem. The last argument, <em>input</em>, allows the passing of infomration into the routine such as the size of the target solution</p>\n</li>\n<li>\n<p><em>construct</em>candidates(a, k, input, c, ncandidates)_ - The routine fills an array <em>c</em> with the complete set of possible candidates for the <em>kth</em> position of <em>a</em>, given the contents of the first <em>k - 1</em> positions. The number of candidates returned is denoted by <em>ncandidates</em>. <em>input</em> can be used to pass additional information to the function.</p>\n</li>\n<li>\n<p><em>process</em>solution(a, k, input)_ - Prints, counts, or otherwise processes the complete solution once created.</p>\n</li>\n<li>\n<p><em>make</em>move(a, k, input_ and <em>unmake</em>move(a, k, input)_ - Allows us to modify data structure based on moves and clean up if we decide to undo moves.</p>\n</li>\n</ul>\n<p>The global finished flag allows for early termination</p>\n<h3>Constructing all Subsets</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">is_a_solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* is k == n? */</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">construct_canddidates</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ncandidates<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> True<span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> False<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>ncandidates <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">process_candidates</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* counter */</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> True<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" %d\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" }\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">generate_subsets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>NMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* solution vector */</span>\n    <span class=\"token function\">backtrack</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>There are 2<sup>2</sup> subsets.</p>\n<h3>Constructing all Permutations</h3>\n<p>Counting permutations is a necessary prerequisite to generating them.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">construct_candidates</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ncandidates<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* counter */</span>\n    bool in_perm<span class=\"token punctuation\">[</span>NMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* what's in the permutation */</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NMAX<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> in_perm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> False<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> in_perm<span class=\"token punctuation\">[</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> True<span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">*</span>ncandidates <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>in_perm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> False<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            c<span class=\"token punctuation\">[</span> <span class=\"token operator\">*</span>ncandidates<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>ncandidates <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ncandidates <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Testing if <em>i</em> is a candidate for the <em>kth</em> slot in the permutation can be done by iterating through all <em>k - 1</em> elements and verifying none matched, but setting up a bit-vector data structure allows us to perform the legality check in O(1) time.</p>\n<p>Completing the job requires specifying <em>process</em>solution_ and <em>is</em>a<em>solution</em> and setting the appropriate arguments to backtrack. Essentially the same as with subsets:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">process_solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* counter */</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" %d\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">is_a_solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> k <span class=\"token operator\">==</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">generate_permutations</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>NMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* solution vector */</span>\n    <span class=\"token function\">backtrack</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Constructing All Paths in a Graph</h3>\n<p>Starting point of any path from <em>s</em> to <em>t</em> always starts with <em>s</em> so <em>s</em> is the only candidate for the first position and <em>S<sub>1</sub> = {s}</em>. Possible candidates for second position are vertices <em>v</em> such that <em>{s, v}</em> is an edge of the graph. In general, <em>S<sub>k</sub></em> consists of the set of vertices adjacent to <em>a<sub>k</sub></em> that have not been used elsewhere in the partial solution <em>A</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">construct_candidates</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ncandidates<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* counter */</span>\n    bool in_sol<span class=\"token punctuation\">[</span>NMAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* what's already in the solution */</span>\n    edgenode <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* temporary pointer */</span>\n    <span class=\"token keyword\">int</span> last<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* last vertex on current path */</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NMAX<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> in_sol<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Fa<span class=\"token punctuation\">;</span>se<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> in_sol<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> True<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* always start from vertex 1 */</span>\n        <span class=\"token operator\">*</span>ncandidates <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">*</span>ncandidates <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        last <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        p <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>in_sol<span class=\"token punctuation\">[</span>p<span class=\"token operator\">-></span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                c<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>ncandidates<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>y<span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">*</span>ncandidates <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ncandidates <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">is_a_solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">process_solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    solution_count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* count all s to t paths */</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>Search Pruning</h3>\n<p><em>Pruning</em>: A technique of cutting of search the instant it is established that a partial solution could not be extended to a full solution.</p>\n<h3>Take Home Lesson</h3>\n<p>Combinatorial searches, when augmented with tree pruning techniques, can be used to find the optimal solution of small optimization problems. How small depends on the problem, but typical size limits are somewhere between 15 ≤ n ≤ 50 items.</p>\n<h3>Sudoku</h3>\n<p>Backtracking lends itself to solving a Sudoku puzzle</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> DIMENSION 9; </span><span class=\"token comment\">/* 9 x 9 board */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> NCELLS DIMENSION * DIMENSION </span><span class=\"token comment\">/* 81 cells */</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* x and y coordinates of point */</span>\n<span class=\"token punctuation\">}</span> point<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">[</span>DIMENSION<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>DIMENSION<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* matrix of board contents */</span>\n    <span class=\"token keyword\">int</span> freecount<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* how many open squares left */</span>\n    point move<span class=\"token punctuation\">[</span>NCELLS<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* how did we fill spaces? */</span>\n<span class=\"token punctuation\">}</span> boardtype<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Constructing the options for the next solution position requires picking the open square to fill next (next<em>square) and identifying which numbers are options to fill the square (possible</em>values)</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">construct_candidates</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> boardtype <span class=\"token operator\">*</span>board<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ncandidates<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* position of next move */</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* counter */</span>\n    bool possible<span class=\"token punctuation\">[</span>DIMENSION<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* possible for square */</span>\n    <span class=\"token function\">next_square</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* which square to fill next */</span>\n\n    board<span class=\"token operator\">-></span>move<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* store choice for next position */</span>\n    board<span class=\"token operator\">-></span>move<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>ncandidates <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* error condition - no moves possible */</span>\n\n    <span class=\"token function\">possible_values</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> board<span class=\"token punctuation\">,</span> possible<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> DIMENSION<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>possible<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> True<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            c<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>ncandidates<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>ncandidates <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ncandidates <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">make_move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> boardtype <span class=\"token operator\">*</span>board<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fill_board</span><span class=\"token punctuation\">(</span>board<span class=\"token operator\">-></span>move<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> board<span class=\"token operator\">-></span>move<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">unmake_move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> boardtype <span class=\"token operator\">*</span>board<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">free_space</span><span class=\"token punctuation\">(</span>board<span class=\"token operator\">-></span>move<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> board<span class=\"token operator\">-></span>move<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">is_a_solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> boardtype <span class=\"token operator\">*</span>board<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board<span class=\"token operator\">-></span>freecount <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> True\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> False\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Turn off search once solution found.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">process_solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> boardtype <span class=\"token operator\">*</span>board<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print_board</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    finished <span class=\"token operator\">=</span> True<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Two reasonable approaches to selectingt the next square:</p>\n<ul>\n<li>\n<p><em>Arbitrary selection</em>: Pick the first open square</p>\n</li>\n<li>\n<p><em>Most constrained selection</em>: Pick square with the fewest possible options</p>\n</li>\n</ul>\n<p>Two possibilities for possible_values:</p>\n<ul>\n<li>\n<p><em>Local count</em>: Allows all numbers 1-9 not already used in column, row, or sector</p>\n</li>\n<li>\n<p><em>Look ahead</em>: Testing to see if another open square has no options under local count criteria, allowing us to backtrack sooner</p>\n</li>\n</ul>\n<style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}\n.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}\n.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n</style>\n<div class=\"table\">\n<table class=\"tg\">\n  <tr>\n    <th class=\"tg-0pky\">Printing Condition</th>\n    <th class=\"tg-0pky\"></th>\n    <th class=\"tg-0pky\"></th>\n    <th class=\"tg-0pky\">Puzzle Complexity</th>\n    <th class=\"tg-0pky\"></th>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\">next_square</td>\n    <td class=\"tg-0lax\">possible_values</td>\n    <td class=\"tg-0lax\">Easy</td>\n    <td class=\"tg-0lax\">Medium</td>\n    <td class=\"tg-0lax\">Hard</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\">arbitrary</td>\n    <td class=\"tg-0lax\">local count</td>\n    <td class=\"tg-0lax\">1,904,832</td>\n    <td class=\"tg-0lax\">863,305</td>\n    <td class=\"tg-0lax\">never finishes</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\">arbitrary</td>\n    <td class=\"tg-0lax\">look ahead</td>\n    <td class=\"tg-0lax\">127</td>\n    <td class=\"tg-0lax\">142</td>\n    <td class=\"tg-0lax\">12,507,212</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\">most contrained</td>\n    <td class=\"tg-0lax\">local count</td>\n    <td class=\"tg-0lax\">48</td>\n    <td class=\"tg-0lax\">84</td>\n    <td class=\"tg-0lax\">1,243,838</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\">most constrained</td>\n    <td class=\"tg-0lax\">look ahead</td>\n    <td class=\"tg-0lax\">48</td>\n    <td class=\"tg-0lax\">65</td>\n    <td class=\"tg-0lax\">10,374</td>\n  </tr>\n</table>\n</div>\n<p>Easy board: Easy for humans\nMedium board: Stumbed finalists of World Sudoku Championship in March 2006\nHard: Contains only 17 fixed numbers - fewest specified known number of positions with only one complete solution (seen below)</p>\n<style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}\n.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}\n.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n</style>\n<div class=\"table\">\n<table class=\"tg\">\n  <tr>\n    <th class=\"tg-0pky\"></th>\n    <th class=\"tg-0pky\"></th>\n    <th class=\"tg-0pky\"></th>\n    <th class=\"tg-0pky\"></th>\n    <th class=\"tg-0pky\"></th>\n    <th class=\"tg-0lax\"></th>\n    <th class=\"tg-0lax\"></th>\n    <th class=\"tg-0lax\">1</th>\n    <th class=\"tg-0lax\">2</th>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\">3</td>\n    <td class=\"tg-0lax\">5</td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\">6</td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\">7</td>\n    <td class=\"tg-0lax\"></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\">7</td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\">3</td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\">4</td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\">8</td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\">1</td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\">1</td>\n    <td class=\"tg-0lax\">2</td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\">8</td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\">4</td>\n    <td class=\"tg-0lax\"></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\">5</td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\">6</td>\n    <td class=\"tg-0lax\"></td>\n    <td class=\"tg-0lax\"></td>\n  </tr>\n</table>\n</div>\n<h3>Take Home:</h3>\n<p>Clever pruning can make short work of surprisingly hard combinatorial search problems. Proper pruning will have a greater impact on search than any other factor.</p>\n<h3>Heuristic Search Methods</h3>\n<p>Common components to heuristics discussed:</p>\n<ul>\n<li><em>Solution space representation</em> - Complete, concise descriptions of set of possible solutions for the problem</li>\n<li><em>Cost function</em> - Search methods need a function to access quality of each element of the solution space.</li>\n</ul>\n<p>Search heuristic identifies element with the best possible score - highest or lowest depending on problem.</p>\n<h3>Random Sampling:</h3>\n<p>Simplest method to search in a solution space uses random sampling. Repeatedly construct random solutions and evaluate them, stopping when you have a good enough solution or are tired of waiting. True random sampling means being able to select elements from the solution space uniformly at random - each of the elements of the solution space must have an equal probability of being the next candidate selected.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">random_sampling</span><span class=\"token punctuation\">(</span>tsp_instance <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nsamples<span class=\"token punctuation\">,</span> tsp_solution <span class=\"token operator\">*</span>bestsol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    top_solution s<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* current top solution */</span>\n    <span class=\"token keyword\">double</span> best_cost<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* best cost so far */</span>\n    <span class=\"token keyword\">double</span> cost_now<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* current cost */</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* counter */</span>\n\n    <span class=\"token function\">initialize_solution</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    best_cost <span class=\"token operator\">=</span> <span class=\"token function\">solution_cost</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">copy_solution</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> bestsol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> nsamples<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">random_solution</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cost_now <span class=\"token operator\">=</span> <span class=\"token function\">solution_cost</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cost_now <span class=\"token operator\">&lt;</span> best_cost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            best_cost <span class=\"token operator\">=</span> cost_now<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">copy_solution</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> bestsol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Random sampling does well when:</p>\n<ul>\n<li>There are a high proportion of acceptable solutions</li>\n<li>When there is no coherence in the solution space</li>\n</ul>\n<h3>Stop and Think: Picking the Pair</h3>\n<p><em>Problem</em>: Propose an efficient algorithm to generate elements from the (<sup>n</sup><sub>2</sub>) <em>imagine the n is directly over the 2</em> unordered pairs of {1,...n} uniformly at random</p>\n<p><em>Solution</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    i <span class=\"token operator\">=</span> <span class=\"token function\">random_int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    j <span class=\"token operator\">=</span> <span class=\"token function\">random_int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> j<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span><span class=\"token operator\">=</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Local Search</h3>\n<p>A local search heuristic starts from an arbitrary element of the solution space and scans the neighborhood looking for a favorable transition to take. Hill-climbing and closely related heuristics such as greedy search and gradient descent search are great at finding local options quickly but often fail to find the globally best solution.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">hill_climbing</span><span class=\"token punctuation\">(</span>tsp_instance <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> tsp_solution <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> cost<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* best cost so far */</span>\n    <span class=\"token keyword\">double</span> delta<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* swap cost */</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* counters */</span>\n    bool stuck<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* did I get a better solution? */</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">transition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">initialize_solution</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>n<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">random_solution</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cost <span class=\"token operator\">=</span> <span class=\"token function\">solution_cost</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n        stuck <span class=\"token operator\">=</span> True<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> t<span class=\"token operator\">-></span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> t<span class=\"token operator\">-></span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                delta <span class=\"token operator\">=</span> <span class=\"token function\">transition</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delta <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    stuck <span class=\"token operator\">=</span> False<span class=\"token punctuation\">;</span>\n                    cost <span class=\"token operator\">=</span> cost <span class=\"token operator\">+</span> delta<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token function\">transition</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>When does local search do well?</p>\n<ul>\n<li>When there is great coherence in the search space</li>\n<li>When cost of incremental evaluation is much cheaper than global solution</li>\n</ul>\n<h3>Simulated Annealing</h3>\n<h3>Take Home:</h3>\n<p>Simulated annealing is effective because it spends more time working on good elements of the solution space than on bad ones and because it avoids getting trapped repeatedly in the same local optima.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">anneal</span><span class=\"token punctuation\">(</span>tsp_instance <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> tsp_solution <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i1<span class=\"token punctuation\">,</span> i2<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* pair of items to swap */</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* counters */</span>\n    <span class=\"token keyword\">double</span> temperature<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* current system temp */</span>\n    <span class=\"token keyword\">double</span> current_value<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* value of current state */</span>\n    <span class=\"token keyword\">double</span> start_value<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* value of start of loop */</span>\n    <span class=\"token keyword\">double</span> delta<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* value after swap */</span>\n    <span class=\"token keyword\">double</span> merit<span class=\"token punctuation\">,</span> flip<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* hold swap accept conditions */</span>\n    <span class=\"token keyword\">double</span> exponent<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* exponent for energy function */</span>\n\n    temperature <span class=\"token operator\">=</span> INITIAL_TEMPERATURE<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">initialize_solution</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>n<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    current_value <span class=\"token operator\">=</span> <span class=\"token function\">solution_cost</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> COOLING_STEPS<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        temperature <span class=\"token operator\">=</span> COOLING_FRACTION<span class=\"token punctuation\">;</span>\n        start_value <span class=\"token operator\">=</span> current_value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> STEPS_PER_TEMP<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">/* pick indices of elements to swap */</span>\n            i1 <span class=\"token operator\">=</span> <span class=\"token function\">random_int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> t<span class=\"token operator\">-></span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i2 <span class=\"token operator\">=</span> <span class=\"token function\">random_int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> t<span class=\"token operator\">-></span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            flip <span class=\"token operator\">=</span> <span class=\"token function\">random_float</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            delta <span class=\"token operator\">=</span> <span class=\"token function\">transition</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> i1<span class=\"token punctuation\">,</span> i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            exponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>delta<span class=\"token operator\">/</span>current_value<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">*</span> temperature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            merit <span class=\"token operator\">=</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">,</span> exponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delta <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* ACCEPT-WIN */</span>\n                current_value <span class=\"token operator\">=</span> current_value <span class=\"token operator\">+</span> delta<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>merit <span class=\"token operator\">></span> flip<span class=\"token punctuation\">)</span> <span class=\"token comment\">/* ACCEPT-LOSS */</span>\n                current_value <span class=\"token operator\">=</span> current_value <span class=\"token operator\">+</span> delta<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token function\">transition</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> i2<span class=\"token punctuation\">,</span> i1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* restore temperature if progress has been made */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>current_value <span class=\"token operator\">-</span> start_value<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n        temperature <span class=\"token operator\">=</span> temperature<span class=\"token operator\">/</span>COOLING_FRACTION<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Take Home</h3>\n<p>Simulated annealing is a simple but effective technique for efficiently obtaining a good but not optimal solution to combinatorial search problems.</p>",
      "frontmatter": {
        "date": "2019-01-23",
        "title": "Algorithm Design Manual:",
        "chapter": "Chapter Seven",
        "subtitle": "Combinatorial Search and Heuristic Methods",
        "tags": [
          "algorithms",
          "heuristics",
          "search",
          "Algorithm Design Manual"
        ],
        "path": "/Algorithm-Design-Manual--Chapter-Seven"
      }
    }
  },
  "pageContext": {
    "isCreatedByStatefulCreatePages": false,
    "pathSlug": "/Algorithm-Design-Manual--Chapter-Seven",
    "prev": {
      "frontmatter": {
        "path": "/Algorithm-Design-Manual--Chapter-Six",
        "title": "Algorithm Design Manual:",
        "tags": ["algorithms", "graphs", "Algorithm Design Manual"],
        "subtitle": "Weighted Graph Algorithms",
        "chapter": "Chapter Six"
      }
    },
    "next": {
      "frontmatter": {
        "path": "/Algorithm-Design-Manual--Chapter-Nine",
        "title": "Algorithm Design Manual:",
        "tags": ["algorithms", "NP-complete", "Algorithm Design Manual"],
        "subtitle": "Intractable Problems and Approximation Algorithms",
        "chapter": "Chapter Nine"
      }
    }
  }
}
