{
  "data": {
    "markdownRemark": {
      "html": "<p>We want to allow users to log in to our websites\nYou log in once, you authenticate yourself, and then you're allowed to make restricted actions</p>\n<p>How do you authenticate users and let them perform actions on your website based on their authentication?</p>\n<h1>Topics:</h1>\n<ul>\n<li>Middleware,</li>\n<li>Sessions,</li>\n<li>Passwords</li>\n</ul>\n<h3>Middleware:</h3>\n<p>Normally when we define route handlers</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">server<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/greet'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// when the server receives a request to /greet</span>\n<span class=\"token comment\">// or client makes request to /greet, both are equivalent,</span>\n<span class=\"token comment\">// this callback gets called</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h5>Middleware:</h5>\n<ul>\n<li>Sits between the route handler and the client</li>\n<li>Client will make request</li>\n<li>Request will first be handled by Middleware</li>\n<li>Middleware will handle request and pass request to route handler</li>\n</ul>\n<p>Middleware can choose to handle request in multiple ways\nRoute handler might not need to do anything\nMiddleware can do things to help route handler out</p>\n<ul>\n<li>Parameter checking, validation, etc.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">STATUS_USER_ERROR</span> <span class=\"token operator\">=</span> <span class=\"token number\">422</span>\nsever<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/greet'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS_USER_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'Must provide a name'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> greeting<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`Hello $name`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">server<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/farewell'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS_USER_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'Must provide a name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> greeting<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`Goodbye </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>During authentication, for various routes you will want to confirm that a user is logged in</p>\n<ul>\n<li>Shouldn't be able to read/create/delete email if you're not logged in</li>\n<li>All the different route handlers will have that check that you're logged in</li>\n<li>Repeat functionality</li>\n</ul>\n<p>Whenever you use server.use, you're using Middleware</p>\n<p>next() is a callback function\nMiddleware says that it's done with its job and next() tells system to go to next part of request</p>\n<p>In case of 422 or some other error, might not want to call next()</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">server<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS_USER_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'Must provide a name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    req<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span> middleware now takes care <span class=\"token keyword\">of</span> validation</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">server<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/greet'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> greeting<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// could use $req.query.name instead of passing down value</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/farewell'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> greeting<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`Goodbye </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">server<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> success<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>This root route would give you an error and tell you you need to enter a name\nThis is because server.use() is global middleware so applied to every route</p>\n<h4>Locally scoping middleware:</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">validateName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS_USER_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'Must provide a name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    req<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/greet'</span><span class=\"token punctuation\">,</span> validateName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Route handlers are also middleware. Never going to call next, which is why we don't include next\nThe next() parameter is still being passed, we just ignore it</p>\n<h4>Sessions:</h4>\n<p>A session contains client-specific data that will persist across requests\nSome persistent state you maintain across your requests</p>\n<ul>\n<li>\n<p>Browsers store little pieces of information for servers</p>\n<ul>\n<li>Cookies</li>\n</ul>\n</li>\n<li>\n<p>The browser sends up the cookie to the server when you make a request to the server</p>\n<ul>\n<li>Has a different cookie for each server that you're accessing</li>\n<li>Cookie contains client-specific information</li>\n</ul>\n</li>\n<li>Server can update that information in some way</li>\n<li>Browser maintains that cookie</li>\n<li>Server reads the cookie</li>\n</ul>\n<h5>express-session:</h5>\n<p>Express-session is a function that accepts one parameter, which is an object of options.</p>\n<ul>\n<li>\n<p>One of the options you have to pass in is the secret</p>\n<ul>\n<li>Secret is a long random string</li>\n<li>Used to persist the session in a secure way</li>\n</ul>\n</li>\n</ul>\n<p>pwgen is a way to generate a secret\n<code class=\"language-text\">pwgen -s 50</code>\nThe dash s makes it machine readable. Otherwise it tries to make it human-readable</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> session <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-session'</span><span class=\"token punctuation\">)</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    secret<span class=\"token punctuation\">:</span> <span class=\"token string\">'6rbjkIyQ2NvCvnQ9kyVvgbndfTWnVmztpEhSV4cjvJEPVkiQni'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We now have a way to persist information across requests</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">server<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/view-counter'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> session <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>session\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>session<span class=\"token punctuation\">.</span>viewCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        session<span class=\"token punctuation\">.</span>viewCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n        session<span class=\"token punctuation\">.</span>viewCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> viewCount<span class=\"token punctuation\">:</span> session<span class=\"token punctuation\">.</span>viewCount <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// req.session is a persistent object that you'll see</span>\n            <span class=\"token comment\">// across requests for the same client</span>\n    <span class=\"token comment\">// contains all the session variables that you set</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// First get request is 1, second is 2 / Doesn't just persist across one route</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Every time server restarts, session will be cleared</p>\n<h5>req.session</h5>\n<p>object that persists across requests for a specific client that you can modify and use - If you open your site on Chrome and in Postman, they will have different viewCount</p>\n<h3>Passwords:</h3>\n<h4>Storing passwords:</h4>\n<p>Sites store your credentials so that it can authenticate\nHow should we store passwords?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> UserSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    email<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n    password<span class=\"token punctuation\">:</span> String\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">{</span>\n    email<span class=\"token punctuation\">:</span> <span class=\"token string\">'karthik@karthik.som'</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token punctuation\">:</span> <span class=\"token string\">'asdf'</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Don't want to store plaintext passwords\nIf some attacker or user is able to access the field, they would be able to log in as someone else</p>\n<p>We store hashed passwords\n\"asdf\"\nInstead of storing it directly, we apply a hash function to it\nhash(\"asdf\") => \"adifhauoyogr4385489tyhrfa;fa;\"</p>\n<ul>\n<li>\n<p>Takes a password and converts it to a seemingly random string</p>\n<ul>\n<li>Hash is a one-way function</li>\n<li>It is difficult to reverse an output to get input (original password)</li>\n<li>Can go password => hash of password</li>\n<li>Can't go hash => password</li>\n</ul>\n</li>\n<li>We store the hash rather than the password.</li>\n</ul>\n<p>There's a lot of details in order to get a good hash function and to make it robust and work in a lot of cases</p>\n<p>Hypothetically, my password is a single letter</p>\n<ul>\n<li>Hacker will see hash, but won't be able to unhash</li>\n<li>But instead, they can call the original hash function on a bunch of inputs and see what the output is</li>\n<li>Then I'm going to compare the output to the hash</li>\n</ul>\n<h4>Rainbow table:</h4>\n<p>Applying the hash function to a bunch of inputs and comparing them to a hash</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> hashA <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> hashB <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> hashC <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> rainbowTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    hashA <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span>\n    hashB<span class=\"token punctuation\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n    hashC<span class=\"token punctuation\">:</span> <span class=\"token string\">\"c\"</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">rainbowTable[&quot;adiufhyaugudgfaytfgiydagfyuhaifj&quot;] =&gt; &quot;a&quot;</code></p>\n<p>Hackers can generate rainbow tables</p>\n<p>Want to make sure that password is long</p>\n<p>Instead of being one letter, it's 10 lowercase characters,\n26^10 of possibilities</p>\n<p>Want long passwords</p>\n<p>Can't guarantee that a user will give you a long password\nUser could give you a short password</p>\n<p>We want to make sure that whenever we hash, we hash a large string\nIn order to make a good hash, we introduce a salt.</p>\n<h5>A salt is a long random string that's generated by the server</h5>\n<p>Instead of hash(password)....</p>\n<ul>\n<li>hash(salt + password)</li>\n<li>hash(password + salt)</li>\n</ul>\n<p>Now even if a user provides a one character password, our salt is long.\nOur salt is 50 or 100 characters long\nMakes it really hard to generate a rainbow table\nCan't store all that, much less generate it</p>\n<p>Salts are great for combatting rainbow table/dictionary attacks.</p>\n<ol>\n<li>Salt to prevent dictionary attacks with rainbow tables</li>\n<li>We would ideally like our hash function to be somewhat slow</li>\n</ol>\n<p>The reason rainbow tables are effective is that if the hash function is easy to compute, it's easy to run the hash function millions or billions of times to generate the hash functions\nYou don't want to make your users wait while you generate your hash, but want it to take 100ms to 200ms</p>\n<ul>\n<li>\n<p>Hacker can only generate 10 hashes per second</p>\n<ul>\n<li>Will take a really long time to generate a rainbow table</li>\n</ul>\n</li>\n</ul>\n<p>Even as computers get more powerful and can compute more, if we make things slow now, it'll really help prevent attacks in the future even when we have more compute power available to generate attacks faster.</p>\n<h5>bcrypt is a hash function</h5>\n<p>Has these properties (salt and ability to be slow)</p>\n<ul>\n<li>\n<p>When we run bcrypt, we can specify a cost (which is a number)</p>\n<ul>\n<li>Each increment to cost is going to significantly increase the amount of work necessary to make a hash</li>\n</ul>\n</li>\n</ul>\n<p><code class=\"language-text\">bcrypt(&quot;asdf&quot;, 10) // 1ms</code>\n<code class=\"language-text\">bcrypt(&quot;asdf&quot;, 12) // 100ms</code></p>\n<p>Cost is exponential</p>\n<ul>\n<li>bcrypt has a flexible cost parameter that you can specify.</li>\n<li>Even down the line when computers are faster, you can increment the cost and make your hash function take a good amount of time.</li>\n</ul>\n<p>In order to use bcrypt, we use bcrypt module</p>\n<p>bcrypt.hash(takes plaintext password, cost, and a callback):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bcrypt'</span><span class=\"token punctuation\">)</span>\nbcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'asdf'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> hash</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> err\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Console.log provided :</span>\n    <span class=\"token comment\">// '$2a$11$sPiHoqTQEVVmiMR2jcaBLuGuCQCX5VRLEJy0gL0LRjFflSKguGgNS'</span>\n<span class=\"token comment\">// const hash = '$2a$11$sPiHoqTQEVVmiMR2jcaBLuGuCQCX5VRLEJy0gL0LRjFflSKguGgNS'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now that we don't store plaintext password, how do we confirm the password?\nWe can ask them for their username and password\nHash given password and compare with stored hash</p>\n<p>bcrypt.compare</p>\n<ul>\n<li>Accepts plaintext password and compares with a hash</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wrong'</span><span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> isValid</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The password '</span>wrong<span class=\"token string\">' is invalid'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The password '</span>wrong<span class=\"token string\">' is invalid'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>",
      "frontmatter": {
        "date": "2018-06-13",
        "title": "Authentication Notes",
        "chapter": null,
        "subtitle": null,
        "tags": ["authentication"],
        "path": "/Authentication-Notes"
      }
    }
  },
  "pageContext": {
    "isCreatedByStatefulCreatePages": false,
    "pathSlug": "/Authentication-Notes",
    "prev": {
      "frontmatter": {
        "path": "/M101JS-MongoDB-for-NodeJS-Developers",
        "title": "M101JS:",
        "tags": ["MongoDB"],
        "subtitle": "MongoDB for Node.JS Developers",
        "chapter": null
      }
    },
    "next": {
      "frontmatter": {
        "path": "/CS9-Auth-II-Guided-Demo-I",
        "title": "CS9: Auth II",
        "tags": ["authentication", "CS9"],
        "subtitle": "Guided Demo I",
        "chapter": null
      }
    }
  }
}
