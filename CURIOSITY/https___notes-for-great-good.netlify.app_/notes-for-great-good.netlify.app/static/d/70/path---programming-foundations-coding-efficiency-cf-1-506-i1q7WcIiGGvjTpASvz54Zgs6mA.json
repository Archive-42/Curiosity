{
  "data": {
    "markdownRemark": {
      "html": "<h2>Rules of Coding Efficency:</h2>\n<ol>\n<li>First, do nothing</li>\n<li>You don't know what the problem is until you measure it</li>\n<li>Understand what's under your control</li>\n<li>Always look for the easy win</li>\n</ol>\n<h2>Notes about the course:</h2>\n<p>Will not get into specifics as it's a general course\nWill talk about lanaguage and environment differences - compiled vs interpreted - garbage collected vs manual memory management</p>\n<h1>Approaching Efficiency</h1>\n<p>Significant changes will generally come from general ideas and principles.</p>\n<h3>Misconception:</h3>\n<ol>\n<li>\n<p>Improving efficiency will be like copywriting a poorly written novel where you have to go through the code line by line and examine and change everything.</p>\n</li>\n<li>\n<p>This is rarely, if ever, necessary. Usually, only a few places in your code can make a significant improvement.</p>\n</li>\n<li>\n<p>Working on efficiency requires guru-level knowledge of language and environment.</p>\n</li>\n<li>\n<p>Huge improvements are achievable with code you could have written first few days of using the language</p>\n</li>\n<li>\n<p>Being an expert is not necessary and may be detrimental for lack of humility</p>\n</li>\n</ol>\n<h2>First, do nothing</h2>\n<ul>\n<li>Don't jump to conclusions</li>\n<li>Think about the problem</li>\n<li>NOTE: If the program is crashing on a regular basis, efficiency is not your first concern</li>\n</ul>\n<p>If working on existing code, the precondition is that the code works</p>\n<p>What about if you're writing new code?</p>\n<ul>\n<li>Choose the right data structures</li>\n<li>\n<p>First, do nothing (as far as efficiency)</p>\n<ul>\n<li>Focus should be clear, accurate, precise, readable, understandable, modular code. Writing clear code is never a waste of time.</li>\n</ul>\n</li>\n</ul>\n<p>\"Premature optimization is the root of all evil in programming\" - Knuth</p>\n<p>Begin by valuing clarity and focus of code\nProve there's an issue before fixing it</p>\n<h2>Assume you don't know what the issue is until you measure it</h2>\n<p>Trusting your gut feeling of what the issue is is a bad habit to get into</p>\n<p>UI that freezes could be a network issue, memory issue, threading issue, etc.</p>\n<h3>Efficiency Areas</h3>\n<p>Memory</p>\n<ul>\n<li>Active memory usage of application while running</li>\n<li>Efficiency is not always to use as little memory as possible</li>\n</ul>\n<p>Algorithmic</p>\n<ul>\n<li>Statements act as fast as possible</li>\n<li>Sequence of operations chosen to accomplish task</li>\n<li>How things interact with each other</li>\n<li>Multi-threading</li>\n<li>If you are leveraging language efficiency</li>\n</ul>\n<p>File/Disk I/O</p>\n<ul>\n<li>Requires external resources</li>\n<li>Minimize the number of times accessing</li>\n<li>Reduce space</li>\n</ul>\n<p>Network</p>\n<ul>\n<li>If calling from one machine to another</li>\n<li>Using cloud storage, peer resources, etc.</li>\n</ul>\n<p>All independently verifiable.\nEfficiency is a sliding scale.</p>\n<h3>Web Applications</h3>\n<p>Client side -> low control, low predictability\nWeb server -> high control, high predictability</p>\n<p>If there's a memory issue on the browser side, the only option is optimizing the Javascript code and how it works on low-specification machines</p>\n<p>If there's a memory issue on the server side, you can just add another stick of memory or another server.</p>\n<h2>Understand what's under your control</h2>\n<p>For a programmer, laziness is a virtue.</p>\n<h2>Always look for the easy win</h2>\n<p>Helps avoid pitfall of getting caught up in an area without realizing whether or not it's worth it.</p>\n<p>You're looking for something to leap out at you.\nIf you don't find an obvious bottleneck, look for things that you can remove or move.</p>\n<p>Efficiency improvements are not identical in impact.\nDon't get caught up in the technical advances, etc.</p>\n<ul>\n<li>The answer may actually seem like cheating</li>\n</ul>\n<h3>Not covered: Application Design</h3>\n<ul>\n<li>We can measure effect, but not design itself\nDesign for clarity, not efficiency</li>\n</ul>\n<h3>Not covered: Energy Efficiency</h3>\n<ul>\n<li>Rarely application design requirement</li>\n<li>More important: Device settings</li>\n</ul>\n<h3>Not covered: UI Efficiency</h3>\n<ul>\n<li>Measureable, but more about how users use the application and less about the code itself</li>\n</ul>\n<h1>Measurement</h1>\n<p>Profiling</p>\n<ul>\n<li>Not just one instance in time, but changes over time</li>\n</ul>\n<p>Stay focused: Utilities not just used for efficiency - used to monitor health of system -> aimed more at sys admin - need to filter and ignore most things</p>\n<h2>Code Analysis Options:</h2>\n<p>General builtin task monitoring applications\nSpecialized monitoring and profiling tools</p>\n<ul>\n<li>Specific focus, not always development-oriented\nDeveloper-focused profiling tools\nWeb-focused profiling tools</li>\n</ul>\n<h3>General monitoring tools</h3>\n<p>Activity Monitor / Task Manager</p>\n<ul>\n<li>\n<p>Good for quick scan</p>\n<ul>\n<li>If a program is pinging the CPU with 100% or if the app memory goes up and never down</li>\n<li>If higher memory or CPU -> might worth looking into</li>\n</ul>\n</li>\n</ul>\n<p><code class=\"language-text\">top</code> -> all processes\n<code class=\"language-text\">ps {PID}</code> -> process status\n<code class=\"language-text\">lsof -p {PID}</code> -> list open files\n<code class=\"language-text\">sudo fs_usage {PID}</code> -> file system usage\n<code class=\"language-text\">heap {PID or name of application}</code></p>\n<ul>\n<li>lists objects that have been allocated by the application and the amount of objects - look for if there are significantly higher numbers of objects in categories than you think necessary\n<code class=\"language-text\">leaks {PID}</code></li>\n<li>attempts to find leaks in memory -> unaccessable</li>\n<li>allocated memory without valid pointers\n<code class=\"language-text\">sudo sysdiagnose {PID}</code> -> could be run without PID for system diagnostic</li>\n<li>creates a temporary folder\n<code class=\"language-text\">dtrace</code> -> dynamic tracing</li>\n<li>comprehensive performance analysis</li>\n</ul>\n<h3>Developer Tools</h3>\n<h4>Java Environment</h4>\n<ul>\n<li>UVM Monitor (profiler for Eclipse)</li>\n<li>Visual VM\nFor Android Development</li>\n<li>ADT includes Traceview and Systrace tools</li>\n</ul>\n<h4>Mac/iOS</h4>\n<ul>\n<li>Instruments is a graphical frontend for dtrace</li>\n</ul>\n<h4>Visual Studio - Profiling Tools</h4>\n<ul>\n<li>included in VS 2012 Professional, Premium, etc.</li>\n</ul>\n<h4>Other options (non-IDE)</h4>\n<p>Profiling more related to language than editor\nPython -> cProfile\nRuby -> rProfile, ruby-prof</p>\n<h3>Web Applications</h3>\n<ul>\n<li>What's going on in the server?</li>\n<li>What language?</li>\n<li>Prewritten software? CMS? (Drupal, Joomla, WordPress, SharePoint)</li>\n<li>Database?</li>\n<li>Hardware -> shared? dedicated? VPS? Cloud?</li>\n</ul>\n<p>Use Developer Tools to check web application</p>\n<h1>Memory</h1>\n<h2>Memory Efficiency - Core Concepts</h2>\n<p>Physical memory: RAM/primary memory</p>\n<ul>\n<li>A chunk is used by operating system. What's left is accessible to the rest of the applications</li>\n</ul>\n<p>If you run out of physical memory iand application requests more:</p>\n<ul>\n<li>Application A requests more memory.</li>\n<li>\n<p>Operating system is out of physical memory</p>\n<ul>\n<li>Takes memory from another application, copies chunk of data to hardware (swap file/paging file)</li>\n<li>Releases physical memory from Application C so Application A can use it</li>\n</ul>\n</li>\n<li>\n<p>If Application C then needs mmemory back:</p>\n<ul>\n<li>Operating system needs to take from another application</li>\n<li>After memory freed from another application, need to get data from where it was stored in the harddrive from when Application A took memory and save it to the newly freed memory</li>\n</ul>\n</li>\n</ul>\n<p>When you need to take physical memory and write to disk -> paging out\nWhen bringing back in from disk -> paging in</p>\n<p>Working with RAM is significantly faster\nSwapping adds up and can contribute to latency</p>\n<h4>iOS - Swapping doesn't happen</h4>\n<p>If running low on physical memory, iOS will ask application to free up memory</p>\n<ul>\n<li>If it doesn't, application will be ended</li>\n</ul>\n<h2>Memory Footprint</h2>\n<p>Memory elements:</p>\n<ul>\n<li>Application code</li>\n<li>Images/media (loaded assets)</li>\n<li>Our allocated objects &#x3C;- part you can change the most</li>\n<li>Runtime engine</li>\n</ul>\n<h3>Improving Memory Efficiency (after profiling)</h3>\n<p>Reasons for memory growth:</p>\n<ul>\n<li>Memory leaks (adding new objects, never removing effectively)</li>\n<li>Genuine need for objects</li>\n<li>\n<p>Fake growth (temporary objects stay alive)</p>\n<ul>\n<li>Not a leak, bad programming</li>\n</ul>\n</li>\n</ul>\n<p>If using garbage-collected language, could get false positive because it takes a while for garbage-collection to take place</p>\n<h4>Look for:</h4>\n<p>Instantiation inside loops</p>\n<ul>\n<li>Any object made inside a loop</li>\n<li>Do we pass them to another function?</li>\n<li>When does this get considered unreachable and deleteable?</li>\n</ul>\n<p>Objects with large object graphs</p>\n<ul>\n<li>Objects instantiate other objects</li>\n<li>Hidden depths\nUser interface objects (new Window()), etc.</li>\n</ul>\n<p>Recommended: Lazy instantiation\nAny time you can put it off, do so.\nExample:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token comment\">// Normal instantiation:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Image</span> photo<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        name <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        photo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~/path/to/employee/names\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"name\"</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Image</span> <span class=\"token function\">getPhoto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> photo<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Lazy Instantiation:</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Image</span> photo<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        name <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Image</span> <span class=\"token function\">getPhoto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>photo <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            photo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~/path/to/employee\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> photo<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Memory Management Pro / Con</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Manual                      Automatic (GC)\n--------------------------------------------\nCon: Harder to write        Pro: Easier to write\nCon: Risk of memory bugs    Pro: Less memory bugs\nPro: Usually faster         Con: Slower\nPro: Deterministic          Con: Non-deterministic</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Garbage collector needs to be part of the process\nMisconception: \"It takes care of everything!\"</p>\n<ul>\n<li>It scans for reachable objects</li>\n<li>If you write objects that never go out of scope, don't get garbage collected</li>\n</ul>\n<h3>Objective-C</h3>\n<p>Reference counter -> incremented based on number of objects needed\nARC (automatic reference counting)\n\"As if the compiler writes the manual memory management code you would write if you were really good at writing it\"</p>\n<ul>\n<li>Unlike GC, done at compile time, not runtime</li>\n<li>Don't need garbage collector</li>\n<li>Unlike GC, deterministic</li>\n<li>Like GC, based on detecting \"reachability\"</li>\n</ul>\n<h3>Overhead and Warmup Costs</h3>\n<ul>\n<li>Expect some</li>\n<li>The more the environment does, the more overhead you should expect</li>\n<li>Objects don't just take up their own space, take additional space</li>\n</ul>\n<h3>When profiling, check build type</h3>\n<p>Performance profiling? Use a release build\nMemory profiling? Use debug build\nSome have default build settings</p>\n<h3>Testing Memory</h3>\n<p>Test large data sets\nTest with constrained devices\nIf you have a \"first-run\" or install process, test it</p>\n<p>Exceptions: Not always using the least amount of memory</p>\n<h1>Algorithmic Efficiency</h1>\n<p>\"Could these statements have been written to accomplish the same result, but do it faster?\"</p>\n<p>Instruments -> Time Profiler</p>\n<ul>\n<li>Look at spikes for efficiency improvements</li>\n</ul>\n<p>Be aware of multi-core differences</p>\n<ul>\n<li>If in debug, don't profile CPU -> will add more because of debug functionality</li>\n</ul>\n<p>A lot of times, you'll do print debugging for debugging -> can add getTime() in prints to see time between statements</p>\n<ul>\n<li>Better way to tell the time it's taking is to call getTime(), make a loop where you call the function a number of times, and call getTime() again</li>\n</ul>\n<h3>Tracing and Profiling in JavaScript</h3>\n<p>Basic logging:\nconsole.log console.warn\nconsole.debug console.error\nconsole.info</p>\n<p>Simple time measurement:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myTimer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">complexFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myTimer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>JS Profiling:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">profile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">complexFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">profileEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Tracking and Performance Counters in .NET</h3>\n<p>Writing console messages</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Console.writeLine(&quot;...&quot;); // can keep in code and will get taken out of production</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Using debug class:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Debug.WriteLine(&quot;...&quot;); // can keep in code and will get taken out of production</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Using Trace class:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Trace.WriteLine(&quot;...&quot;); // stays in production code -&gt; can be saved to log files</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Performance Monitor\nPerformance Counter</p>\n<h1>Big O Notation</h1>\n<p>Testing a function - Two Approaches</p>\n<ol>\n<li>Multiple small tests</li>\n<li>One large test</li>\n</ol>\n<h3>Example 1 - Constant Time - O(1)</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">bool isLastNumberEven (array unsortedArray) {\n    int length = unsortedArray.length;\n    if (unsortedArray[length] % 2 == 0) {\n        return true;\n    }\n    return false;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Example 2 - Linear Time - O(n)</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">int CountAllEvenNumbers(array unsorted Array) {\n    int evenNumberCount = 0;\n    for (int i = 0; i &lt; unsortedArray.length; i++) {\n        if (unsortedArray[i] % 2 == 0) evenNumberCount++;\n    }\n    return evenNumberCount;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Example 3 - Quadratic Time - O(n^2)</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">bool findDuplicates (array unsortedArray) {\n    for each integer A in unsortedArray {\n        for each integer B in unsortedArray {\n            if (A.index == B.index) continue;\n            if (A == B) return true;\n        }\n    }\n    return false;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Usually want to avoid quadratic time</p>\n<ul>\n<li>Okay for small amounts of data</li>\n<li>Bad for large input</li>\n</ul>\n<h3>O(n log n)</h3>\n<p>Used by better sorting algorithms</p>\n<h3>O(n!) - n factorial</h3>\n<p>Traveling Salesman (brute force)</p>\n<h3>What to look for in code</h3>\n<ul>\n<li>\n<p>Iterations -> potential for improvement is high</p>\n<ul>\n<li>nested declarations</li>\n<li>instantiation inside iterations</li>\n</ul>\n</li>\n<li>\n<p>Collections -></p>\n<ul>\n<li>arrays:\nIndexing is O(1)\nSearch is O(1)\nSort (we hope) is O(n log n)\nImmutable arrays are generally faster - less overhead\nConsider creating immutable array from mutable once loaded</li>\n<li>in some languages, for ... in is faster than a regular for loop</li>\n</ul>\n</li>\n</ul>\n<h3>Collections Questions</h3>\n<ul>\n<li>Do you need to search? How often?</li>\n<li>Do you need to sort? Should it always be sorted?</li>\n<li>Do you need to enumerate the entire collection?</li>\n<li>Does it change size?</li>\n<li>Do you need to pull/push items in or out?</li>\n</ul>\n<h3>Strings</h3>\n<ul>\n<li>Generally immutable in languages, so any change is creating a new string</li>\n<li>Loop-based string concatenations -> try to use stringBuffer, stringBuilder, etc.</li>\n<li>Be careful about wildcard use, etc.</li>\n<li>More you can minimize the amount of data a function works with, do so.</li>\n</ul>\n<h2>Summary:</h2>\n<p>Always profile\nResearch collection types\nThink about what the statements need to do\nConcentrate effort on iterated code\nBeware large strings\nRealize some things just take time</p>\n<h1>Using Disk-Based Resources</h1>\n<p>(HD, SSD, External Storage)</p>\n<h3>Minimize disk reads and writes</h3>\n<ul>\n<li>Disks are slow -> if we can keep in RAM, we should</li>\n</ul>\n<h3>Speed Comparisons</h3>\n<p>Main memory reference: 100ns\nRead: 1 MB 20,000ns - 100,000ns\nDrive seek: 4,000,000ns - 10,000,000ns\nDrive read: 1 MB 2,000,000ns - 20,000,000ns\nThere are warm up costs for using the disk</p>\n<h3>Pragmatic Approach to Disk I/O</h3>\n<p><code class=\"language-text\">fs_usage</code> -> Instruments - try to find bottlenecks</p>\n<ul>\n<li>\n<p>Only read in a file if you need it</p>\n<ul>\n<li>could add latency but will improve startup</li>\n</ul>\n</li>\n<li>Reads are easier than writes -> don't expect symmetrical performance on both</li>\n<li>\n<p>Group small reads/writes</p>\n<ul>\n<li>Read and write larger, sequenctial blocks where possible</li>\n</ul>\n</li>\n<li>Don't mistake I/O for parsing issues</li>\n</ul>\n<h2>Netowrk Efficiency</h2>\n<p>Minimize network latency\n1 - Client request to server\n2 - Server processing\n3 - Server response to client</p>\n<p>1 + 2 + 3 = latency (delay)</p>\n<p>In Network tab of Developer Tools:\nTime to first byte (latency)\nTime to get whole resource (timeline)</p>\n<p>Distance affects latency</p>\n<ul>\n<li>Less to do with phnysical distance, more to do with number of hops</li>\n</ul>\n<h3>Network Efficiency Techniques</h3>\n<ul>\n<li>\n<p>It's not always a network issue</p>\n<ul>\n<li>Server could have a long processing time</li>\n</ul>\n</li>\n<li>\n<p>Chunky, not chatty</p>\n<ul>\n<li>Fetch data in chunks</li>\n</ul>\n</li>\n<li>\n<p>Move assets closer</p>\n<ul>\n<li>Use a CDN (CDNs duplicate your assets across multiple locations and serve closest)</li>\n</ul>\n</li>\n<li>\n<p>Compress your information</p>\n<ul>\n<li>substantially reduces the amount of network traffic</li>\n<li>benefit to most websites\nHTTP compression built-in option on most web servers\nMost browsers include HTML, CSS, and JS decompression</li>\n</ul>\n</li>\n</ul>\n<h3>What about DB Efficiency?</h3>\n<p>Specialized area</p>\n<ul>\n<li>\n<p>Begins with normalization</p>\n<ul>\n<li>Design first for clarity</li>\n<li>Optimize (denormalize) for performance</li>\n</ul>\n</li>\n<li>Measure with query and index analysis tools</li>\n<li>A database <em>is</em> a disk-based resource</li>\n<li>\n<p>Consider each statement</p>\n<ul>\n<li>What it requires from database</li>\n</ul>\n</li>\n</ul>\n<h2>Next Steps</h2>\n<p>Web application => server side</p>\n<ul>\n<li>Caching</li>\n<li>Find platform best practices</li>\n</ul>\n<p>Client-side</p>\n<ul>\n<li><a href=\"http://yslow.org/\">ySlow</a> and <a href=\"https://developers.google.com/speed/pagespeed/module/\">PageSpeed</a></li>\n</ul>\n<p>Mobile Applications</p>\n<ul>\n<li>Learn your language collection types</li>\n<li>Learn the profiler</li>\n</ul>\n<p>Desktop Applications:</p>\n<ul>\n<li>\n<p>Work on improving startup time</p>\n<ul>\n<li>Perceptual boost from getting to main task quickly</li>\n</ul>\n</li>\n<li>\n<p>Better use of multithreading for UI</p>\n<ul>\n<li>Even minor blocking of the main UI make the app feal \"slow\"</li>\n</ul>\n</li>\n</ul>\n<h2>Rules of Code Efficiency:</h2>\n<p>First, do nothing\nYou don't know what the problem is until you measure it\nUnderstand what's under your control\nAlways look for the easy win</p>",
      "frontmatter": {
        "date": "2018-11-20",
        "title": "Programming Foundations:",
        "chapter": null,
        "subtitle": "Coding Efficiency",
        "tags": ["foundations", "efficiency"],
        "path": "/Programming-Foundations--Coding-Efficiency"
      }
    }
  },
  "pageContext": {
    "isCreatedByStatefulCreatePages": false,
    "pathSlug": "/Programming-Foundations--Coding-Efficiency",
    "prev": {
      "frontmatter": {
        "path": "/Computer-Architecture-Subroutines",
        "title": "Computer Architecture: Subroutines",
        "tags": ["computer architecture", "subroutines"],
        "subtitle": null,
        "chapter": null
      }
    },
    "next": {
      "frontmatter": {
        "path": "/Programming-Foundations--Algorithms",
        "title": "Programming Foundations:",
        "tags": ["foundations", "algorithms", "sorting"],
        "subtitle": "Algorithms",
        "chapter": null
      }
    }
  }
}
