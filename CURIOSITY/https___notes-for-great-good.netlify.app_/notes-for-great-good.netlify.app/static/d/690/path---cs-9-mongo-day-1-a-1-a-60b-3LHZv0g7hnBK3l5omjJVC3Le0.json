{
  "data": {
    "markdownRemark": {
      "html": "<h3>Mongod:</h3>\n<p>mongod is a database server</p>\n<h3>Database</h3>\n<p>A databases is a collection of data organized in a way that is easy to get information</p>\n<h3>Query</h3>\n<p>A query is asking questions about data or executing comamnds to operate on the stored data</p>\n<h3>DBMS (Database Management System):</h3>\n<p>Software that provides a way to store/retrieve data\nIn charge of creating databases (can have more than one database in it)\nNormally run as a server\nHandles memory, security, etc.</p>\n<p>In any software you build, there are multiple moving parts.</p>\n<p>Client (front-end) &#x3C;-> API (back-end) &#x3C;-> DB server (for persistent data storage)</p>\n<p><strong>NoSQL (Not Only SQL):</strong> a type of database</p>\n<ul>\n<li>key-value pairs</li>\n<li>graph databases (tree-like structures)</li>\n<li>document &#x3C;- MongoDB is one of the vendors</li>\n</ul>\n<p>Document databases store information as a document.</p>\n<h3>Mongo Server</h3>\n<ul>\n<li>Databases (example, Lambda)</li>\n<li>Collections (the group of users)</li>\n<li>Documents (individual users) ({_id: dfafddafdafd, username: user5})\n-Fields (_id, username)</li>\n</ul>\n<h3>Data modeling:</h3>\n<p>How data is going to be stored</p>\n<ul>\n<li>Abstract only information you need to make the system work\nExample:</li>\n<li>Mechanic needs specific parts of an automobile, but a dealer would need color, make, model, etc.</li>\n<li>Both still need information for a vehicle</li>\n<li>It's important to know what's needed by the user</li>\n</ul>\n<h2>MongoDB:</h2>\n<h4>Pros:</h4>\n<ul>\n<li>popular (has a lot of support)</li>\n<li>mature (over 10 years old, has a lot of bugs worked out)</li>\n<li>JavaScript from beginning to end (no context-switching)</li>\n<li>Dynamic schemas (shape of data: properties and data types)</li>\n</ul>\n<h3>Cons:</h3>\n<ul>\n<li>Dynamic schemas</li>\n<li>if you change the name of a field in the database, you have to deal with both naming schamas, which can be difficult</li>\n<li>No joins</li>\n</ul>\n<p><strong>Student question: Is Mongo safer to store data?</strong>\nSQL: Structured Query Language</p>\n<p>SQL-injection:\nVulnerability to the access of data\nSome systems that access SQL use strings and are vulnerable to attacks</p>\n<p><strong>Answer:</strong></p>\n<ul>\n<li>SQL-injection vulnerability is an application design flaw, not a SQL design flaw.</li>\n</ul>\n<h3>DBAAS (Database as a Service):</h3>\n<ul>\n<li>\n<p>MongoDB</p>\n</li>\n<li>\n<p>mLab (used to be Mongo Lab)\nAdvantage:</p>\n</li>\n<li>\n<p>Don't download local instance, you connect to their service and they store your data. Offers 500mb tier for free</p>\n<p>127.0.0.1 - IP address to local host</p>\n</li>\n</ul>\n<p>If there are no documents in a database, the database does not show up in show dbs</p>\n<ul>\n<li>Unless it's one of the defaults (admin, local, config)</li>\n</ul>\n<p><strong>REPL</strong> - read evaluate print loop</p>\n<p>Response you get from insert (nInserted) is the number of things inserted</p>\n<p><strong>Every document inserted into a collection wil be given an ID unless one is provided.</strong></p>\n<ul>\n<li>You generally don't want to provide an ID because the ones that are generated by the system are unique</li>\n<li>They use a safe algorithm to generate unique ID</li>\n</ul>\n<p><strong>Client &#x3C;-JSON-> [API (driver)] &#x3C;-BSON-> [DB-Server]</strong>\nThe driver translates the language of the client to something the database understands</p>\n<h3>Mongoose</h3>\n<ul>\n<li>Wraps native MongoDB driver</li>\n<li>You can still use MongoDB driver, but it is more verbose</li>\n<li>Schemas (can set rules that will help Mongoose validate before things are added to the database).</li>\n<li>Middleware with Mongoose can extend functionality (4 types)\nvalidation</li>\n<li>models</li>\n</ul>\n<h3>Workflow</h3>\n<ul>\n<li>connect API to Mongo</li>\n<li>define schema</li>\n<li>compile schema into a model</li>\n<li>A mongoose model</li>\n<li>Create a mongoose document by instantiating (calling new) on a model</li>\n<li>use mongoose document to interact with the database document</li>\n</ul>\n<h3>mongoose.connect(URL)</h3>\n<ul>\n<li>Previously we've used HTTP protocol for connections</li>\n<li>HTTP protocols are stateless</li>\n<li>MongoDB uses their own stateful protocol:</li>\n<li><code class=\"language-text\">(&#39;mongodb://server:port/databaseName&#39;)</code></li>\n<li>example: <code class=\"language-text\">mongoose.connect(&#39;mongodb://localhost/beardb&#39;)</code></li>\n</ul>\n<p>If yarn start does not work, try deleting Yarn Lock, yarn, yarn start</p>\n<p><strong>Reason you create schema: compile into model</strong>\n<code class=\"language-text\">{ species: String }</code> &#x3C;- shorthand syntax (when only one property)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">species<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n    required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>^ longer form</p>\n<h3>Schemas</h3>\n<p><code class=\"language-text\">const schemaName = mongoose.Schema(definition, options)</code>\nDefinition example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> definition <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n    required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    unique<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    latinName<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n        require<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    createdOn<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Options example:</p>\n<p><code class=\"language-text\">const options = { timestamps: true }</code> - this will create createdAt and modifiedOn fields in addition to fields specified in the schema</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> schemaName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span>definition<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> \\_\\_\\_\\_model <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ModelName'</span><span class=\"token punctuation\">,</span> schemaName<span class=\"token punctuation\">,</span> <span class=\"token string\">'collectionName'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>By default, mongoose will take the name of the model, lowercase it, pluralize it, and that will be the name of the collection in the database.\nIf you have an existing collection name that might conflict, you might want to set the third argument to a specific collection name.</p>\n<h3>Optional Syntax for Routing:</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> route<span class=\"token punctuation\">:</span> <span class=\"token string\">'/api/bears'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">post</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> bearDate <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body\n    <span class=\"token keyword\">const</span> bear <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bear</span><span class=\"token punctuation\">(</span>bearData<span class=\"token punctuation\">)</span>\n    bear\n        <span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bear</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>bear<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>",
      "frontmatter": {
        "date": "2018-06-07",
        "title": "CS9 Mongo Day 1",
        "chapter": null,
        "subtitle": null,
        "tags": ["MongoDB", "CS9"],
        "path": "/CS9-Mongo-Day-1"
      }
    }
  },
  "pageContext": {
    "isCreatedByStatefulCreatePages": false,
    "pathSlug": "/CS9-Mongo-Day-1",
    "prev": null,
    "next": {
      "frontmatter": {
        "path": "/CS9-Mongo-Day-2",
        "title": "CS9 Mongo Day 2",
        "tags": ["MongoDB", "CS9"],
        "subtitle": null,
        "chapter": null
      }
    }
  }
}
