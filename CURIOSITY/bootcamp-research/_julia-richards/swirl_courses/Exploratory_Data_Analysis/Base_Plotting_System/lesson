- Class: meta
  Course: Exploratory_Data_Analysis
  Lesson: Base_Plotting_System
  Author: Swirl Coders
  Type: Standard
  Organization: Johns Hopkins Bloomberg School of Public Health
  Version: 2.2.0

- Class: text
  Output: "Base_Plotting_System. (Slides for this and other Data Science courses may be found at github https://github.com/DataScienceSpecialization/courses/. If you care to use them, they must be downloaded as a zip file and viewed locally. This lesson corresponds to 04_ExploratoryAnalysis/PlottingBase.)"

- Class: text
  Output:  In another lesson, we gave you an overview of the three plotting systems in R. In this lesson we'll focus on the base plotting system and talk more about how you can exploit all its many parameters to get the plot you want.  We'll focus on using the base plotting system to create graphics on the screen device rather than another graphics device.

- Class: text
  Output:  The core plotting and graphics engine in R is encapsulated in two packages. The first is the graphics package which contains plotting functions for the "base" system. The functions in this package include plot, hist, boxplot, barplot, etc. The second package is grDevices which  contains all the code implementing the various graphics devices, including X11, PDF, PostScript, PNG, etc.

- Class: text
  Output: Base graphics are often constructed piecemeal, with each aspect of the plot handled separately through a particular function call. Usually you start with a plot function (such as plot, hist, or boxplot), then you use annotation functions (text, abline, points) to add to or modify your plot. 

- Class: text
  Output: Before making a plot you have to determine where the plot will appear and what it will be used for.  Is there a large amount of data going into the plot? Or is it just a few points? Do you need to be able to dynamically resize the graphic?

- Class: mult_question
  Output: What do you think is a disadvantage of the Base Plotting System?
  AnswerChoices:  It's intuitive and exploratory; It mirrors how we think of building plots and analyzing data; You can't go back once a plot has started; A complicated plot is a series of simple R commands
  CorrectAnswer: You can't go back once a plot has started
  AnswerTests: omnitest(correctVal='You can\'t go back once a plot has started')
  Hint: Which choice  has a negative contraction in it?

- Class: text
  Output: Yes! The base system is very intuitive and easy to use. You can't go backwards, though, say, if you need to readjust margins or have misspelled a caption. A finished plot will be a series of R commands, so it's difficult to translate a finished plot into a different system.

- Class: text
  Output:  Calling a basic routine such as plot(x, y) or hist(x)  launches a graphics device (if one is not already open) and draws a new plot on the device. If the arguments to plot or hist are not of some special class, then the default method  is called.

- Class: text
  Output: As you'll see, most of the base plotting functions have many arguments, for example, setting the title, labels of axes, plot character, etc. Some of the parameters can be set when you call the function or they can be added later in a separate function call.



- Class: text
  Output: Now we'll go through some quick examples of basic plotting before we delve into gory  details. We'll use the dataset airquality (part of the library datasets) which we've loaded for you. This shows ozone and other air measurements for New York City for 5 months in 1973.

- Class: cmd_question
  Output:  Use the R command head with airquality as an argument to see what the data looks like.
  CorrectAnswer: head(airquality)
  AnswerTests: omnitest(correctExpr='head(airquality)')
  Hint: Type head(airquality) at the command prompt.
 
- Class: cmd_question
  Output: We see the dataset contains 6 columns of data. Run the command range with two arguments. The first is the ozone column of airquality, specified by airquality$Ozone, and the second is the boolean na.rm set equal to TRUE. If you don't specify this second argument, you won't get a meaningful result.
  CorrectAnswer: range(airquality$Ozone,na.rm=TRUE)
  AnswerTests: omnitest(correctExpr='range(airquality$Ozone,na.rm=TRUE)')
  Hint: Type range(airquality$Ozone,na.rm=TRUE) at the command prompt.
 
- Class: cmd_question
  Output: So the measurements range from 1 to 168. First we'll do a simple histogram of this ozone column to show the distribution of measurements. Use the R command hist with the argument airquality$Ozone.   
  CorrectAnswer: hist(airquality$Ozone)
  AnswerTests: omnitest(correctExpr='hist(airquality$Ozone)')
  Hint: Type hist(airquality$Ozone) at the command prompt.
 
- Class: mult_question
  Output: Simple, right? R put a title on the histogram and labeled both axes for you. What is the most frequent count? 
  AnswerChoices: Under 25; Between 60 and 75; Over 150; Over 100 
  CorrectAnswer: Under 25
  AnswerTests: omnitest(correctVal='Under 25')
  Hint: Where is the highest bar?

- Class: cmd_question
  Output: Next we'll do a boxplot. First, though, run the R command table with the argument airquality$Month.
  CorrectAnswer: table(airquality$Month)
  AnswerTests: omnitest(correctExpr='table(airquality$Month)')
  Hint: Type table(airquality$Month) at the command prompt.
 
- Class: cmd_question
  Output: We see that the data covers 5 months, May through September. We'll want a boxplot of ozone as a function of the month in which the measurements were taken so we'll use the R formula Ozone~Month as the first argument of boxplot. Our second argument will be airquality, the dataset from which the variables of the first argument are taken.  Try this now.
  CorrectAnswer: boxplot(Ozone~Month, airquality)
  AnswerTests: omnitest(correctExpr='boxplot(Ozone~Month, airquality)')
  Hint: Type boxplot(Ozone~Month, airquality) at the command prompt.
 
- Class: text
  Output:  Note that boxplot, unlike hist, did NOT specify a title and axis labels for you automatically.

- Class: cmd_question
  Output:  Let's call boxplot again to specify labels. (Use the up arrow to recover the previous command and save yourself some typing.) We'll add more arguments to the call to specify labels for the 2 axes. Set xlab equal to "Month" and ylab equal to "Ozone (ppb)". Specify col.axis equal to "blue" and col.lab equal to "red". Try this now.
  CorrectAnswer: boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
  AnswerTests: omnitest(correctExpr='boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")')
  Hint: Type boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red") at the command prompt.

- Class: cmd_question
  Output: Nice colors, but still no title. Let's add one with the R command title. Use the argument main set equal to the string "Ozone and Wind in New York City". 
  CorrectAnswer: title(main="Ozone and Wind in New York City")
  AnswerTests: omnitest(correctExpr='title(main=\"Ozone and Wind in New York City\")')
  Hint: Type title(main="Ozone and Wind in New York City") at the command prompt.

- Class: cmd_question
  Output: Now we'll show you how to plot a simple two-dimensional scatterplot using the R function plot. We'll show the relationship between Wind (x-axis) and Ozone (y-axis). We'll use the function plot with those two arguments (Wind and Ozone, in that order). To save some typing, though, we'll call the R command with using 2 arguments. The first argument of with will be airquality, the dataset containing Wind and Ozone; the second argument  will be the call to plot. Doing this allows us to avoid using the longer notation, e.g., airquality$Wind. Try this now. 
  CorrectAnswer: with(airquality, plot(Wind, Ozone))
  AnswerTests: omnitest(correctExpr='with(airquality, plot(Wind, Ozone))')
  Hint: Type with(airquality, plot(Wind, Ozone)) at the command prompt.
 
- Class: text
  Output:  Note that plot generated labels for the x and y axes but no title. 

- Class: cmd_question
  Output: Add one now with the R command title. Use the argument main set equal to the string "Ozone and Wind in New York City". (You can use the up arrow to recover the command if you don't want to type it.)
  CorrectAnswer: title(main="Ozone and Wind in New York City")
  AnswerTests: omnitest(correctExpr='title(main=\"Ozone and Wind in New York City\")')
  Hint: Type title(main="Ozone and Wind in New York City") at the command prompt.

- Class: cmd_question
  Output:  The basic plotting parameters are documented in the R help page for the function par. You can use par to set parameters OR to find out what values are already set. To see just how much flexibility you have, run the R command length with the argument par() now. 
  CorrectAnswer: length(par())
  AnswerTests: omnitest(correctExpr='length(par())')
  Hint: Type length(par()) at the command prompt.
 
- Class: cmd_question
  Output:  So there are a boatload (72) of parameters that par() gives you access to. Run the R function names with par() as its argument to see what these parameters are.
  CorrectAnswer: names(par())
  AnswerTests: omnitest(correctExpr='names(par())')
  Hint: Type names(par()) at the command prompt.
 
- Class: cmd_question
  Output: Variety is the spice of life. You might recognize some of these such as col and lwd from previous swirl lessons. You can always run ?par to see what they do. For now, run the command par()$pin and see what you get.
  CorrectAnswer: par()$pin
  AnswerTests: ANY_of_exprs('par()$pin','par(\"pin\")','par(\'pin\')')
  Hint: Type par()$pin at the command prompt.
 
- Class: mult_question
  Output: Alternatively, you could have gotten the same result by running par("pin") or par('pin')).  What do you think these two numbers represent?
  AnswerChoices: Plot dimensions in inches; A confidence interval; Random numbers; Coordinates of the center of the plot window
  CorrectAnswer: Plot dimensions in inches
  AnswerTests: omnitest(correctVal='Plot dimensions in inches')
  Hint: The function par specifies graphical parameters so the answer should deal with plots. That leaves two choices. The 'in' in 'pin' specifies inches.

- Class: cmd_question
  Output: Now, run the command par("fg") or or par('fg') or par()$fg and see what you get.
  CorrectAnswer: par()$fg
  AnswerTests: ANY_of_exprs('par(\"fg\")','par()$fg','par(\'fg\')')
  Hint: Type par()$fg OR par('fg') OR par("fg") at the command prompt.
 
- Class: mult_question
  Output: It gave you a color, right? Since par()$fg specifies foreground color, what do you think par()$bg specifies?
  AnswerChoices: Background color; Better color; blue-green; Beautiful color
  CorrectAnswer: Background color
  AnswerTests: omnitest(correctVal='Background color')
  Hint: What's the opposite of foreground?

- Class: text
  Output: Many base plotting functions share a set of parameters. We'll go through some of the more commonly used ones now. See if you can tell what they do from their names.


- Class: mult_question
  Output: What do you think the graphical parameter pch controls?
  AnswerChoices: plot character; pc help; picture characteristics; point control height
  CorrectAnswer: plot character
  AnswerTests: omnitest(correctVal='plot character')
  Hint: The p stands for plot.

- Class: cmd_question
  Output: The plot character default is the open circle, but it "can either be a single character or an integer code for one of a set of graphics symbols." Run the command par("pch") to see the integer value of the default. When you need to, you can use R's Documentation (?pch) to find what the other values mean.
  CorrectAnswer: par("pch")
  AnswerTests: ANY_of_exprs('par(\"pch\")','par()$pch','par(\'pch\')')
  Hint: Type par()$pch OR par('pch') OR par("pch") at the command prompt.
 
- Class: mult_question
  Output: So 1 is the code for the open circle. What do you think the graphical parameters lty and lwd control respectively?
  AnswerChoices: line type and width; line width and type; line length and width; line slope and intercept
  CorrectAnswer: line type and width
  AnswerTests: omnitest(correctVal='line type and width')
  Hint: The l obviously stands for line. The ty and wd should be obvious.

- Class: cmd_question
  Output: Run the command par("lty") to see the  default line type. 
  CorrectAnswer: par("lty")
  AnswerTests: ANY_of_exprs('par(\"lty\")','par()$lty','par(\'lty\')')
  Hint: Type par()$lty OR par('lty') OR par("lty") at the command prompt.

- Class: text
  Output: So the default line type  is  solid,  but it can be  dashed, dotted, etc. Once again, R's ?par documentation will tell you what other line types are available. The line width is a positive integer; the default value is 1. 

- Class: text
  Output: We've seen a lot of examples of col, the plotting color, specified as a number, string, or hex code; the colors() function gives you a vector of colors by name.

- Class: mult_question
  Output: What do you think the graphical parameters xlab and ylab control respectively?
  AnswerChoices: labels for the x- and y- axes; labels for the y- and x- axes; 
  CorrectAnswer: labels for the x- and y- axes
  AnswerTests: omnitest(correctVal='labels for the x- and y- axes')
  Hint: The lab portion stands for label.

- Class: text
  Output: The par() function is used to specify global graphics parameters that affect all plots in an R session. (Use dev.off or plot.new to reset to the defaults.) These parameters can be overridden when specified as arguments to specific plotting functions. These include las (the orientation of the axis labels on the plot), bg (background color), mar (margin size), oma (outer margin size), mfrow and mfcol (number of plots per row, column).

- Class: text
  Output: The last two, mfrow and mfcol, both deal with multiple plots in that they specify the number of plots per row and column. The difference between them is the order in which they fill the plot matrix. The call mfrow will fill the rows first while mfcol fills the columns first.


- Class: text
  Output: So to reiterate, first call a basic plotting routine. For instance,  plot makes a scatterplot or other type of plot depending on the class of the object being plotted.

- Class: mult_question
  Output: As we've seen, R provides several annotating functions. Which of the following is NOT one of them?
  AnswerChoices: lines; text; title; hist; points
  CorrectAnswer: hist
  AnswerTests: omnitest(correctVal='hist')
  Hint: If you've just done a scatterplot, would you really want to annotate it with a histogram?

- Class: text
  Output: So you can add text, title, points, and lines to an existing plot. To add lines, you give a vector of x values and a corresponding vector of y values (or a 2-column matrix); the function lines just connects the dots. The function text adds text labels to a plot using specified x, y coordinates.

- Class: text
  Output:   The function title adds annotations. These include x- and y- axis labels, title, subtitle, and outer margin. Two other annotating functions are mtext which adds arbitrary text to either the outer or inner margins of the plot and axis which adds axis ticks and labels. Another useful function is legend which explains to the reader what the symbols your plot uses mean.

- Class: cmd_question
  Output: Before we close, let's test your ability to make a somewhat complicated scatterplot. First run plot with 3 arguments. airquality$Wind, airquality$Ozone, and type set equal to "n". This tells R to set up the plot but not to put the data in it. 
  CorrectAnswer:  plot(airquality$Wind, type="n",airquality$Ozone)
  AnswerTests: omnitest(correctExpr='plot(airquality$Wind, type="n",airquality$Ozone)')
  Hint: Type plot(airquality$Wind, type="n",airquality$Ozone) at the command prompt.

- Class: cmd_question
  Output: Now for the test. (You might need to check R's documentation for some of these.) Add a title with the argument main set equal to the string "Wind and Ozone in NYC"
  CorrectAnswer:  title(main="Wind and Ozone in NYC")
  AnswerTests: omnitest(correctExpr='title(main="Wind and Ozone in NYC")')
  Hint: Type title(main="Wind and Ozone in NYC") at the command prompt.

- Class: cmd_question
  Output: Now create a variable called may by subsetting airquality appropriately. (Recall that the data specifies months by number and May is the fifth month of the year.)
  CorrectAnswer:  may <- subset(airquality, Month==5)
  AnswerTests: expr_creates_var("may"); omnitest(correctExpr='may <- subset(airquality, Month==5)')
  Hint: Type  may <- subset(airquality, Month==5) at the prompt.

- Class: cmd_question
  Output: Now use the R command points to plot May's wind and ozone (in that order) as solid blue triangles. You have to set the color and plot character with two separate arguments. Note we use points because we're adding to an existing plot.
  CorrectAnswer: points(may$Wind,may$Ozone,col="blue",pch=17)
  AnswerTests: omnitest(correctExpr='points(may$Wind,may$Ozone,col="blue",pch=17)')
  Hint: The code for solid blue trianges is 17 so typing points(may$Wind,may$Ozone,col="blue",pch=17) at the prompt should work.

- Class: cmd_question
  Output: Now create the variable notmay by subsetting airquality appropriately.
  CorrectAnswer:  notmay <- subset(airquality, Month!=5)
  AnswerTests: expr_creates_var("notmay"); omnitest(correctExpr='notmay <- subset(airquality, Month!=5)')
  Hint: Type  notmay <- subset(airquality, Month!=5) at the prompt.


- Class: cmd_question
  Output: Now use the R command points to plot these notmay's wind and ozone (in that order) as  red snowflakes.
  CorrectAnswer: points(notmay$Wind,notmay$Ozone,col="red",pch=8)
  AnswerTests: omnitest(correctExpr='points(notmay$Wind,notmay$Ozone,col="red",pch=8)')
  Hint: The code for snowflakes is 8 so typing points(notmay$Wind,notmay$Ozone,col="red",pch=8) at the prompt should work.

- Class: cmd_question
  Output: Now we'll use the R command legend to clarify the plot and explain what it means. The function  has a lot of arguments, but we'll only use 4. The first will be the string "topright" to tell R where to put the legend. The remaining 3 arguments will each be 2-long vectors created by R's concatenate  function, e.g., c(). These arguments are pch, col, and legend. The first is the vector (17,8), the second ("blue","red"), and the third ("May","Other Months"). Try it now.
  CorrectAnswer: legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
  AnswerTests: omnitest(correctExpr='legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))')
  Hint: Type legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months")).

- Class: cmd_question
  Output: Now add a vertical line at the median of airquality$Wind. Make it dashed (lty=2) with a width of 2.
  CorrectAnswer: abline(v=median(airquality$Wind),lty=2,lwd=2)
  AnswerTests: omnitest(correctExpr='abline(v=median(airquality$Wind),lty=2,lwd=2)')
  Hint: Type abline(v=median(airquality$Wind),lty=2,lwd=2).

- Class: cmd_question
  Output: Use par with the parameter mfrow set equal to the vector (1,2) to set up the plot window for two plots side by side. You won't see a result.
  CorrectAnswer: par(mfrow=c(1,2))
  AnswerTests: omnitest(correctExpr='par(mfrow=c(1,2))')
  Hint: Type par(mfrow=c(1,2)).

- Class: cmd_question
  Output: Now plot airquality$Wind and airquality$Ozone and use main to specify the title "Ozone and Wind".
  CorrectAnswer: plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
  AnswerTests: omnitest(correctExpr='plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")')
  Hint: Type plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind").

- Class: figure
  Output: Now for the second plot.
  Figure: goodPlot1.R

- Class: cmd_question
  Output: Plot airquality$Ozone and airquality$Solar.R and use main to specify the title "Ozone and Solar Radiation".
  CorrectAnswer: plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
  AnswerTests: omnitest(correctExpr='plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")')
  Hint: Type plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation").

- Class: figure
  Output: Now for something more challenging.
  Figure: goodPlot2.R

- Class: cmd_question
  Output: This one with 3 plots, to illustrate inner and outer margins. First, set up the plot window by typing  par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
  CorrectAnswer: par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
  AnswerTests: omnitest(correctExpr='par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))')
  Hint: Type par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0)).

- Class: text
  Output: Margins are specified as 4-long vectors of integers. Each number tells how many lines of text to leave at each side. The numbers are assigned clockwise starting at the bottom. The default for the inner margin is c(5.1, 4.1, 4.1, 2.1)  so you can see we reduced each of these so we'll have room for some outer text.

- Class: cmd_question
  Output: The first plot should be familiar. Plot airquality$Wind and airquality$Ozone with the title (argument main) as "Ozone and Wind".
  CorrectAnswer: plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
  AnswerTests: omnitest(correctExpr='plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")')
  Hint: Type plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind").

- Class: figure
  Output: The second plot is similar.
  Figure: goodPlot3.R

- Class: cmd_question
  Output:  Plot airquality$Solar.R and airquality$Ozone with the title (argument main) as "Ozone and Solar Radiation".
  CorrectAnswer: plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
  AnswerTests: omnitest(correctExpr='plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")')
  Hint: Type plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation").

- Class: figure
  Output: Now for the final panel.
  Figure: goodPlot4.R

- Class: cmd_question
  Output: Plot airquality$Temp and airquality$Ozone with the title (argument main) as "Ozone and Temperature".
  CorrectAnswer: plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
  AnswerTests: omnitest(correctExpr='plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")')
  Hint: Type plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature").

- Class: figure
  Output: Now we'll put in a title.
  Figure: goodPlot5.R

- Class: cmd_question
  Output: Since this is the main title, we specify it with the R command mtext. Call mtext with the string "Ozone and Weather in New York City" and the argument outer set equal to TRUE.
  CorrectAnswer:  mtext("Ozone and Weather in New York City", outer = TRUE)
  AnswerTests: omnitest(correctExpr=' mtext("Ozone and Weather in New York City", outer = TRUE)')
  Hint: Type mtext("Ozone and Weather in New York City", outer = TRUE).

- Class: figure
  Output: Voila! Beautiful, right?
  Figure: goodPlot6.R

- Class: text
  Output: Congrats! You've weathered this lesson nicely and passed out of the No!zone.

- Class: mult_question
  Output: "Would you like to receive credit for completing this course on
    Coursera.org?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: coursera_on_demand()
  Hint: ""

