
- Class: meta
  Course: Mathematical Biostatistics Boot Camp
  Lesson: One Sample t-test
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostatistics
  Version: 1.0.0

- Class: text
  Output: In this lesson, I'm going to walk you through a one sample t-test step-by-step
    using the 'mtcars' dataset. This dataset comes built in to R and gives a series
    of design and performance characteristics for 32 car models built in 1973-74.

- Class: text
  Output: Once you learn the one sample t-test procedure, I will have you complete
    a second t-test analysis on your own using the same dataset. If you get stuck,
    there will be hints along the way.

- Class: text
  Output: Recall that we must use a t-test instead of a z-test when we don't have
    access to a population variance (or population standard deviation) and thus must
    estimate it from the data.

- Class: cmd_question
  Output: Let's begin by taking a look at the 'mtcars' dataset. Type 'mtcars' without
    quotes and press Enter.
  CorrectAnswer: mtcars
  AnswerTests: swirl1cmd=mtcars
  Hint: Type 'mtcars' without quotes and press Enter.

- Class: text
  Output: 'We are interested in determining whether there is a significant difference  between
    the average fuel efficiency for cars in our dataset, which were built in 1973-74,
    and the average fuel efficiency for all motor vehicles in 1974. According to a
    recent report by the US Energy Information Administration, the average fuel efficiency
    for all motor vehicles in 1974 was 12.0 miles per gallon (mpg). You can view the
    report here: http://www.eia.gov/totalenergy/data/monthly/pdf/sec1_17.pdf'

- Class: text
  Output: Our null hypothesis (H0) is that the average fuel efficiency of the cars
    in our dataset is NOT significantly different from 12.0 mpg. Our alternative hypothesis
    (H1) is that the average fuel efficiency of the cars in our dataset IS significantly
    different from 12.0 mpg. In order to either accept or reject the null hypthesis,
    we must compute our t-statistic and compare it to the appropriate t critical value.

- Class: cmd_question
  Output: Since we are mainly concerned with the 'mpg' variable, let's extract the
    entire 'mpg' column from the dataset and store it in a new variable called 'allMPG'.
    Do this now by typing 'allMPG <- mtcars$mpg' and pressing Enter.
  CorrectAnswer: allMPG <- mtcars$mpg
  AnswerTests: swirl1cmd=allMPG <- mtcars$mpg
  Hint: Type 'allMPG <- mtcars$mpg' without quotes and press Enter.

- Class: text
  Output: If you are new to R, the '<-' is called an assignment operator and is just
    a 'less than' sign followed by a dash, with no space in between. It is customary
    that you include a space before and after the assignment operator. You can think
    of the assignment operator as an 'equals' sign since it just assigns the value
    on its right to the variable on its left.

- Class: text
  Output: Also, the '$' in between 'mtcars' and 'mpg' says that we want to access
    the 'mpg' column from the 'mtcars' dataset. By storing our 'mpg' data in the 'allMPG'
    variable, we can now avoid using this '$' notation repeatedly.

- Class: cmd_question
  Output: Let's take a look at what's stored in 'allMPG'. Typing a variable's name
    and pressing Enter will print its contents to the console.
  CorrectAnswer: allMPG
  AnswerTests: swirl1cmd=allMPG
  Hint: Type 'allMPG' and press Enter.

- Class: text
  Output: 'Recall that computing a t-statistic requires 4 important values: sample
    mean, assumed population mean, variance, and sample size.'

- Class: cmd_question
  Output: Our first step is to compute the mean value for the 'mpg' data, which is
    conveniently stored in our newly created 'allMPG' variable. In R, the 'mean' function
    computes the mean of a variable for us. The notation is 'mean(variableName)'.
    Try it now on the 'allMPG' variable.
  CorrectAnswer: mean(allMPG)
  AnswerTests: swirl1cmd=mean(allMPG)
  Hint: Type 'mean(allMPG)' to compute the mean of the 'allMPG' variable

- Class: text
  Output: To make future calculations simpler, we should store this mean in a new
    variable, which we will call 'sampMeanMPG'. This variable name stands for 'sample
    mean of the mpg variable'. It's always good to be descriptive when choosing variable
    names, so that you don't get confused later on.

- Class: cmd_question
  Output: Using the assignment operator, assign the value 'mean(allMPG)' to the variable
    'sampMeanMPG' now.
  CorrectAnswer: sampMeanMPG <- mean(allMPG)
  AnswerTests: swirl1cmd=sampMeanMPG <- mean(allMPG)
  Hint: Type 'sampMeanMPG <- mean(allMPG)' to assign the mean of 'allMPG' to the variable
    'sampMeanMPG'.

- Class: text
  Output: The next value that we need for our t-statistic is the assumed population
    mean, which is in this case is given to be 12.0 miles per gallon by the report
    referenced earlier.

- Class: cmd_question
  Output: The next quantity that we need for computing our t-statistic is the sample
    variance. The function for computing variance in R is 'var' and is used in the
    same way as the 'mean' function. Try assigning the variance of 'allMPG' to a new
    variable called 'sampVarMPG'.
  CorrectAnswer: sampVarMPG <- var(allMPG)
  AnswerTests: swirl1cmd=sampVarMPG <- var(allMPG)
  Hint: Type 'sampVarMPG <- var(allMPG)' to assign the variance of 'allMPG' to the
    variable 'sampVarMPG'.

- Class: text
  Output: 'The last quantity needed for our t-statistic calculation is the sample
    size of our dataset, or in other words, the number of car models on which we have
    data. The easiest method of computing this is to find the number of elements contained
    in our ''allMPG'' variable. '

- Class: cmd_question
  Output: This is found using the 'length' function. The syntax is similar to the
    other functions you've already used. Compute the sample size now using the 'length'
    function and store the result to the variable 'n'.
  CorrectAnswer: n <- length(allMPG)
  AnswerTests: swirl1cmd=n <- length(allMPG)
  Hint: Type 'n <- length(allMPG)' to store the sample size to the variable 'n'.

- Class: text
  Output: Recall that a t-statistic is computed by subtracting the population mean
    from the sample mean and dividing that quantity by the square root of the sample
    variance over n. This is difficult to express in words, but very easy to compute.

- Class: cmd_question
  Output: 'Store the following quantity in a new variable called ''tStat'': ''(sampMeanMPG
    - 12.0) / sqrt(sampVarMPG/n)''.'
  CorrectAnswer: tStat <- (sampMeanMPG - 12.0) / sqrt(sampVarMPG/n)
  AnswerTests: swirl1cmd=tStat <- (sampMeanMPG - 12.0) / sqrt(sampVarMPG/n)
  Hint: Type 'tStat <- (sampMeanMPG - 12.0) / sqrt(sampVarMPG/n)' to store the value
    of our t-statistic in a new variable called 'tStat'.

- Class: text
  Output: Now that we have our t-statistic, we must compare it to our t critical value.
    In order to do this, we need to specify the t distribution corresponding to the
    correct degrees of freedom (which equals n - 1).

- Class: cmd_question
  Output: Compute the degrees of freedom by storing the value 'n - 1' in a new variable
    called 'myDF'.
  CorrectAnswer: myDF <- n - 1
  AnswerTests: swirl1cmd=myDF <- n - 1
  Hint: Type 'myDF <- n - 1'.

- Class: text
  Output: Before moving on to our final calculations, let's view the contents of the
    variables involved. Remember that typing a variable's name and pressing Enter
    will show you the contents of that variable.

- Class: cmd_question
  Output: View the contents of our t-statistic variable, 'tStat', now.
  CorrectAnswer: tStat
  AnswerTests: swirl1cmd=tStat
  Hint: Type 'tStat' and press Enter.

- Class: cmd_question
  Output: View the contents of our degrees of freedom variable, 'myDF', now.
  CorrectAnswer: myDF
  AnswerTests: swirl1cmd=myDF
  Hint: Type 'myDF' and press Enter.

- Class: text
  Output: Remember that a p-value gives us the probability of getting a t-statistic
    as or more extreme than the one we actually got from the data. Therefore, since
    we have a positive t-statistic here, we want to first find the area under the
    t-distribution curve to the right of the value of our t-statistic. Then, since
    the t-distribution is symmetrical about 0, we can multiply this value by 2 to
    get the p-value for a two-sided test.

- Class: text
  Output: Let's compute the area under the curve to the right of our t-statistic using
    R's 'pt' function. In case you're wondering, the 'p' in 'pt' stands for 'probability'
    and the 't' stands for 't-distribution'.

- Class: cmd_question
  Output: 'Type the following to compute the probability of getting a t-statistic
    that''s greater than the value of the one we got: ''pVal1 <- pt(tStat, df = myDF,
    lower.tail=FALSE)'''
  CorrectAnswer: pVal1 <- pt(tStat, df = myDF, lower.tail=FALSE)
  AnswerTests: swirl1cmd=pVal1 <- pt(tStat, df = myDF, lower.tail=FALSE)
  Hint: Type 'pVal1 <- pt(tStat, df = myDF, lower.tail=FALSE)' and press Enter.

- Class: text
  Output: To reiterate, the variable 'pVal1' now stores the probability of getting
    a t-statistic greater than or equal to the one we got. However, since we are interested
    in both extremes (i.e. a two-sided test), we must multiply this probability by
    2 to get our official p-value!

- Class: cmd_question
  Output: 'Let''s do this now. We will assign the new probability to the ''pVal''
    variable. This can be done by typing the following: ''pVal <- pVal1 * 2.'''
  CorrectAnswer: pVal <- pVal1 * 2
  AnswerTests: swirl1cmd=pVal <- pVal1 * 2
  Hint: Type 'pVal <- pVal1 * 2'

- Class: cmd_question
  Output: Let's look at the value of our p-value. Type 'pVal' and press Enter.
  CorrectAnswer: pVal
  AnswerTests: swirl1cmd=pVal
  Hint: Type 'pVal' and press Enter.

- Class: text
  Output: Since our p-value is well below 0.05 (the most commonly used significance
    level), we can safely reject our null hypothesis and conclude that there is a
    significant difference between the fuel efficiency of the cars included in our
    dataset and the assumed population average fuel efficiency stated in the EIA report.

- Class: text
  Output: The most likely explanation for this difference is that the EIA number includes
    both small and large vehicles, whereas our dataset consists of mainly smaller
    vehicles. It is a well known fact that lower vehicle weight is typically associated
    with increased fuel efficiency.

- Class: text
  Output: It took us quite a few steps to arrive at this conclusion. Fortunately,
    R has a built-in function for computing t-test p-values. The name of the function
    is 't.test' and upon specifying the data of interest, the assumed population mean,
    and whether the test is one-sided or two-sided, it will give you the desired p-value.

- Class: cmd_question
  Output: Let's try it now and see if the resulting p-value is the same as the one
    you calculated above. Type 't.test(allMPG, mu=12.0, alternative="two.sided")'.
  CorrectAnswer: t.test(allMPG, mu=12.0, alternative="two.sided")
  AnswerTests: swirl1cmd=t.test(allMPG, mu=12.0, alternative="two.sided")
  Hint: Type 't.test(allMPG, mu=12.0, alternative="two.sided")' and press Enter. Make
    sure to put double quotes around the 'alternative'.

- Class: text
  Output: Success!!! Your p-values are equal! In the future, using the 't.test' function
    will save you time and reduce your chances of making a computational error. However,
    it's important for you to understand the calculations behind the t-test procedure,
    so that you properly interpret the results.

