---
title: 2.1 The index page
listed: true
position: 4
---
{% extends 'index' %}

{% block 'content' %}

:markdown

  ## Our new home page

  Ok, let's replace our generic Bootstrap home page with the real home page for our blog. Open the `app/pages/views/index.liquid` file and delete all of its contents. Paste in the following code.

%pre
  %code
    :plain
      {% raw %}---
      title: Home
      published: true
      ---
      &lt;!DOCTYPE html&gt;
      &lt;html lang=&quot;en&quot;&gt;
        &lt;head&gt;
          &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
          &lt;meta charset=&quot;utf-8&quot;&gt;
          &lt;title&gt;
            {{ page.title }} - {{ site.name }}
            | {% if page.seo_title %}{{ page.seo_title }}{% else %}{{ site.seo_title }}{% endif %}
          &lt;/title&gt;
          &lt;meta name=&quot;description&quot; content=&quot;{% if page.meta_description %}{{ page.meta_description }}{% else %}{{ site.meta_description }}{% endif %}&quot;&gt;
          &lt;meta name=&quot;keywords&quot; content=&quot;{{ site.meta_keywords }} {{ page.meta_keywords }}&quot;&gt;

          &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt;
          {{ &#39;bootstrap.css&#39; | stylesheet_tag }}
          &lt;!--[if lt IE 9]&gt;
            &lt;script src=&quot;//html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
          &lt;![endif]--&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;div class=&quot;container&quot;&gt;

            &lt;!-- Site Title --&gt;
            &lt;div class=&quot;row&quot;&gt;
              &lt;div class=&quot;col-md-10 col-md-offset-1 col-sm-12&quot;&gt;
                &lt;h1&gt;{{ site.name }}&lt;/h1&gt;
              &lt;/div&gt;
            &lt;/div&gt;

            &lt;!-- Site Navigation --&gt;
            &lt;div class=&quot;row&quot;&gt;
              &lt;div class=&quot;col-md-10 col-md-offset-1 col-sm-12&quot;&gt;
                &lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;
                  &lt;!-- Brand and toggle get grouped for better mobile display --&gt;
                  &lt;div class=&quot;navbar-header&quot;&gt;
                    &lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot;&gt;
                      &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;
                      &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
                      &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
                      &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
                    &lt;/button&gt;
                  &lt;/div&gt;
                  &lt;!-- Collect the nav links, forms, and other content for toggling --&gt;
                  &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&gt;
                    &lt;ul class=&quot;nav navbar-nav&quot;&gt;
                      &lt;li {% if page.slug == &quot;index&quot; %}class=&quot;active&quot;{% endif %}&gt;
                        &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/div&gt;
                &lt;/nav&gt;
              &lt;/div&gt;
            &lt;/div&gt;

            &lt;!-- Page Content --&gt;
            &lt;div class=&quot;row&quot;&gt;
              &lt;div class=&quot;col-md-10 col-md-offset-1 col-sm-12&quot;&gt;
                &lt;h2&gt;{{ page.title }}&lt;/h2&gt;
                Coming Soon.
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;

          &lt;!-- Javascripts --&gt;
          &lt;script type=&#39;text/javascript&#39; src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;&gt;&lt;/script&gt;
          {{ &#39;bootstrap.min.js&#39; | javascript_tag }}
        &lt;/body&gt;
      &lt;/html&gt;{% endraw %}

:markdown
  We're going to go through this page line by line, but for now let's see what this looks like. Open a command line and navigate to the project directory. Let's turn on Wagon's web server again by running `bundle exec wagon serve`. Leave the server running and open [http://0.0.0.0:3333](http://0.0.0.0:3333) in your browser. You should see a page like the one below.

  <img src="{{ 'guides/making-blog/2.1/new_home_page.jpg' | theme_image_url }}" alt="Our new home page" />

  ## The YAML header
  Back in your text editor, let's walk through this file. The first thing you will notice is the YAML header at the top of the file.

      ---
      title: Home
      published: true
      ---
  The YAML header is surrounded by a pair of triple dashes and contains YAML that sets various properties for the page. This page sets just two options: `title` and `published`. As you can probably guess, `title` sets the page's title and `published` is a boolean flag that determines whether this page should be publicly accessible by anyone, or if the page is still under review and should only be accessible to site editors.

  Aside from the two properties above, there are around a dozen other properties that can be specified, but we'll come back to these later.

  ## Output markup and droplets
  After some boilerplate HTML, the next interesting part comes in the `title` tag, where we see our first piece of [Liquid Markup](http://liquidmarkup.org/). Liquid Markup, originally created by the good folks at [Shopify](http://www.shopify.com), is one of Ruby's most popular templating languages.

  We first encounter Liquid's _output markup_, which is demarcated by pairs of double curly brackets. Liquid interprets and outputs whatever is between the brackets.

      {% raw %}{{ page.title }} - {{ site.name }}{% endraw %}

  The above code first outputs the variable `page.title`, which comes from the `title` property set in the page's YAML header. LocomotiveCMS automatically loads all of the YAML header values for a page into the `page` _droplet_, which we see above. Programmers can think of Liquid droplets like objects or hashes. If that doesn't make sense to you, you can think of droplets as collections of related variables. You can access a droplet's variables by putting a period after the droplet name, followed by the variable's name.

  After `page.title` has been evaluated, Liquid then outputs the site's name, as set in the `config/site.yml` file, using the `site.name` variable. This time the variable is stored in the `site` droplet. Together, the result is: _Home - Wisdom for Wanderers_.

  That's pretty easy to understand, but some may be wondering why we don't just put that text into this page directly and avoid all this Liquid markup business? Good question. The first reason is that, as you may remember from [section 1.3](1-3-deploy-to-engine), the `name` property in `config/site.yml` and the `title` property in `app/pages/index.liquid`'s YAML header are editable through the LocomotiveCMS back-office. That means that site editors can change these values at anytime using the back-office's GUI.

  The second reason is that `index.liquid` is not just a page; thanks to LocomotiveCMS's page inheritance system, it also serves as a template for child pages. As such, the value of the `<title>` tag can't be a static value, but instead needs to change on a page-by-page basis. We'll come back to page inheritance later.

  ## Liquid tags
  Now, for some sites, the above might be all we need in the title tag. But let's assume that, for SEO purposes, I would like to the use a few more keywords in the title tag.

      {% raw %}{% if page.seo_title %}{{ page.seo_title }}{% else %}{{ site.seo_title }}{% endif %}{% endraw %}

  Here we are introduced to Liquid's second type of markup: _tag markup_. Liquid tags are indicated with paired curly brackets and percentage signs.

  Liquid tags can perform all kinds of functions, but here we have a simple _if_ statement: output the variable `page.seo_title` if it exists. Otherwise, output the variable `site.seo_title`. We didn't define a `seo_title` property in this page's YAML header, so `page.seo_title` doesn't exist, which means that the `seo_title` property defined in `config/site.yml` will be output instead. This lets us add keywords to the title on a page-by-page basis. When we don't define page-specific title keywords, it falls back to the site-wide title keywords. Pretty cool, huh?

  Putting it all together, this page's title will be _Home - Wisdom for Wanderers | Travel Tips for the Adventurous!_

  After the title tag, we have some more Liquid markup that should look a little more familiar now. Output `page.meta_description` if it exists. Otherwise, fall back to `site.meta_description`.

      {% raw %}<meta name="description" content="{% if page.meta_description %}{{ page.meta_description }}{% else %}{{ site.meta_description }}{% endif %}">{% endraw %}

  Next comes the the `keywords` meta tag.

      {% raw %}<meta name="keywords" content="{{ site.meta_keywords }} {{ page.meta_keywords }}">{% endraw %}

  Here, both the site's keywords and the page's keywords are shown. If either one isn't defined, Liquid will simply output nothing for each of those statements.

  ## Liquid filters
  After a standard viewport meta tag, we encounter this interesting line:

      {% raw %}{{ 'bootstrap.css' | stylesheet_tag }}{% endraw %}

  Liquid _filters_ come after a pipe (|) character inside output markup and, in some way, modify what comes before the pipe character. Here, the `stylesheet_tag` filter takes the name of a CSS file in the `public/stylesheets` directory and creates a link tag for that stylesheet. This isn't just a time-saving shortcut. It's actually necessary due to the way LocomotiveCMS handles assets. If you preview this page using Wagon's web server and view the source, you'll see the above Liquid becomes:

      <link href="/stylesheets/bootstrap.css" media="screen" rel="stylesheet" type="text/css" />

  However, if you were to deploy this site to an Engine and view the source, it would look closer to something like this:

      <link href="/sites/52759abbb5f1c932fe000002/theme/stylesheets/bootstrap.css" media="screen" rel="stylesheet" type="text/css">

  For this reason, when linking to assets in your templates, use Liquid filters to link to the URL. What if we want to change the value of _media_? The `stylesheet_tag` filter actually takes a _media_ argument we can use to set it like below.

  <pre><code class="locomotive-liquid">{% raw %}{{ 'bootstrap.css' | stylesheet_tag: "screen, print" }}{% endraw %}</code></pre>

  Another solution might be to use a completely different filter, `stylesheet_url`, like this:

      {% raw %}<link href="{{ 'bootstrap.css' | stylesheet_url }}" media="screen, print" rel="stylesheet" type="text/css">{% endraw %}

  Liquid filters can do way more than just modify URLs. Let's explore some other filters. You can put these experiments in `index.liquid` below the "Coming soon" text and test the results with the Wagon web server.

  Filters can modify strings.

      {% raw %}{{ 'test' | capitalize }}{% endraw %}
  Outputs: `Test`

  Filters can also modify variables.

      {% raw %}{{ page.title | upcase }}{% endraw %}
  Outputs: `HOME`

  Filters can accept an argument.

      {% raw %}{{ site.name | truncate: 10 }}{% endraw %}
  Outputs: `Wisdom ...`

  Filters can accept mulitple arguments.

      {% raw %}{{ site.name | truncate: 8, "---" }}{% endraw %}
  Outputs: `Wisdo---`

  Filters can modify numbers.

  <pre><code class="locomotive-liquid">{% raw %}{{ 8 | plus: 10 }}{% endraw %}</pre></code>
  Outputs: `18`

  Filters can be strung together.

  <pre><code class="locomotive-liquid">{% raw %}{{ "MY NAME IS TOM" | dasherize | downcase }}{% endraw %}</code></pre>
  Outputs: `my-name-is-tom`

  Pretty neat, huh? Liquid comes with a good set of filters and LocomotiveCMS has added more on top of that. You can see a list of all the filters and what they do using [Liquid's Documentation](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers) and [LocomotiveCMS's Template Reference](http://doc.locomotivecms.com/references).

  ## Page slugs and operators

  Onto the `<body>` of the page! Let's study this bit of Liquid from the menu:

      <li {% raw %}{% if page.slug=="index" %}class="active"{% endif %}{% endraw %}>
        <a href="/">Home</a>
      </li>

  `page.slug` is a variable representing the page's _slug_. In LocomotiveCMS, page slugs configure the URL of a page. If a page's slug is _foo-bar-baz_, then the page can be accessed at the URL `/foo-bar-baz`. Page slugs should be all lowercase, hyphenized, and unique among pages in the same directory.

  Like `page.title` or `page.meta_description`, `page.slug` can be set in the YAML header using the `slug` option. By default, all pages are assigned a slug based on their file name, so we usually omit this option from the header.

  This file is `index.liquid`, so the slug is _index_ by default. If we created a file `app/views/pages/things_to_pack.liquid`, the slug would be _things-to-pack_. Note that the underscores became hyphens. This situation probably won't come up, but if you wanted the slug of `things_to_pack.liquid` to be `packing`, you could do so by adding the following line to `things_to_pack.liquid`'s YAML header.

      slug: packing

  As you might have noticed, the slug _index_ is a special slug that allows us to access the page at the root URL. Since `index.liquid`'s slug is _index_, the page is accessible at `/`.

  Back to the Liquid code above, the next new bit is `==`. As in many programming languages, Liquid uses `==` as a comparison operator. So, `{% raw %}{% if page.slug == "index" %}{% endraw %}` could be translated as "if page.slug equals _index_". Liquid features the usual suspects in terms of comparison operators, shown in the table below.

  <table>
      <tr>
          <td><code>==</code></td>
          <td>equals</td>
          <td>Ex) <code class="locomotive-liquid">{% raw %}{% if (2 + 1) == 3 %}{% endraw %}</code></td>
      </tr>
      <tr>
          <td><code>!=</code></td>
          <td>does not equal</td>
          <td>Ex) <code class="locomotive-liquid">{% raw %}{% if 'a' != 'b' %}{% endraw %}</code></td>
      </tr>
      <tr>
          <td><code>&gt;</code></td>
          <td>greater than</td>
          <td>Ex) <code class="locomotive-liquid">{% raw %}{% if 10 &gt; 5 %}{% endraw %}</code></td>
      </tr>
      <tr>
          <td><code>&lt;</code></td>
          <td>less than</td>
          <td>Ex) <code class="locomotive-liquid">{% raw %}{% if 0 &lt; 1 %}{% endraw %}</code></td>
      </tr>
      <tr>
          <td><code>&gt;=</code></td>
          <td>greater than or equal to</td>
          <td>Ex) <code class="locomotive-liquid">{% raw %}{% if 10 &gt;= 9 %}{% endraw %}</code></td>
      </tr>
      <tr>
          <td><code>&lt;=</code></td>
          <td>less than or equal to</td>
          <td>Ex) <code class="locomotive-liquid">{% raw %}{% if 7 &lt;= 7 %}{% endraw %}</code></td>
      </tr>
      <tr>
          <td><code>contains</code></td>
          <td></td>
          <td>Ex) <code class="locomotive-liquid">{% raw %}{% if 'foobar' contains 'foo' %}{% endraw %}</code></td>
      </tr>
  </table>

  Let's take a look at that Liquid markup again:

      <li {% raw %}{% if page.slug=="index" %}class="active"{% endif %}{% endraw %}>
        <a href="/">Home</a>
      </li>

  So, if we put everything together, this Liquid markup means: if the slug of the current page is "index", then add `class="active"` to this `<li>` tag.

  ## Finishing up

  There's only a few more pieces of Liquid markup on the page, but I'll let you find those on your own. If you're not sure what they do, you can always consult [LocomotiveCMS's Template Reference](http://doc.locomotivecms.com/references).

  Let's commit our pages to the git repository before moving on...

  <pre><span>$ git commit -am "Customized the home page."</span></pre>

  The home page is complete for now. We still have a long way to go on our blog, but the pace will really pick up from here.


%a.orange-rounded-button{href: "/making-blog/2-2-adding-pages"} Next: adding pages

{% endblock %}
