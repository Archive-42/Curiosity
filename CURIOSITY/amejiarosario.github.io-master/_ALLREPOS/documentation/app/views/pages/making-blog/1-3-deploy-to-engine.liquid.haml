---
title: 1.3 Deploying to the Engine
listed: true
position: 3
---
{% extends 'index' %}

{% block 'content' %}

:markdown
  ## The push command
  Truth be told, our site (currently) isn't much of a site at all. It's just a generic Bootstrap placeholder page. Nonetheless, we're going to deploy our site now, because it will feel good to test out the deployment settings and check that everything is working.

  Open a command line and navigate to the folder's project directory. The `wagon push` command deploys a Wagon site to an Engine. Let's see what arguments it takes.

  <pre><span>$ wagon help push
  Usage:
    wagon push ENV [PATH]

  Options:
    -r, [--resources=one two three]  # Only push the resource(s) passed in argument
    -f, [--force]                    # Force the push of a resource
    -t, [--translations]             # Push the local translations (by default, they are not)
    -d, [--data]                     # Push the content entries and the editable elements (by default, they are not)
    -v, [--verbose]                  # display the full error stack trace if an error occurs

  Push a site to a remote LocomotiveCMS engine</span></pre>

  There's one required argument, `environment`, and a bunch of options that we won't worry about for now. [In section 1.2](1-2-configure-site), we configured our Engine's connection details using the environment _development_.

  We're about to deploy, so if you're using a local Engine, turn on MongoDB and start Rails. Let's run `wagon push`!

  <pre><span>$ bundle exec wagon push development
  * Pushing Site
    en
      updating Wisdom for Wanderers.......................................[done]
  * Pushing Snippets
    en
      updating Footer.....................................................[done]
  * Pushing ContentTypes
  * Pushing Pages
    en
      updating index......................................................[done]
        updating favicon.png..............................................[done]
        creating apple-touch-icon-144x144-precomposed.png.................[done]
        creating apple-touch-icon-114x114-precomposed.png.................[done]
        creating apple-touch-icon-72x72-precomposed.png...................[done]
        creating apple-touch-icon-precomposed.png.........................[done]
      updating 404........................................................[done]
  * Pushing ThemeAssets
      updating fonts/glyphicons-halflings-regular.eot.....................[done]
      updating fonts/glyphicons-halflings-regular.svg.....................[done]
      updating fonts/glyphicons-halflings-regular.ttf.....................[done]
      updating fonts/glyphicons-halflings-regular.woff....................[done]
      updating javascripts/bootstrap.min.js...............................[done]
      updating javascripts/bootstrap.js...................................[done]
      updating stylesheets/bootstrap-theme.css............................[done]
      updating stylesheets/bootstrap-theme.min.css........................[done]
      updating stylesheets/bootstrap.css..................................[done]
      updating stylesheets/bootstrap.min.css..............................[done]</span></pre>

  If your deploy was successful, the output should look something like the output above. Open your browser to your Engine's root URL and take a look. If everything deployed successfully, you'll see our placeholder site.

  <img src="{{ 'guides/making-blog/1.3/placeholder_site.jpg' | theme_image_url }}" alt="Our placeholder site" />

  ## Troubleshooting

  If you deployed the site successfully using `push` and can view the dummy site in your browser, sweet! You can [skip ahead to the section below](#testing-the-back-office).

  Still here? Bummer. You must have run into some trouble. Let's go over some common gotchas.

      cannot load such file -- sprockets/environment
  If an error like the one above appears when you run `wagon push`, make sure you're using `bundle exec` before `wagon push`, like so: `bundle exec wagon push development`

      Unable to read the information about the remote LocomotiveCMS site (undefined method `with_indifferent_access' for nil:NilClass)
  An error like the one above means the `environment` handle you specified in the `wagon push` command doesn't exist in your `deploy.yml` file. Make sure the handle you're using (i.e. development, production, etc...) matches what is in the file.

  <pre><span>unable to get an API token: The API key is invalid. (401)</span></pre>
  Double check that your API key matches the one in the back-office of your Engine.

  <pre><span>unable to get an API token: Connection refused - connect(2)</span></pre>
  Wagon can't connect to the host you specified for this environment in `deploy.yml`

  <pre><span>unable to get an API token:  (500)</span></pre>
  Wagon can connect to the host, but received an internal server error when trying to access the LocomotiveCMS API. Are Rails and MongoDB running? Is the back-office working?

  There are no changes in the backoffice? And the default site from the engine tutorial is still showing? Overwriting the existing could be the solution.
  <pre><span>$ bundle exec wagon push development --force</span></pre>


  <h2 id="testing-the-back-office">Testing the back-office</h2>

  Let's take a quick look at the back-office for our Engine. Open your browser to the Engine's back-office. For most Engines, you can access this at the _locomotive_ subdirectory by default, i.e. _http://www.example.com/locomotive_. LocomotiveHosting users can access a site's back-office at the _admin_ subdirectory or by clicking on the site's name in [your Workspace](https://www.locomotivehosting.com/admin/sites).

  Remember those settings we made in the `config/site.yml` file? Let's see if those deployed to our Engine. In the back-office, click the _Settings_ tab, and under the _Site_ section you should see the settings we made in the `config/site.yml` file, including the site's name, locale, time zone, and SEO settings.

  <img src="{{ 'guides/making-blog/1.3/back_office_settings.jpg' | theme_image_url }}" alt="Our configuration settings in the back-office." />

  Great. We've done some basic configuration and have tested our deployment settings, so let's start making the site.


%a.orange-rounded-button{href: "/making-blog/2-1-index-page"} Next: the index page

{% endblock %}
