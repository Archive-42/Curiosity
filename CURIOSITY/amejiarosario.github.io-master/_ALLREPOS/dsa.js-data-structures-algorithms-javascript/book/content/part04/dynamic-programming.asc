ifndef::imagesdir[]
:imagesdir: ../../images
:codedir: ../../../src
endif::[]

(((Dynamic Programming)))
(((Algorithmic Techniques, Dynamic Programming)))
[[dynamic-programming-chap]]
=== Dynamic Programming

Dynamic programming (DP) is a way to solve algorithmic problems with *overlapping subproblems*. Algorithms using DP find the base case and building a solution from the ground-up. Dp _keep track_ of previous results to avoid re-computing the same operations.

// https://twitter.com/iAmAdrianMejia/status/1103050924933726208
// https://www.quora.com/How-should-I-explain-dynamic-programming-to-a-4-year-old/answer/Jonathan-Paulson
// https://medium.com/@codingfreak/top-50-dynamic-programming-practice-problems-4208fed71aa3
// https://www.slideshare.net/balamoorthy39/greedy-algorithm-knapsack-problem

.How to explain dynamic programming to kids? ðŸ‘¶
****

$$*$$*_Write down 1+1+1+1+1+1+1+1+1+1_*$$*$$

--{sp} What's that equal to?

--{sp} $$*$$*_Kid counting one by one_*$$*$$ Ten!

--{sp} Add another "+1". What's the total now?

--{sp} $$*$$*_Quickly_*$$*$$  Eleven!

--{sp} Why you get the result so quickly? Ah, you got it faster by adding one to the memorized previous answer. So Dynamic Programming is a fancy way of saying: "remembering past solutions to save time later."
****

==== Fibonacci Sequence with Dynamic Programming
(((Fibonacci)))
Let's solve the same Fibonacci problem but this time with dynamic programming.

When we have recursive functions, doing duplicated work is the perfect place for dynamic programming optimization. We can save (or cache) the results of previous operations and speed up future computations.

.Recursive Fibonacci Implemenation using Dynamic Programming
[source, javascript]
----
include::{codedir}/algorithms/fibonacci-dynamic-programming.js[tag=snippet,indent=0]
----

This implementation checks if we already calculated the value, if so it will save it for later use.

[graphviz, Recursive-Fibonacci-call-tree-with-dp, png]
....
graph G {
    "fib(5)" -- { "fib(4)" }
    "fib(4)" -- { "fib(3)" }
    "fib(3)" -- { "fib(2)" }
    "fib(2)" -- { "fib(1)", "fib(0)" }
}
....

This graph looks pretty linear now. It's runtime _O(n)_!
(((Linear)))
(((Runtime, Linear)))

(((Memoization)))
TIP: Saving previous results for later is a technique called "memoization". This is very common to optimize recursive algorithms with overlapping subproblems. It can make exponential algorithms linear!
