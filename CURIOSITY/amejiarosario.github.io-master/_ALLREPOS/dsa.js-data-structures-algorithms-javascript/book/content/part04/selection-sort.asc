ifndef::imagesdir[]
:imagesdir: ../../images
:codedir: ../../../src
endif::[]

(((Sorting, Selection Sort)))
(((Selection Sort)))
[[selection-sort]]
==== Selection Sort

The selection sort is a simple sorting algorithm. As its name indicates, it _selects_ the lowest element from the list and moves it where it should be.

.Selection sort algorithm
. Start with the element in position 0.
. Find the minimum item in the rest of the array. If a new minimum is found, swap them.
. Repeat step #1 and #2 with the next element until the last one.

image::selection-sort.gif[]

===== Selection sort implementation
For implementing the selection sort, we need two indexes.

.Selection sort
[source, javascript]
----
include::{codedir}/algorithms/sorting/selection-sort.js[tag=sort, indent=0]
----
<1> Converts any collection to an array or clone existing array.
<2> Visit all elements in the array starting from the 1st element (index 0).
<3> Everything to the left side is considered sorted in its final position. So, select `left` as the initial minimum value.
<4> Compare the `selection` to every element to the right side.
<5> If it finds a value _smaller_ than the selection, then update the `selection`.
<6> Put the next smallest item to its final position

TIP: Selection sort minimizes the number of swaps. It does one swap per iteration while insertion sort and bubble sort could swap many times with the same array.

One index is for the position in question (selection/left) and another for finding the minimum in the rest of the array (right).

===== Selection Sort Properties

- <<In-place>>: [big]#✅# Yes
- <<Stable>>: [big]#️️❌# No
- <<Adaptive>>: [big]#️️❌# No
- <<Online>>: [big]#️️❌# No
- Time Complexity: [big]#⛔️# <<part01-algorithms-analysis#quadratic>> _O(n^2^)_
- Space Complexity: [big]#✅# <<part01-algorithms-analysis#constant>> _O(1)_

*Why selection sort is not stable?*

To recap, _stable_ means that items with the same value keep their initial position.
Let's see what would happen with the selection sort if we (select) sort the following array `2, 5, 2, 1`. To distinguish them, let's say `2a` and `2b`, so `2a, 5, 2b, 1`.

Initially, we select the first element, `2a` and check if there's anything less than 2 in the array. We find out that position 3 has an item with a smaller value (`1`), so we swap them.

Now, we have: `1, 5, 2b, 2a`.
There you have it, `2b` now comes before `2a`.

// CAUTION: In practice, selection sort performance is the worst compared <<part04-algorithmic-toolbox#insertion-sort>> and <<part04-algorithmic-toolbox#insertion-sort>>. The only advantage of selection sort is that it minimizes the number of swaps. If swapping is expensive, it could make sense to use this one over the others.

(((Quadratic)))
(((Runtime, Quadratic)))
