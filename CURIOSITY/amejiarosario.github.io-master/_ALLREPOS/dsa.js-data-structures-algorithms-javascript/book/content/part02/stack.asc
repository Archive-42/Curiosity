ifndef::imagesdir[]
:imagesdir: ../../images
:codedir: ../../../src
endif::[]

[[stack]]
=== Stack
(((Stack)))
(((Data Structures, Linear, Stack)))
(((Last-In First-out)))
(((LIFO)))
The stack is a data structure that restricts the way you add and remove data. It only allows you to insert and retrieve in a *Last-In-First-Out* (LIFO) fashion.

An analogy is to think that the stack is a rod, and the data are discs. You can only take out the last one you put in.

.Stack data structure is like a stack of disks: the last element in is the first element out
image::image29.png[image,width=240,height=238]

// #Change image from https://www.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi[Khan Academy]#

As you can see in the image above, If you insert the disks in the order `5`, `4`, `3`, `2`, `1`, then you can remove them in `1`, `2`, `3`, `4`, `5`.

The stack inserts items to the end of the collection and also removes it from the rear. Both an array and linked list would do it in constant time. However, since we don’t need the Array’s random access, a linked list makes more sense.

.Stack's constructor
[source, javascript]
----
include::{codedir}/data-structures/stacks/stack.js[tag=constructor]
  // ... methods goes here ...
}
----

As you can see in the stack constructor, we use a  linked list as the underlying data structure.

Let's now develop the insert and remove operations in a stack.

==== Insertion

We can insert into a stack using the linked list’s `addLast` method.

.Stack's add
[source, javascript]
----
include::{codedir}/data-structures/stacks/stack.js[tag=add, indent=0]
----

We are returning `this`, in case we want to chain multiple add commands.

==== Deletion

Deleting is straightforward, as well.

.Stack's remove
[source, javascript]
----
include::{codedir}/data-structures/stacks/stack.js[tag=remove, indent=0]
----

This time we used the linked list’s `removeLast` method. That’s all we need for a stack implementation. Check out the https://github.com/amejiarosario/dsa.js/blob/f69b744a1bddd3d99243ca64b3ad46f3f2dd7342/src/data-structures/stacks/stack.js#L6[full implementation].

==== Implementation Usage

We can use our stack implementation as follows:

.Stack usage example
[source, javascript]
----
include::{codedir}/data-structures/stacks/stack.js[tag=snippet, indent=0]
----

As you can see, if we add new items, they will be the first to go out to honor LIFO.

==== Stack Complexity

Implementing the stack with an array and linked list would lead to the same time complexity:
(((Tables, Linear DS, Stack complexities)))

// tag::table[]
.Time/Space complexity for the stack operations
|===
.2+.^s| Data Structure 2+^s| Searching By 3+^s| Inserting at the 3+^s| Deleting from .2+.^s| Space
^|_Index/Key_ ^|_Value_ ^|_beginning_ ^|_middle_ ^|_end_ ^|_beginning_ ^|_middle_ ^|_end_
| Stack ^|- ^|- ^|- ^|- ^|O(1) ^|- ^|- ^|O(1) ^|O(n)
|===
// end::table[]

It's not very common to search for values on a stack (other Data Structures are better suited for this). Stacks are especially useful for implementing <<part03-graph-data-structures#dfs-tree, Depth-First Search>>.


==== Practice Questions
(((Interview Questions, Stack)))

// tag::stack-q-valid-parentheses[]
===== Validate Parentheses / Braces / Brackets

*ST-1*) _Given a string with three types of brackets: `()`, `{}`, and `[]`. Validate they are correctly closed and opened._

Examples:

[source, javascript]
----
isParenthesesValid('(){}[]'); // true
isParenthesesValid('('); // false (closing parentheses is missing)
isParenthesesValid('([{}])'); // true
isParenthesesValid('[{]}'); // false (brakets are not closed in the right order)
isParenthesesValid('([{)}]'); // false (closing is out of order)
----

_Common in interviews at: Amazon, Bloomberg, Facebook, Citadel_
// end::stack-q-valid-parentheses[]

[source, javascript]
----
include::../../interview-questions/valid-parentheses.js[tag=description]
  // write you code here
}
----

_Solution: <<stack-q-valid-parentheses>>_





// tag::stack-q-daily-temperatures[]
===== Daily Temperaturs

*ST-2*) _Given an array of integers from 30 to 100 (daily temperatures), return another array that, for each day in the input, tells you how many days you would have to wait until warmer weather. If no warmer climate is possible, then return `0` for that element._

Examples:

[source, javascript]
----
dailyTemperatures([30, 28, 50, 40, 30]); // [2 (to 50), 1 (to 28), 0, 0, 0]
dailyTemperatures([73, 69, 72, 76, 73, 100]); // [3, 1, 1, 0, 1, 100]
----

_Common in interviews at: Amazon, Adobe, Cisco_
// end::stack-q-daily-temperatures[]

[source, javascript]
----
include::../../interview-questions/daily-temperatures.js[tag=description]
  // write you code here
}
----

_Solution: <<stack-q-daily-temperatures>>_
