require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do
  
  def password
    "abced"
  end
 
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    FactoryGirl.attributes_for(:user)
    # FactoryGirl.build(:user, password: password, admin: true)
      # .attributes.except("id", "password_encrypted", "password_salt")
      # .merge("password"=>password)
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  def valid_session
    {} #{:user_id => user.id}
  end

  before :each do
    @admin = FactoryGirl.create(:user, password: password, admin: true)
    @user = FactoryGirl.create(:user, password: password, admin: false)
    @user_session = {:user_id => @user.id}
    @admin_session = {:user_id => @admin.id}
  end

  describe "GET index" do
    context "guest user" do
      it "should not be able see users" do
        get :index
        assigns(:users).should be_blank
      end
      
      it "should not render the index page" do
        get :index
        response.should_not render_template("index")
      end
    end
    
    context "admin user" do
      it "assigns all users as @users (admin users can see list of @users)"  do
        get :index, {}, @admin_session # send valid session
        assigns(:users).should =~ [@user, @admin]
      end
      
      it "renders the index template" do
        get :index, {}, @admin_session
        response.should render_template("index")
      end
    end
    
    context "non-admin user" do
      it "doesn't assign all users as @users (non-admin users CANNOT see list of @users)" do
        get :index, {},  @user_session  # send valid session
        assigns(:users).should be_blank
      end
      
      it "doesn't render the index template" do
        get :index, {},  @user_session 
        response.should_not render_template("index")
      end      
    end
    
  end

  describe "GET show", current: true do
    context "guest user" do
      it "should not be able see any user" do
        get :show, {:id => @user.to_param}
        assigns(:users).should be_blank
      end
      
      it "should not render the index page" do
        get :show, {:id => @user.to_param}
        response.should_not render_template("show")
      end
    end    
    
    context "admin user" do
      it "should be able to see other users" do
        get :show, {:id => @user.to_param}, @admin_session
        assigns(:user).should == @user
        response.should render_template("show")
      end
      
      it "should be able to see himself" do
        get :show, {:id => @admin.to_param}, @admin_session
        assigns(:user).should == @admin
        response.should render_template("show")
      end
    end
    
    context "non-admin user" do
      it "should NOT be able to see other users" do
        get :show, {:id => @admin.to_param}, @user_session
        assigns(:user).should be_blank
        response.should_not render_template("show")
      end
      
      it "should be able to see himself" do
        get :show, {:id => @user.to_param}, @user_session
        assigns(:user).should == @user
        response.should render_template("show")
      end
    end

  end

  describe "GET new" do
    it "assigns a new user as @user (not login required)" do
      get :new, {}, valid_session
      assigns(:user).should be_a_new(User)
    end
  end

  describe "GET edit" do
    context "guest user" do
      it "should not be able to edit any user" do
        get :edit, {:id => @user.to_param}
        assigns(:user).should be_blank
        response.should_not render_template("edit")
      end
    end
    
    context "registered user" do
      it "should edit himself" do
        get :edit, {:id => @user.to_param}, @user_session
        assigns(:user).should == @user
        response.should render_template("edit")
      end
      
      it "should not be able to edit other users" do
        get :edit, {:id => @admin.to_param}, @user_session
        assigns(:user).should be_blank
        response.should_not render_template("edit")        
      end
    end
    
    context "admin user" do
      it "should be able to edit other users" do
        get :edit, {:id => @user.to_param}, @admin_session
        assigns(:user).should == @user
        response.should render_template("edit")        
      end
      
      it "should be able to edit himself" do
        get :edit, {:id => @admin.to_param}, @admin_session
        assigns(:user).should == @admin
        response.should render_template("edit")        
      end
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new User" do
        expect {
          post :create, {:user => valid_attributes}, valid_session
        }.to change(User, :count).by(1)
      end

      it "assigns a newly created user as @user" do
        post :create, {:user => valid_attributes}, valid_session
        assigns(:user).should be_a(User)
        assigns(:user).should be_persisted
      end

      it "redirects to the created user" do
        post :create, {:user => valid_attributes}, valid_session
        response.should redirect_to(User.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved user as @user" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post :create, {:user => {}}, valid_session
        assigns(:user).should be_a_new(User)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post :create, {:user => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested user" do
        # Assuming there are no other users in the database, this
        # specifies that the User created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        # E.g. User.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        User.any_instance.should_receive(:update_attributes).with({'email' => 'test@adtran.com'})
        put :update, {:id => @user.to_param, :user => {'email' => 'test@adtran.com'}}, @user_session
      end

      it "assigns the requested user as @user" do
        put :update, {:id => @user.to_param, :user => {'email' => 'test@adtran.com'}}, @user_session
        assigns(:user).should eq(@user)
      end

      it "redirects to the user" do
        put :update, {:id => @user.to_param, :user => {'email' => 'test@adtran.com'}}, @user_session
        response.should redirect_to(@user)
      end
    end

    describe "with invalid params" do
      it "assigns the user as @user" do
        user = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => user.to_param, :user => {}}, valid_session
        assigns(:user).should eq(user)
      end

      it "re-renders the 'edit' template" do
        user = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => user.to_param, :user => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested user" do
      user = User.create! valid_attributes
      expect {
        delete :destroy, {:id => user.to_param}, valid_session
      }.to change(User, :count).by(-1)
    end

    it "redirects to the users list" do
      user = User.create! valid_attributes
      delete :destroy, {:id => user.to_param}, valid_session
      response.should redirect_to(users_url)
    end
  end

end
