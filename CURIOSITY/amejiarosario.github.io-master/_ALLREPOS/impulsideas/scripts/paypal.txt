https://devtools-paypal.com/guide/pay_paypal/ruby?interactive=OFF&env=sandbox
https://github.com/paypal/rest-api-sdk-ruby


  # Create a payment by constructing a payment object using access token.
  # https://devtools-paypal.com/guide/pay_paypal/ruby?interactive=OFF&env=sandbox

# TODO
Rails SEO
http://www.inboundio.com/blog/seo-for-ruby-on-rails-complete-guide/

-----


Tue, 12/03/2013 - 15:21 (pp_par_amy)
Hi,
We cannot support your usage of Delayed Chained Payments for an ‘All or Nothing’ Crowdfunding Business Model.  As per our Crowdfunding Application Guidelines;

https://developer.paypal.com/webapps/developer/docs/classic/lifecycle/cr..., we will require you to use the Preapprovals + Instant Chained Payments API’s for this business model with the Fundraiser as Primary Recipient and you taking your fee as Secondary Recipient.  For more information on Preapprovals for this business model, please see here: https://go.developer.ebay.com/devzone/articles/using-paypal-preapproval-...

https://developer.paypal.com/docs/classic/lifecycle/crowdfunding/
http://go.developer.ebay.com/devzone/articles/using-paypal-preapproval-api-goal-realization


Regards
Amy.

# --------

Tue, 12/03/2013 - 23:06 (servicio@impulsideas.com)
Hi,

I updated the form, we will use Pre Approvals + Instant Chained Payments API then.

Regards,
Adrian

# --------

# FIXME: include bussiness flow...
# https://developer.paypal.com/webapps/developer/docs/classic/lifecycle/crowdfunding/

# 1. [project owner] Login with Paypal

# https://devtools-paypal.com/guide/openid/ruby?interactive=OFF&env=sandbox

# 1.1
# PayPal::SDK.configure({
#   :mode => "sandbox",
#   :openid_client_id     => "AQkquBDf1zctJOWGKWUEtKXm6qVhueUEMvXO_-MCI4DQQ4-LWvkDLIN2fGsd",
#   :openid_client_secret => "EL1tVxAjhT7cJimnz5-Nsx9k2reTKSVfErNQF-CmrwJgxRtylkGTKlU4RvrX",
#   :openid_redirect_uri  => "https://devtools-paypal.com/"
# })
# include PayPal::SDK::OpenIDConnect
# loginurl = Tokeninfo.authorize_url( :scope => "openid email")

# 1.2 - redirect to
# https://www.sandbox.paypal.com/webapps/auth/protocol/openidconnect/v1/authorize?client_id=AQkquBDf1zctJOWGKWUEtKXm6qVhueUEMvXO_-MCI4DQQ4-LWvkDLIN2fGsd&response_type=code&scope=openid email&redirect_uri=https://devtools-paypal.com/

# 1.3 - after redirect
# sample: https://devtools-paypal.com/?scope=openid+email&code=kkUGr50L0ndsZ5iRyjYacXD0ZolG54nW_ZBY3ZPP8T4hyGWAq1teYjyyiEV0rgUImsSP0husqCK5dc6J9oYyKyYOAXYYS8qzXG7xihejYiwm_UzDbvswfEd1gFwE-OTG7Z4avVn3ok6jwYOYlcyef-iJGP3OD62F2awFAP7kdmoqbXwf
# tokeninfo = Tokeninfo.create("{AUTH_CODE}")


# 2. [customer/backer]

# https://devtools-paypal.com/guide/ap_preapprove_payment?interactive=OFF&env=sandbox


# 3. [App account]

# https://devtools-paypal.com/guide/ap_chained_payment?interactive=OFF&env=sandbox

# ------


# 1. https://devtools-paypal.com/guide/openid/ruby?interactive=OFF&env=sandbox

## 1. REST API

# https://github.com/paypal/sdk-core-ruby

PayPal::SDK.configure({
  :mode => "sandbox",
  :openid_client_id     => "AQkquBDf1zctJOWGKWUEtKXm6qVhueUEMvXO_-MCI4DQQ4-LWvkDLIN2fGsd",
  :openid_client_secret => "EL1tVxAjhT7cJimnz5-Nsx9k2reTKSVfErNQF-CmrwJgxRtylkGTKlU4RvrX",
  :openid_redirect_uri  => "https://devtools-paypal.com/"
})
include PayPal::SDK::OpenIDConnect
loginurl = Tokeninfo.authorize_url( :scope => "openid email")

#
# REDIRECT TO PAYPAL
#
# Click on the redirect url below for user login and consent. After successful user login and consent, PayPal will redirect the user to redirect_uri with authorization code. You will need to capture this code and use it to obtain an access token as described in the next step.
# => https://www.sandbox.paypal.com/webapps/auth/protocol/openidconnect/v1/authorize?client_id=AQkquBDf1zctJOWGKWUEtKXm6qVhueUEMvXO_-MCI4DQQ4-LWvkDLIN2fGsd&response_type=code&scope=openid email&redirect_uri=https://devtools-paypal.com/
# after login gets:
# https://devtools-paypal.com/?scope=openid+email&code=Bw6BHzWGbHTfPeNWGVJY9MRrit5bxNTZBdpIN5d6_paWB2h70N7yCNqeVIpx57agQ5tjt7bzDpa5o5oeL3Ch29F8IyU6bQ86kwI1WNjr7UnNIhIQOWIafF1zrDadlphTiCAP9MSuUwtrJJMY3QEu884JURmB6aXctir3xIUwAnk-jVdU
# tokeninfo = Tokeninfo.create("{AUTH_CODE}")

tokeninfo = Tokeninfo.create("Bw6BHzWGbHTfPeNWGVJY9MRrit5bxNTZBdpIN5d6_paWB2h70N7yCNqeVIpx57agQ5tjt7bzDpa5o5oeL3Ch29F8IyU6bQ86kwI1WNjr7UnNIhIQOWIafF1zrDadlphTiCAP9MSuUwtrJJMY3QEu884JURmB6aXctir3xIUwAnk-jVdU")
# => {"token_type":"Bearer","expires_in":"28800","refresh_token":"tq-TW3XmE064KD3V4wQ3c5TXJ1eeoNiuQhhQSm2Hl9ZRnthiOCGhPT-tePmR1j0mTpbDidcJZG1hUG1yas_QQu7YJAHWAz0IpiTCiZl5mKHOCwnnypJhebiGIyg","id_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJBUWtxdUJEZjF6Y3RKT1dHS1dVRXRLWG02cVZodWVVRU12WE9fLU1DSTREUVE0LUxXdmtETElOMmZHc2QiLCJhdXRoX3RpbWUiOjEzODM0MjUzMjcsImlzcyI6Imh0dHBzOi8vd3d3LnBheXBhbC5jb20iLCJzZXNzaW9uSW5kZXgiOiI3MDg5YmFmYjVjNmU4YzYzMjhmZDk5NjE3MThlNDhiYTY3ZGViODJjIiwiaWF0IjoxMzgzNDI1MzMyLCJleHAiOjI4ODAwLCJ1c2VyX2lkIjoiaHR0cHM6Ly93d3cucGF5cGFsLmNvbS93ZWJhcHBzL2F1dGgvaWRlbnRpdHkvdXNlci9FN2Qyd05UTGpQZkY2b0QwSDZvd1NsQ0ZjMXYzNFJ2N2dOX1Jia0tyTVJRIn0=.aZeJoFqCLq-ILQc-ss3Kzg0XJV5V9T6dt1z3c_xY4dk","access_token":"nXS8YGoWuFJJ3ncE2Stmf4h38rv.nSaEBiQbvISdt8A"}

userinfo = Tokeninfo.userinfo
# # => {
#   "email":"project_owner@impulsideas.com",
#   "user_id":"https://www.paypal.com/webapps/auth/identity/user/E7d2wNTLjPfF6oD0H6owSlCFc1v34Rv7gN_RbkKrMRQ"
# }


## 2. Backer's Pre aproval

# https://devtools-paypal.com/guide/ap_preapprove_payment?interactive=OFF&env=sandbox

require 'paypal-sdk-adaptivepayments'
@api = PayPal::SDK::AdaptivePayments::API.new

# Build request object
@preapproval = @api.build_preapproval({
  :cancelUrl => "https://paypal-sdk-samples.herokuapp.com/adaptive_payments/preapproval",
  :currencyCode => "USD",
  :endingDate => "2014-11-02T00:00:00+00:00",
  :maxAmountPerPayment => 50.0,
  :maxNumberOfPayments => 1,
  :maxNumberOfPaymentsPerPeriod => 1,
  :maxTotalAmountOfAllPayments => 50.0,
  :returnUrl => "https://paypal-sdk-samples.herokuapp.com/adaptive_payments/preapproval",
  :memo => "Contributing towards XXX project",
  :ipnNotificationUrl => "https://paypal-sdk-samples.herokuapp.com/adaptive_payments/ipn_notify",
  :senderEmail => "backer@impulsideas.com",
  :startingDate => "2013-11-02T00:00:00+00:00",
  :pinType => "NOT_REQUIRED",
  :feesPayer => "PRIMARYRECEIVER",
  :displayMaxTotalAmount => false })

# Make API call & get response
@preapproval_response = @api.preapproval(@preapproval)
# # => {
# :responseEnvelope => {
#   :timestamp => "2013-11-02T14:02:45-07:00",
#   :ack => "Success",
#   :correlationId => "dc080ee6dada8",
#   :build => "7935900" },
# :preapprovalKey => "PA-13G32009NU049524D" }

# Access Response
if @preapproval_response.success?
  @preapproval_response.preapprovalKey
else
  @preapproval_response.error
end

#
# REDIRECT TO PAYPAL
#
# https://www.sandbox.paypal.com/webscr?cmd=_ap-preapproval&preapprovalkey=PA-13G32009NU049524D
# An email has been sent to backer@impulsideas.com with your preapproval key: PA-13G32009NU049524D


# 3. GET PAID (ADAPTATIVE PAYMENT)

# https://devtools-paypal.com/guide/ap_chained_payment?interactive=OFF&env=sandbox



# simple model

require 'paypal-sdk-adaptivepayments'
@api = PayPal::SDK::AdaptivePayments::API.new

# Build request object
@pay = @api.build_pay({
  :actionType => "PAY",
  :cancelUrl => "https://paypal-sdk-samples.herokuapp.com/adaptive_payments/pay",
  :currencyCode => "USD",
  :feesPayer => "EACHRECEIVER",
  :ipnNotificationUrl => "https://paypal-sdk-samples.herokuapp.com/adaptive_payments/ipn_notify",
  :preapprovalKey => "PA-63474382U2828654E",
  :receiverList => {
    :receiver => [{
      :amount => 50.0,
      :email => "project_owner@impulsideas.com" }] },
  :returnUrl => "https://paypal-sdk-samples.herokuapp.com/adaptive_payments/pay" })

# Make API call & get response
@pay_response = @api.pay(@pay)

# Access Response
if @pay_response.success?
  @pay_response.payKey
  @pay_response.paymentExecStatus
  @pay_response.payErrorList
  @pay_response.paymentInfoList
  @pay_response.sender
  @pay_response.defaultFundingPlan
  @pay_response.warningDataList
else
  @pay_response.error
end

# => {
#   :responseEnvelope => {
#     :timestamp => "2013-11-02T15:07:20-07:00",
#     :ack => "Success",
#     :correlationId => "8689bc6b6acc3",
#     :build => "7935900" },
#   :payKey => "AP-00543630JP037501R",
#   :paymentExecStatus => "COMPLETED",
#   :paymentInfoList => {
#     :paymentInfo => [{
#       :transactionId => "2GG56077FE0096259",
#       :transactionStatus => "COMPLETED",
#       :receiver => {
#         :amount => 50.0,
#         :email => "project_owner@impulsideas.com",
#         :primary => false,
#         :accountId => "T6NK84H5RC8D6" },
#       :pendingRefund => false,
#       :senderTransactionId => "4GA48987J9954980M",
#       :senderTransactionStatus => "COMPLETED" }] },
#   :sender => {
#     :accountId => "EMQNLXDGSMQ8L" } }




require 'paypal-sdk-adaptivepayments'
@api = PayPal::SDK::AdaptivePayments::API.new

# Build request object
@preapproval = @api.build_preapproval({
  :cancelUrl => "https://paypal-sdk-samples.herokuapp.com/adaptive_payments/preapproval",
  :currencyCode => "USD",
  :endingDate => "2014-11-02T00:00:00+00:00",
  :maxAmountPerPayment => 50.0,
  :maxNumberOfPayments => 1,
  :maxNumberOfPaymentsPerPeriod => 1,
  :maxTotalAmountOfAllPayments => 50.0,
  :returnUrl => "https://paypal-sdk-samples.herokuapp.com/adaptive_payments/preapproval",
  :memo => "Contributing towards XXX project",
  :ipnNotificationUrl => "https://paypal-sdk-samples.herokuapp.com/adaptive_payments/ipn_notify",
  :senderEmail => "backer@impulsideas.com",
  :startingDate => "2013-11-02T00:00:00+00:00",
  :feesPayer => "PRIMARYRECEIVER" })

# Make API call & get response
@preapproval_response = @api.preapproval(@preapproval)

# Access Response
if @preapproval_response.success?
  @preapproval_response.preapprovalKey
else
  @preapproval_response.error
end
Response:

{
  :responseEnvelope => {
    :timestamp => "2013-11-02T15:10:27-07:00",
    :ack => "Success",
    :correlationId => "810833883592c",
    :build => "7935900" },
  :preapprovalKey => "PA-4XE7682268949925N" }






IPN

 curl -XPOST http://0.0.0.0:3000/ipn_notifications/4 -d '{
  "max_number_of_payments" : "1",
  "starting_date" : "2014-01-10T19:03:37.000-07:00",
  "pin_type" : "NOT_REQUIRED",
  "max_amount_per_payment" : "1.00",
  "currency_code" : "USD",
  "sender_email" : "amejia@impulsideas.com",
  "verify_sign" : "AFcWxV21C7fd0v3bYYYRCpSSRl31AM8VSOXhixyuJP8AqhSvyFSeFOI0",
  "test_ipn" : "1",
  "date_of_month" : "0",
  "current_number_of_payments" : "0",
  "preapproval_key" : "PA-3C118872410830430",
  "ending_date" : "2014-07-09T19:03:37.000-07:00",
  "approved" : "true", "transaction_type" :
  "Adaptive Payment PREAPPROVAL",
  "day_of_week" : "NO_DAY_SPECIFIED",
  "status" : "ACTIVE",
  "current_total_amount_of_all_payments" : "0.00",
  "current_period_attempts" : "0",
  "charset" : "Shift_JIS",
  "payment_period" : "0",
  "notify_version" : "UNVERSIONED",
  "max_total_amount_of_all_payments" : "1.00",
}'
