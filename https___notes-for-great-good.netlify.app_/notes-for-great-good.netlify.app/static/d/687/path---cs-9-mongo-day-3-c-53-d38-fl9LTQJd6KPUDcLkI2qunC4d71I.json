{
  "data": {
    "markdownRemark": {
      "html": "<p>Side Note: Robo 3T - Better than Compass</p>\n<h2>Topics:</h2>\n<ul>\n<li>importing data</li>\n<li>\n<p>modeling rations</p>\n<ul>\n<li>one to one</li>\n<li>one to many</li>\n<li>many to many</li>\n</ul>\n</li>\n<li>embedded documents/schemas, AKA sub-documents</li>\n<li>linking/refs</li>\n<li>data population</li>\n<li>\n<p>querying data</p>\n<ul>\n<li>sorting</li>\n<li>filtering</li>\n<li>projection</li>\n</ul>\n</li>\n</ul>\n<h3>Data in Mongo Films Project</h3>\n<p>Were generated using a export utility</p>\n<ul>\n<li>Generates JSON files but in different way</li>\n<li>Collection of objects, but not separated by commas</li>\n<li>Special type of JSON files we can use and import into our database</li>\n</ul>\n<h3>Importing</h3>\n<p>From inside the folder where the JSON files you want to import are located:\n<code class=\"language-text\">mongoimport --db databasName --collection collectionName --file nameOfFile.json</code></p>\n<h2>Modeling Relations</h2>\n<p>A film has a collection of: - Characters - Planets - Specie - Starship - Vehicle\nAlso has title and prodcer and director - If we had a director collection, could point to director property from another collection\nThere's a relationship between the species and the planet\nOne planet can have more than one species, but species can only have one planet - Same with characters (only one homeworld)</p>\n<h2>Mainly three types of relation:</h2>\n<h3>One to One:</h3>\n<ul>\n<li>One user has one profile</li>\n<li>One patient has one medical record</li>\n<li>in United States, one person has one spouse</li>\n</ul>\n<h3>One to Many:</h3>\n<ul>\n<li>Most common type of relation</li>\n<li>One order has many order lines/items</li>\n<li>A film can have many actors</li>\n<li>One city has many citizens</li>\n<li>Departments and employees</li>\n</ul>\n<h3>One to Few:</h3>\n<p>More than one but not many -</p>\n<ul>\n<li>A book can have more than author (never going to be 100 authors)</li>\n<li>An author can write many books</li>\n<li>A blog post has a few comments</li>\n</ul>\n<h3>Many to Many ( or Few to Few ):</h3>\n<p>[Book] 1 --- _ [Author] 1 --- _ [Book]\nWhen relationship goes both ways:</p>\n<ul>\n<li>books and authors</li>\n<li>users and roles</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> ObjectId <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId\n\n<span class=\"token keyword\">const</span> definition <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    starship_class<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n        required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    hyperdrive_rating<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">:</span> Number<span class=\"token punctuation\">,</span>\n    pilots<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            type<span class=\"token punctuation\">:</span> ObjectId\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>SWAPI Had Keys</h4>\n<p>Luis wrote code that grabbed that ID and turned it into ObjectID\nDon't need pilot key anymore, can take pilots (array of ObjectIDs) instead</p>\n<h3>One to Many:</h3>\n<p>Start with ref (linking)</p>\n<h3>One to One:</h3>\n<p>Start with embedding (sub-documents)</p>\n<h3>One to few:</h3>\n<p>Could be embedded or linked (ref)</p>\n<h3>Many to Many (Few)</h3>\n<p>Many would be linked, few embedded</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> characterSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n        required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        index<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    gender<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n    height<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> Number<span class=\"token punctuation\">,</span>\n        min<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    eye_color<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n    homeworld<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> ObjectId<span class=\"token punctuation\">,</span>\n        ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'Planet'</span>\n    <span class=\"token punctuation\">}</span>\n    ship<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            type<span class=\"token punctuation\">:</span> ObjectId<span class=\"token punctuation\">,</span>\n            ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'Starship'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    address<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        city<span class=\"token punctuation\">;</span> String<span class=\"token punctuation\">,</span>\n        state<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n        streetAddress<span class=\"token punctuation\">:</span> String\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span> This address is an example <span class=\"token keyword\">of</span> embedding\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> character <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Character'</span><span class=\"token punctuation\">,</span> characterSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> definition <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    starship_class<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n        required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    hyperdrive_rating<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">:</span> Number<span class=\"token punctuation\">,</span>\n    pilots<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            type<span class=\"token punctuation\">:</span> ObjectId<span class=\"token punctuation\">,</span>\n            ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'Character'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    strict<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Don't have to import models</h3>\n<ul>\n<li>Just need to know the names of the models</li>\n</ul>\n<h5>Whenever one to many, default to ref</h5>\n<h6>Planet is not a good use case for embedding</h6>\n<ul>\n<li>Species, characters, etc. pull from that information</li>\n</ul>\n<h4>If you know you're not going to have a new collection:</h4>\n<p>Embed document</p>\n<h3>Querying Data</h3>\n<p>Before you call .then, just a promise\nEvery query can be captured as a query</p>\n<h3>Sort</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> Character<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// by name asending</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-name'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// by name descending</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>'gender <span class=\"token operator\">-</span>height<span class=\"token punctuation\">)</span> <span class=\"token comment\">// multiple fields</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> gender<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// same as above</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Projection</h3>\n<p>Have a lot of things but only need a few fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">query<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name gender'</span><span class=\"token punctuation\">)</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>_id<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// exclude only _id</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> _id<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// excludes _id</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>_id is always returned by default</li>\n</ul>\n<h4>Methods are chainable:</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">Character<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> gender<span class=\"token punctuation\">:</span> <span class=\"token string\">'female'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token string\">'height'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Could have query, don't execute it, and add to it</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// incrementally building query:</span>\n\n<span class=\"token keyword\">const</span> gender <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> Characters<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gender<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    query<span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> gender<span class=\"token punctuation\">:</span> gender <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chars</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>chars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">query<span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gte</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lte</span><span class=\"token punctuation\">(</span><span class=\"token number\">62</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>gte - greater than or equal to\nlte - less than or equal to</p>\n<p>Normally people will not come to you with queries, they will come to you with questions:</p>\n<ul>\n<li>I want to see a list of films in our database but I want to see them in order</li>\n<li>I wnat you to find all the films produced by Gary Kurtz</li>\n</ul>\n<p>You could see Gary Kurtz and it'll add that + for you. (turns to %20, which is equivalent)</p>\n<ul>\n<li>Filtering for that is done with Regex (documentation in MongoDB and Mongoose)</li>\n</ul>\n<p>When I say 'add movies property', I don't mean add to the schema, I mean add it to the response</p>\n<ul>\n<li>You're doing two queries, one to get the character to get the ID, then another for Films to see in how many films that character ID appears</li>\n</ul>",
      "frontmatter": {
        "date": "2018-06-08",
        "title": "CS9 Mongo Day 3",
        "chapter": null,
        "subtitle": null,
        "tags": ["MongoDB", "CS9"],
        "path": "/CS9-Mongo-Day-3"
      }
    }
  },
  "pageContext": {
    "isCreatedByStatefulCreatePages": false,
    "pathSlug": "/CS9-Mongo-Day-3",
    "prev": {
      "frontmatter": {
        "path": "/CS9-Mongo-Day-2",
        "title": "CS9 Mongo Day 2",
        "tags": ["MongoDB", "CS9"],
        "subtitle": null,
        "chapter": null
      }
    },
    "next": {
      "frontmatter": {
        "path": "/CS9-Mongo-Day-4",
        "title": "CS9 Mongo Day 4",
        "tags": ["MongoDB", "CS9"],
        "subtitle": null,
        "chapter": null
      }
    }
  }
}
