{
  "data": {
    "markdownRemark": {
      "html": "<h2>Authentication</h2>\n<p>Verifying the identity of a user of the system - who they are.</p>\n<h2>Authorization</h2>\n<p>Verifying what in the system that user has access to - what they can do.</p>\n<h2>Starting MongoDB with Auth</h2>\n<p><code class=\"language-text\">mongod --auth</code></p>\n<p>With authentication enabled, you will not be able to do any database operations until you are authenticated. But what do you do if it's a new database and it doesn't have any users yet?</p>\n<p>Answer: There's a localhost exception! You are able to create one user which you will then be able to use to create other users (you can't create more than one).</p>\n<p>Steps:</p>\n<ol>\n<li>Switch to admin database (<code class=\"language-text\">use admin</code>)</li>\n<li>Create user <code class=\"language-text\">db.createUser({user: &#39;Username&#39;, pwd: &#39;password&#39;, roles: [{role: &#39;useAdminAnyDatabase&#39;, db: &#39;admin&#39;}]})</code></li>\n<li>Profit! (Not really - though you should now be able to run the command <code class=\"language-text\">db.system.users.find()</code> and get a response.</li>\n</ol>\n<h2>Authentication Methods</h2>\n<p>By default, shell will connect to test database but you want to authenticate with the admin database</p>\n<p><code class=\"language-text\">mongo admin -u Username -p password</code></p>\n<p>When you want to connect to a database different from where your authentication is created:\n<code class=\"language-text\">mongo -u Username -p password --authenticationDatabase=admin</code></p>\n<p>Other option:</p>\n<ol>\n<li>Connect to mongo shell <code class=\"language-text\">mongo</code></li>\n<li>Switch to admin database <code class=\"language-text\">use admin</code></li>\n<li>Authenticate <code class=\"language-text\">db.auth(&#39;Username&#39;, &#39;password&#39;)</code></li>\n</ol>\n<h3>User must authenticate against database created on</h3>\n<h2>mtools</h2>\n<p><code class=\"language-text\">mlaunch</code></p>\n<p><code class=\"language-text\">mlaunch init --sharded 3 --replicaset --nodes 3 --config 3 --auth</code></p>\n<p>mlaunch by default creates a user with the username <code class=\"language-text\">user</code> and password <code class=\"language-text\">password</code></p>\n<p>Using internal authentication automatically enables client authentication on sharded clusters</p>\n<p><code class=\"language-text\">mongod --setParameter enableLocalhostAuthBypass=false</code></p>\n<h2>X.509</h2>\n<p><code class=\"language-text\">mongod --sslMode requireSSL --sslPEMKeyFile server.pem --sslCAFile ca.pem</code></p>\n<h3>Figure out subject of client certificate</h3>\n<ul>\n<li>\n<p>client.pem</p>\n<ul>\n<li>public key</li>\n<li>private certificate</li>\n<li>subject line to see who the certificate was written to</li>\n</ul>\n</li>\n</ul>\n<p><code class=\"language-text\">openssl x509 -in client.pem -inform PEM -subject -nameopt RFC2253 -noout</code></p>\n<p>Copy that output</p>\n<p><code class=\"language-text\">mongo --ssl --sslPEMKeyFile client.pem --sslCAFile ca.pem --auth</code></p>\n<p><code class=\"language-text\">db.getSiblingDB(&#39;$external&#39;).runCommand({createUser: &#39;${subjectLine}&#39;, roles: [{role: &#39;root&#39;, db: &#39;admin&#39;}]})</code></p>\n<h2>LDAP (Lightweight Directory Access Protocol)</h2>\n<ul>\n<li>Commonly used within companies</li>\n<li>With LDAP authentication support, users can authenticate to mongoDB using their LDAP credentials</li>\n<li>MongoDB communicates to LDAP server using the saslauth proxy process.</li>\n</ul>\n<p>MongoDB uses the sasl plain mechanism for communicating with clients, sending and receiving data through plaintext. You can configure how saslauth communicates with the LDAP Server, but by default that also communicates via plaintext.</p>\n<h3>Steps to configure LDAP</h3>\n<p>Install sasl:\n<code class=\"language-text\">sudo apt-get install sasl2-bin</code></p>\n<p>Edit sasl file:\n<code class=\"language-text\">sudo vim /etc/default/saslauthd</code>\n(Sudo necessary because in /etc directory)</p>\n<ul>\n<li>change <code class=\"language-text\">START=no</code> to <code class=\"language-text\">START=yes</code></li>\n<li>change <code class=\"language-text\">MECHANISMS=&quot;pam&quot;</code> to <code class=\"language-text\">MECHANISMS=&quot;ldap&quot;</code></li>\n</ul>\n<p>Create a file called <code class=\"language-text\">sudo vim /etc/saslauthd.conf</code>.</p>\n<p>Inside that file, configure your LDAP:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">ldap_servers: ldap://localhost:389\nldap_search_base: dc=mongodb,dc=com\nldap_filter: (uid=%u)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Run the command <code class=\"language-text\">sudo ls /var/run/saslauthd/</code> to see what files are inside your sasl folder.</p>\n<p><code class=\"language-text\">mux</code> is a unix socket and is the reason why we need to use <code class=\"language-text\">sudo</code> commands in this folder.</p>\n<p>Change permissions:\n<code class=\"language-text\">sudo chmod 755 /var/run/saslauthd/</code></p>\n<p>Verify saslauthd can communicate with the LDAP server:\n<code class=\"language-text\">testsaslauthd -u User -p password -f /var/run/saslauthd/mux</code></p>\n<h2>Authentication</h2>\n<ul>\n<li>LDAP</li>\n<li>Kerberos</li>\n<li>X509</li>\n<li>SCRAM</li>\n</ul>\n<p>If you use LDAP Server for authorization, does not mean you need to use LDAP Server for authentication.</p>\n<h3>Steps of Authorization</h3>\n<ol>\n<li>\n<p>Authenticate of credentials passed to MongoDB</p>\n</li>\n<li>\n<p>Transform credentials to be able to match those set for authorization</p>\n</li>\n<li>\n<p>Validate authorization</p>\n</li>\n<li>\n<p>MongoDB will do a query to retrieve the LDAP group information</p>\n</li>\n<li>\n<p>If the query requests attributes from an entity, the attribute values will be treated as the user groups.</p>\n</li>\n<li>\n<p>If LDAP authorization is enabled, default determines that each distinguished name will be treated as the name of a role on the admin database. Roles may be created that are made of roles a user could possess.</p>\n</li>\n</ol>",
      "frontmatter": {
        "date": "2019-06-23",
        "title": "M310 - MongoDB Security",
        "chapter": null,
        "subtitle": "Part I",
        "tags": ["security", "MongoDB"],
        "path": "/M310-MongoDB-Security-Pt-1"
      }
    }
  },
  "pageContext": {
    "isCreatedByStatefulCreatePages": false,
    "pathSlug": "/M310-MongoDB-Security-Pt-1",
    "prev": {
      "frontmatter": {
        "path": "/4-Programming-Paradigms",
        "title": "4 Programming Paradigms in 40 Minutes",
        "tags": [
          "languages",
          "programming",
          "object-oriented",
          "functional",
          "logic/constraint",
          "procedural"
        ],
        "subtitle": null,
        "chapter": null
      }
    },
    "next": null
  }
}
