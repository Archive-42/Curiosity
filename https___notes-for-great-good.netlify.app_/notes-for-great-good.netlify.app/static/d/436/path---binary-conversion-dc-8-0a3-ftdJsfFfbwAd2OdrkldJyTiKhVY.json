{
  "data": {
    "markdownRemark": {
      "html": "<h3>Convert between and understand decimal, binary, and hexadecimal.</h3>\n<ul>\n<li>We've all heard that computers use binary 1s and 0s deep down, but what does that actually mean?</li>\n<li>The objective is to learn how to write down numbers in different bases (binary, decimal, hexadecimal) and how to convert between numbers in these bases both by hand and in C.</li>\n</ul>\n<h3>Numbers and Values</h3>\n<p>Values exist regardless of how we write them down.\nThere are 12 apples here:</p>\n<ul>\n<li>12 apples (decimal)</li>\n<li>1100 apples (binary)</li>\n<li>C apples (hexadecimal)</li>\n<li>The number of apples is the same -- we're just writing it in different bases (like different languages).</li>\n</ul>\n<h3>Number Bases</h3>\n<p>The number base refers to how many individual digits that number system has.</p>\n<h4>Decimal</h4>\n<p>Has 10 digits (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) so it is base 10</p>\n<h4>Binary</h4>\n<p>Has 2 digits (0, 1) so it is base 2. A binary digit is called a bit for short.</p>\n<h4>Hexadecimal</h4>\n<p>Has 16 digits (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F) so it is base 16.\nHexadecimal is often called \"hex\" for short.</p>\n<h4>Octal</h4>\n<p>Has 8 digits (0, 1, 2, 3, 4, 5, 6, 7) so it is base 8. (Not frequently used).</p>\n<h3>Terminology:</h3>\n<h4>Byte:</h4>\n<p>8 bits. Max value: 255 decimal, FF hex. Min value 0</p>\n<h4>Nibble:</h4>\n<p>4 bits. Max value: 15 decimal, F hex. Min value 0.</p>\n<h4>Octet:</h4>\n<p>Synonym for byte.</p>\n<h4>Decimal:</h4>\n<p>A base-10 numbering system, the one you already know.</p>\n<h4>Hexadecimal:</h4>\n<p>A base-16 numbering system.</p>\n<h4>Binary:</h4>\n<p>A base-2 numbering system.</p>\n<h4>Octal:</h4>\n<p>A rarely-used base-8 numbering system.</p>\n<h3>The Octal Trap:</h3>\n<p>Even though octal (base 8) is rarely used, you can specify octal numbers in many languages with a leading zero:</p>\n<p>int x = 12 // decimal\nint y = 012 // Octal, decimal value 10\nDont' pad decimal numbers with leading zeros!</p>\n<hr>\n<h3>Conversions:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">+--------128s place\n|+-------64s place\n||+------32s place\n|||+-----16s place\n||||+----8s place\n|||||+---4s place\n||||||+--2s place\n|||||||+-1s place\n||||||||\n01010110\n\n64 + 16 + 4 + 2 = 86 decimal == 1010110 binary</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">1111\n8 + 4 + 2 + 1 = 15 decimal == 1111 binary</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h4>Decimal to binary:</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">67 decimal\n1000011 binary == 67 decimal</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">33 decimal\n100001 binary == 33 decimal</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<hr>\n<p>Base 2 binary</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">0 - zero decimal\n1 - one decimal\n10 - two decimal\n11 - three decimal\n100 - four decimal</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Hexadecimal conversion:</h4>\n<p>Any number under 10 is same in decimal and hexadecimal</p>\n<p>Split up into nibbles:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">10100011\n1010 0011\n10 3\nA 3\nA3 == 10100011</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>C7 hex is what binary?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">C\n12 decimal\n1100 binary\n\n7 decimal\n0111 binary\n\nC7 hex == 11000111 binary</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Hex to decimal and decimal to hex, more mental gymnastics - might want to convert to binary as intermediate form and use that instead. Or more practically speaking, use the computer to do the calculation.</p>\n<p>Conversions in C!</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">  <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// value is 100 decimal</span>\n      <span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// value is 256 decimal</span>\n      <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span>b100<span class=\"token punctuation\">;</span> <span class=\"token comment\">// value is 4 decimal</span>\n\n      <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0x47F</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// TRUE !</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Number only really matters when you write it down - value is going to be how math is done.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">  <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n  <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span>b11000101<span class=\"token punctuation\">;</span> <span class=\"token comment\">// binary</span>\n\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d decimal\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x hex \\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// lowercase letter</span>\n      <span class=\"token comment\">// c5</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%X hex\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// uppercase letter</span>\n      <span class=\"token comment\">// C5</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">  <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n  <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%X\\n\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FF</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">  <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n  <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%X\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 255 as a hex as a string</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>No way to convert binary to string and print it out</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">  <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n  <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token string\">\"110011\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// binary</span>\n      <span class=\"token keyword\">long</span> v <span class=\"token operator\">=</span> <span class=\"token function\">strtol</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// string you want to convert, error handling,  base</span>\n\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\\n\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"F8\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hex</span>\n      <span class=\"token keyword\">long</span> v2 <span class=\"token operator\">=</span> <span class=\"token function\">strtol</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hex is base 16</span>\n\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%ld\\n\"</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Challenge:</p>\n<ul>\n<li>Count to 0x20 in hexadecimal</li>\n<li>What is 0x2F in binary?</li>\n<li>What is 0b11011 in decimal?</li>\n<li>What is 0b11100111 in hex?</li>\n<li>What is 27 in binary?</li>\n<li>Write a program that outputs a value in binary (hint: >> and &#x26;);</li>\n</ul>",
      "frontmatter": {
        "date": "2018-08-19",
        "title": "Binary Conversion",
        "chapter": null,
        "subtitle": null,
        "tags": ["binary conversion"],
        "path": "/Binary-Conversion"
      }
    }
  },
  "pageContext": {
    "isCreatedByStatefulCreatePages": false,
    "pathSlug": "/Binary-Conversion",
    "prev": {
      "frontmatter": {
        "path": "/Operating-Systems",
        "title": "Operating Systems",
        "tags": ["operating systems"],
        "subtitle": null,
        "chapter": null
      }
    },
    "next": {
      "frontmatter": {
        "path": "/Intro-to-Computer-Architecture",
        "title": "Introduction to Computer Architecture",
        "tags": ["computer architecture"],
        "subtitle": null,
        "chapter": null
      }
    }
  }
}
