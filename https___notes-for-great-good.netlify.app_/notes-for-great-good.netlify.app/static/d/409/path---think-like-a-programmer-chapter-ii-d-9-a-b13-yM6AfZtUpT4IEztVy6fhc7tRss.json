{
  "data": {
    "markdownRemark": {
      "html": "<h2>Problem: Half of a Square</h2>\n<p>Write a program that uses only two output statements, cout &#x3C;&#x3C; \"#\" and cout &#x3C;&#x3C; \"\\n\" to produce a pattern of hash symbols shaped like half of a perfect 5x5 square (or a right triangle)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#####\n####\n###\n##\n#</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Reducing the Problem</h2>\n<h3>Problem: A Square (Half of a Square Reduction):</h3>\n<p>Write a problem theat uses only two output statements, cout &#x3C;&#x3C; \"#\" and cout &#x3C;&#x3C; \"\\n\", to produce a pattern of hash symbols like a perfect 5x5 square:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#####\n#####\n#####\n#####\n#####</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> col <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Problem: A Line (Half of a Square - Further Reduction)</h3>\n<p>Write a program that ueses only two output statements, cout &#x3C;&#x3C; \"@\" and cout \"\\n\" to produce a line of five symbols.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Problem: Count Down By Counting Up</h3>\n<p>Write a line of code that goes in the desginated position in the loop in the listing below. The program redisplays the numbers 5 through 1, in that order, with each number on a separate line.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span> <span class=\"token operator\">-</span> row <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hashNum <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> hashNum <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span> <span class=\"token operator\">-</span> row<span class=\"token punctuation\">;</span> hashNum<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Problem: A Sideways Triangle</h3>\n<p>Write a program that uses only two output statements, cout &#x3C;&#x3C; \"#\" and cout &#x3C;&#x3C; \"\\n\" to produce a pattern of hash symbols shaped like a sideways triangle:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#\n\n##\n\n###\n\n####\n\n#####\n\n####\n\n###\n\n##\n\n#</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Steps:</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>List of skills and techniques from Half a Square that can be applied to the problem:</h2>\n<ul>\n<li>Display a row of symbols of a particular length using a loop</li>\n<li>Display a series of rows using nested loops</li>\n<li>Create a varying number of symbols on each row using an algebraic expression instead of a fixed value</li>\n<li>Discover the correct algebraic expression through experimentation and analysis</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>8 - row</th>\n<th>4 - row</th>\n<th>abs(4 - row)</th>\n<th>4 - abs(4 - row)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7</td>\n<td>3</td>\n<td>3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>5</td>\n<td>1</td>\n<td>1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>0</td>\n<td>0</td>\n<td>4</td>\n</tr>\n<tr>\n<td>3</td>\n<td>-1</td>\n<td>1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>-2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>1</td>\n<td>-3</td>\n<td>3</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hashNum <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> hashNum <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span> <span class=\"token operator\">-</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">-</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> hashNum<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<h2>Input Processing</h2>\n<p>Constraints: Input will be read character by character and must process each character before reading the next character. Will not store characters in a data structure.</p>\n<h2>Luhn Checksum Validation</h2>\n<p>Used for validating identification numbers.</p>\n<p>Using the original number, double the value of every other digit. Then add the values of the individual digits together. If a doubled value now has two digits, add individually. The identification number is valid if the sum is divisible by 10.</p>\n<p>Write a program that takes an identification number of arbitrary length and determines whether the number is valid under the Luhn formula. Must process each character before reading the next one.</p>\n<h3>Break Down the Problem</h3>\n<p>List of issues:</p>\n<ol>\n<li>Knowing which digits to double</li>\n<li>Treating doubled numbers greater than 10 according to their individual digits</li>\n<li>Knowing we've reached the end of the number</li>\n<li>Readcing each digit separately.</li>\n</ol>\n<h3>Tackling the Doubled Digits, 10+</h3>\n<p>What are the ranges of possible values? If you start from 0-9 and double, the max value is 18. That means if the doubled value is 10 or greater, it has to be in the range of 10 to 18, which means that the first digit is always 1.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> digit<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a single digit number, 0-9: \"</span><span class=\"token punctuation\">;</span>\ncin <span class=\"token operator\">>></span> digit<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> doubleDigit <span class=\"token operator\">=</span> digit <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>doubleDigit <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> doubleDigit <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> sum <span class=\"token operator\">=</span> doubleDigit<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Sum of digits in doubled number: \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Transformed into a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">doubleDigitValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> digit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> doubleDigit <span class=\"token operator\">=</span> digit <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>doubleDigit <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> doubleDigit <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> sum <span class=\"token operator\">=</span> doubleDigit<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Next up: How to read the number properly</h3>\n<p>If we read as a numeric type, we'd get one long number and have a lot of work on our hands. We need to ensure that we can read a character representing a digit and turn it into an integer type we can perform mathematical operations on.</p>\n<h3>If we took character value and used it as an integer expression directly:</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">char</span> digit<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a one-digit number: \"</span><span class=\"token punctuation\">;</span>\ndigit <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> digit<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Is the sum of the digits \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"? \\n\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Possible output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Enter a one-digit number: 7\nIs the sum of the digits 55?</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>This is because 7 has an ASCII value of 55.</p>\n<h3>Convert Character Digit to Integer</h3>\n<p>Write a program that reads a character from the user representing a digit, 0 through 9. Convert the character to the equivalent integer in the range 0-9, then output the integer to demonstrate the result.</p>\n<p>Like earlier when we checked the difference between original values and desired values, this is an analogous problem. There is a difference of 48 between original value and desired value. 48 is the character code in ASCII of 0, so we can use that to perform subtraction.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">char</span> digit<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a one-digit number: \"</span><span class=\"token punctuation\">;</span>\ncin <span class=\"token operator\">>></span> digit<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> digit <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Is the sum of digits \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"? \\n\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>---</h3>\n<p>Now we can move on to see what digits to double. This may take several steps to figure out, so a good chance to practice reducing. WHat if we initially limited ourselves to fixed-length numbers? That would confirm our understanding of the gheneral formula while making progress toward the ultimate goal.</p>\n<h2>Problem: Luhn Checksum Validation: Fixed-Length</h2>\n<p>Write a program that takes an identification number (including its check digit) of length six and determines whether the number is valid under the Luhn fomula. The program must process each character before reading the next one.</p>\n<h3>---</h3>\n<p>As before, we can reduce even farther to make getting started as easy as possible. What if we changed the formula so that none of the digits is doubled?</p>\n<h2>Problem: Simple Checksum Validation, Fixed-Length</h2>\n<p>Write a program that takews an identification number (including its check digit) of length six and determines whether the number is valid under a simple formula where the values of each digit are summed and the result is checked to see whether it is divisible by 10. The program must process each character before reading the next one.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">doubleDigitValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> digit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> doubleDigit <span class=\"token operator\">=</span> digit <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>doubleDigit <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> doubleDigit <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">else</span> sum <span class=\"token operator\">=</span> doubleDigit<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">char</span> digit<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> checksum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a six-digit number: \"</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> position <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> position<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   cin <span class=\"token operator\">>></span> digit<span class=\"token punctuation\">;</span>\n   checksum <span class=\"token operator\">+=</span> digit <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Checksum is \"</span> <span class=\"token operator\">&lt;&lt;</span> checksum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\". \\n\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>checksum <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Checksum is divisible by 10.  Valid \\n\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Checksum is not divisible by 10.  Invalid \\n\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>---</h3>\n<p>Now we need to add the logic for the Luhn validation formula (doubling every other digit from the right). Since we're currently only working with six-digit numbers, we need to double the digits in position one, position three, and position five counting from the left. In other words, double if position is odd. We can use the modulo operator because even numbers would be divisible by 2 with no remainder. So if position % 2 is 1, we know that the position is odd and the digit should be doubled. Note that means both doubling and summing the digits of the doubled number if it's 10 or greater. Now if we need to double, we can send the digit to the previously defined function and use the result.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">char</span> digit<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> checksum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a six-digit number: \"</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> position <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> position<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   cin <span class=\"token operator\">>></span> digit<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> checksum <span class=\"token operator\">+=</span> digit <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">else</span> checksum <span class=\"token operator\">+=</span> <span class=\"token function\">doubleDigitValue</span><span class=\"token punctuation\">(</span>digit <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Checksum is \"</span> <span class=\"token operator\">&lt;&lt;</span> checksum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\". \\n\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>checksum <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Checksum is divisible by 10.  Valid \\n\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Checksum is not divisible by 10.  Invalid \\n\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>---</h3>\n<p>To ultimately solve this problem, we need to divide and conquer. Suppose you were asked to modify the code to work with 10 or 16 digits -> you'd change the 6 to another upper bound. But validating a 7-digit number would require a modification because the number of digits is odd and we're doubling every digit starting from the second on the right, the first digit on the left is no longer doubled. In that case, even positions would need to be doubled.</p>\n<p>First issue -> how do you tell when you've reached the end of the number? Character read after the last digit varies based on operating system.</p>\n<p>Experiment:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a number: \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> digit<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    digit <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>digit<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Typing 17 into the prompt returned 49 55 10 - 49 is ASCII for 1, 55 is ASCII for 7, which means that 10 is the value we're looking for to indicate the end of a number.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">char</span> digit<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> checksum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> position <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a number with an even number of digits: \"</span><span class=\"token punctuation\">;</span>\ndigit <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>digit <span class=\"token operator\">!=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> checksum <span class=\"token operator\">+=</span> digit <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> checksum <span class=\"token operator\">+=</span> <span class=\"token function\">doubleDigitValue</span><span class=\"token punctuation\">(</span>digit <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    digit <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    position <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Checksum is \"</span> <span class=\"token operator\">&lt;&lt;</span> checksum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\". \\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>checksum <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Checksum is divisible by 10.  Valid. \\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Checksum is not divisible by 10.  Invalid. \\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Position is no longer the control variable in a for loop, so needs to be initialized and incremented separately. Loop is controlled by a conditional that checks for the character code that signals the end of the line. Because we have to have a value to check the first time we go through the loop, we have to read the first value before the loop starts and then read every other value inside the loop.</p>\n<h2>Problem: Positive or Negative</h2>\n<p>Write a program that reads 10 integers from the user. After all the numbers have been entered, the user may ask to display the count of positive numbers or the count of negative numbers.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> positiveCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> negativeCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter 10 integers: \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cin <span class=\"token operator\">>></span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> positiveCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> negativeCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">char</span> response<span class=\"token punctuation\">;</span>\ncount <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Do you want the (p)ositive or (n)egative count? \"</span><span class=\"token punctuation\">;</span>\ncin <span class=\"token operator\">>></span> response<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response <span class=\"token operator\">==</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Positive count is \"</span> <span class=\"token operator\">&lt;&lt;</span> positiveCount <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response <span class=\"token operator\">==</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">)</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Negative count is \"</span> <span class=\"token operator\">&lt;&lt;</span> negativeCount <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Keep track of running checksum both ways -- as if the ID is an odd length and as if the ID is an even length. When we get to the end of the number, we can return the appropriate checksum.</p>\n<h2>Putting the Pieces Together</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">char</span> digit<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> oddLengthChecksum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> evenLengthChecksum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> position <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a number: \"</span><span class=\"token punctuation\">;</span>\ndigit <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>digit <span class=\"token operator\">!=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        oddLengthChecksum <span class=\"token operator\">+=</span> <span class=\"token function\">doubleDigitValue</span><span class=\"token punctuation\">(</span>digit <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        evenLengthChecksum <span class=\"token operator\">+=</span> digit <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        oddLengthChecksum <span class=\"token operator\">+=</span> digit <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n        evenLengthChecksum <span class=\"token operator\">+=</span> <span class=\"token function\">doubleDigitValue</span><span class=\"token punctuation\">(</span>digit <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    digit <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    position<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> checksum<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> checksum <span class=\"token operator\">=</span> evenLengthChecksum<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> checksum <span class=\"token operator\">=</span> oddLengthChecksum<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Checksum is \"</span> <span class=\"token operator\">&lt;&lt;</span> checksum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\". \\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>checksum <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Checksum is divisible by 10.  Valid. \\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Checksum is not divisible by 10.  Invalid. \\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Could have used (position % 2 == 1) but it's more confusing to read - better to say \"if position - 1 is even, use the even checksum\" than it is to say \"If position is odd, use the even checksum\".</p>\n<p>It is always better to take more steps than to try to do too much at once, even if some steps seem trivial.</p>\n<hr>\n<h2>Problem: Decode a Message</h2>\n<p>A message has been encoded as a text stream that is to be read character by character. The stream contains a series of comma-delimited integers, each a positive number capable of being represented by a C++ int. However, the character represented by a particular integer depends on the current decoding mode. There are three modes: uppercase, lowercase, and punctuation.</p>\n<p>In uppercase mode, each integer represents an uppercase letter: The integer modulo 27 indicates the letter of the alphabet (where 1 = A and so on). So an input value of 143 in uppercase mode would yield the letter H because 143 module 27 is 8 and H is the eighth letter in the alphabet.</p>\n<p>The lowercase mode works the same but with lowercase letters; the remainder of dividing the integer by 27 represents the lowercase letter (1 = a and so on). So an input value of 56 in lowercase mode would yield b because 56 modulo 27 is 2 and b is the second letter of the alphabet.</p>\n<p>In punctuation mode, the integer is instead considered modulo 9, with the interpretation given by Table 2-3 below. So 19 would yield an exclamation point because 19 modulo 9 is 1.</p>\n<p>At the beginning of each message, the decoding mode is uppercase ltters. Each time the modulo operation (by 27 or 9 depending on mode) results in 0, the decoding mode switches. If the current mode is uppercase, the mode switches to lowercase letters. If the current mode is lowercase, the mode switches to punctuation, and if the current mode is punctuation, it switches back to uppercase.</p>\n<h4>Table 2-3: Punctuation Decoding Mode</h4>\n<table>\n<thead>\n<tr>\n<th>Number</th>\n<th>Symbol</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>!</td>\n</tr>\n<tr>\n<td>2</td>\n<td>?</td>\n</tr>\n<tr>\n<td>3</td>\n<td>,</td>\n</tr>\n<tr>\n<td>4</td>\n<td>.</td>\n</tr>\n<tr>\n<td>5</td>\n<td>(space)</td>\n</tr>\n<tr>\n<td>6</td>\n<td>;</td>\n</tr>\n<tr>\n<td>7</td>\n<td>\"</td>\n</tr>\n<tr>\n<td>8</td>\n<td>'</td>\n</tr>\n</tbody>\n</table>\n<h4>My Notes on Problem - Restate Problem with Constraints</h4>\n<ol>\n<li>Read a text stream character by character</li>\n<li>Characters are separated by commas</li>\n<li>Program starts in Uppercase decode mode</li>\n<li>Start decoding characters by performing modulo 27 and using corresponding letter - 1 = A, etc.</li>\n<li>If integer modulo 27 == 0, switch to Lowercase decode mode</li>\n<li>Continue processing characters using modulo 27, though now letters are in lowercase</li>\n<li>If modulo 27 == 0, switch to Punctuation decode mode</li>\n<li>Continue decoding, but now perform modulo 9 and consult Table 2-3 to find the punctuation mark the character represents</li>\n<li>If int modulo 9 == 0, switch decode mode to Uppercase</li>\n<li>Repeat until out of characters to decode (end of line)</li>\n</ol>\n<h4>Notes from Book:</h4>\n<ol>\n<li>Read character by character until you reach the end of the line</li>\n<li>Convert a series of characters representing a number to an integer</li>\n<li>Convert an integer 1-26 to an uppercase character</li>\n<li>Convert an integer 1-26 to a lowercase character</li>\n<li>Convert an integer 1-8 into a punctuation symbol based on Table 2-3.</li>\n<li>Tracking a decoding mode</li>\n</ol>\n<h4>Example of the process</h4>\n<p>Original input: 18, 12312, 171, 763, 98423, 1208, 216, 11, 500, 18, 241, 0, 32, 20620, 27, 10</p>\n<table>\n<thead>\n<tr>\n<th>(a)</th>\n<th>(b)</th>\n<th>(c)</th>\n<th>(d)</th>\n<th>(e)</th>\n<th>(f)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>18</td>\n<td>(U)</td>\n<td>27</td>\n<td>18</td>\n<td>R</td>\n<td></td>\n</tr>\n<tr>\n<td>12312</td>\n<td>(U)</td>\n<td>27</td>\n<td>0</td>\n<td>→</td>\n<td>(L)</td>\n</tr>\n<tr>\n<td>171</td>\n<td>(L)</td>\n<td>27</td>\n<td>6</td>\n<td>i</td>\n<td></td>\n</tr>\n<tr>\n<td>763</td>\n<td>(L)</td>\n<td>27</td>\n<td>7</td>\n<td>g</td>\n<td></td>\n</tr>\n<tr>\n<td>98423</td>\n<td>(L)</td>\n<td>27</td>\n<td>8</td>\n<td>h</td>\n<td></td>\n</tr>\n<tr>\n<td>1208</td>\n<td>(L)</td>\n<td>27</td>\n<td>20</td>\n<td>t</td>\n<td></td>\n</tr>\n<tr>\n<td>216</td>\n<td>(L)</td>\n<td>27</td>\n<td>0</td>\n<td>→</td>\n<td>(P)</td>\n</tr>\n<tr>\n<td>11</td>\n<td>(P)</td>\n<td>9</td>\n<td>2</td>\n<td>?</td>\n<td></td>\n</tr>\n<tr>\n<td>500</td>\n<td>(P)</td>\n<td>9</td>\n<td>5</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>18</td>\n<td>(P)</td>\n<td>9</td>\n<td>0</td>\n<td>→</td>\n<td>(U)</td>\n</tr>\n<tr>\n<td>241</td>\n<td>(U)</td>\n<td>27</td>\n<td>25</td>\n<td>Y</td>\n<td></td>\n</tr>\n<tr>\n<td>0</td>\n<td>(U)</td>\n<td>27</td>\n<td>0</td>\n<td>→</td>\n<td>(L)</td>\n</tr>\n<tr>\n<td>32</td>\n<td>(L)</td>\n<td>27</td>\n<td>5</td>\n<td>e</td>\n<td></td>\n</tr>\n<tr>\n<td>20620</td>\n<td>(L)</td>\n<td>27</td>\n<td>19</td>\n<td>s</td>\n<td></td>\n</tr>\n<tr>\n<td>27</td>\n<td>(L)</td>\n<td>27</td>\n<td>0</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>10</td>\n<td>(P)</td>\n<td>9</td>\n<td>1</td>\n<td>!</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>a) Current number in the input</p>\n<p>b) Current mode</p>\n<p>c) Divisor for the current mode</p>\n<p>d) Remainder</p>\n<p>e) Decoded character or arrow pointing to new mode</p>\n<p>f) Mode switching to</p>\n<p>We already know how to read character by character until we reach the end of the line because we did that with the Luhn Checksum problem - reading character by character until we come across the ASCII value for end-of-line (10).</p>\n<h3>Convert a series of characters representing a number to an integer</h3>\n<p>We know how to convert 0-9, but how do we extend that to apply to multidigit numbers?</p>\n<p>Consider a two-diigit numbr. In a two-digit number, the first digit is the tens digit so you can multiply by 10 and then add that to the second digit (ones place).</p>\n<p>Example: 35 would be integers 3 and 5 and overall integer would be computed by 3 * 10 + 5</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a two-digit number: \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> digitChar1 <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> digitChar2 <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> digit1 <span class=\"token operator\">=</span> digitChar1 <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> digit2 <span class=\"token operator\">=</span> digitChar2 <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> overallNumber <span class=\"token operator\">=</span> digit1 <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> digit2<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"That number as an integer: \"</span> <span class=\"token operator\">&lt;&lt;</span> overallNumber <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>While the above code works, it won't be very useful in extending past two-digit numbers because we would exponentially increase the number of variables necessary to accomplish the task. We need to reduce:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a two-digit number: \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> digitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> overallNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\ndigitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noverallNumber <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"That number as an integer: \"</span> <span class=\"token operator\">&lt;&lt;</span> overallNumber <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>How do we know which multiplier to use for each digit before adding to the running total?</p>\n<h3>Problem: Reading a Number with 3 or 4 Digits:</h3>\n<p>Write a program to read a number character by character and convert it to an integer, using just one char variable and one int variable. The number will have either 3 or 4 digits.</p>\n<h3>Problem: Reading a Number with 3 or 4 Digits, Further Simplified:</h3>\n<p>Write a program to read a number character by character and convert it to an integer, using just one char variable and two int variables. The number will have either 3 or 4 digits.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a three-digit or four-digit number: \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> digitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> threeDigitNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> fourDigitNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\ndigitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nthreeDigitNum <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nfourDigitNum <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\ndigitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nthreeDigitNum <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfourDigitNum <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\ndigitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Number entered: \"</span> <span class=\"token operator\">&lt;&lt;</span> threeDigitNum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    fourDigitNum <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Number entered: \"</span> <span class=\"token operator\">&lt;&lt;</span> fourDigitNum <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In general, since the multiplers for fourDigitNum are 10 times those of threeDigitNum, the former would always be 10 times the latter.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a three-digit or four-digit number: \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> digitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\ndigitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumber <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\ndigitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumber <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndigitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Number entered: \"</span> <span class=\"token operator\">&lt;&lt;</span> number <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    number <span class=\"token operator\">=</span> number <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Number entered: \"</span> <span class=\"token operator\">&lt;&lt;</span> number <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now we have an exploitable pattern.</p>\n<p>To extend to use 5-digit values, you would repeat the process for reading the fourth character instead of displaying the result immediately -> Read the 5th character, check to see if it's an end-of-line. If so, display previous computed number. If not, multiply the computed number by 10 and add the current character to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a number with three, four, or five digits: \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> digitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\ndigitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumber <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\ndigitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnumber <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndigitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Number entered: \"</span> <span class=\"token operator\">&lt;&lt;</span> number <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    number <span class=\"token operator\">=</span> number <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    digitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Number enetered: \"</span> <span class=\"token operator\">&lt;&lt;</span> number <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        number <span class=\"token operator\">=</span> number <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Number entered: \"</span> <span class=\"token operator\">&lt;&lt;</span> number <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Pattern: if the next value is a digit, multiply the running total by 10 before adding the integer digit value of the character.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a number with as many digits as you please: \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> digitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndigitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">!=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    number <span class=\"token operator\">=</span> number <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    digitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Number entered: \"</span> <span class=\"token operator\">&lt;&lt;</span> number <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h5>Explanation (Given input: 12356)</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Outside while loop:\nFirst pass:         number = (digitChar - &#39;0&#39;)\n                    digitChar - &#39;0&#39; = 1\n                    number = 1\n\nInside while loop:\nSecond pass:        number = number * 10 + (digit - &#39;0&#39;)\n                    digitChar - &#39;0&#39; = 2\n                    number = 12 (1 * 10 + 2)\n\nThird pass:         number = number * 10 + (digit - &#39;0&#39;)\n                    digitChar - &#39;0&#39; = 3\n                    number = 123 (12 * 10 + 3)\n\nFourth pass:        number = number * 10 + (digit - &#39;0&#39;)\n                    digitChar - &#39;0&#39; = 5\n                    number = 1235 (123 * 10 + 5)\n\nFifth pass:         number = number * 10 + (digit - &#39;0&#39;)\n                    digitChar - &#39;0&#39; = 6\n                    number = 12356 (1235 * 10 + 6)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This handles the conversion of one series of characters, but the main problem is going to be working with a list of comma-separated characters.</p>\n<p>For 101, 22[EOL] (end of line), we would need to check for either a comma or the end of the line, then place code that processes one number inside a larger loop that continues until all values are read. The inner loop should stop for EOL and commas. The outer loop should only stop for EOL.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a number: \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> digitChar<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    digitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    digitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">!=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">!=</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        number <span class=\"token operator\">=</span> number <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        digitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Number entered: \"</span> <span class=\"token operator\">&lt;&lt;</span> number <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">!=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Note: Remember not to include spaces when entering values.</p>\n<h4>Now we can focus on processing individual numbers!</h4>\n<p>Converting a number 1-26 to a letter A-Z. This is like the opposite of what we did to get the individual digit characters to their integer equivalents. If we subtract the character code '0' to translate from 0-9 character range to 0-9 integer range, we should be able to add a character code to translate from 1-26 to A-Z. What if we add 'A'?</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a number 1-26: \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\ncin <span class=\"token operator\">>></span> number<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> outputCharacter<span class=\"token punctuation\">;</span>\noutputCharacter <span class=\"token operator\">=</span> number <span class=\"token operator\">+</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Equivalent symbol: \"</span> <span class=\"token operator\">&lt;&lt;</span> outputCharacter <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This results in an off-by-one error - namely, 1 gives you B, 2 gives you C, etc. So what you really need is number + 'A' - 1;</p>\n<h4>Convert 1-26 to A-Z:</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a number 1-26: \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\ncin <span class=\"token operator\">>></span> number<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> outputCharacter<span class=\"token punctuation\">;</span>\noutputCharacter <span class=\"token operator\">=</span> number <span class=\"token operator\">+</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Equivalent symbol: \"</span> <span class=\"token operator\">&lt;&lt;</span> outputCharacter <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Convert 1-26 to a-z:</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a number 1-26: \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\ncin <span class=\"token operator\">>></span> number<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> outputCharacter<span class=\"token punctuation\">;</span>\noutputCharacter <span class=\"token operator\">=</span> number <span class=\"token operator\">+</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Equivalent symbol: \"</span> <span class=\"token operator\">&lt;&lt;</span> outputCharacter <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Punctuation</h4>\n<p>Punctuation is harder because it's not in ASCII order and so can't be translated dynamically. Instead, a brute force method is required:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a number 1-8: \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\ncin <span class=\"token operator\">>></span> number<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> outputCharacter<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">','</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">';'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'\\''</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Equivalent symbol: \"</span> <span class=\"token operator\">&lt;&lt;</span> outputCharacter <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Switching Modes</h4>\n<p>We need a variable to store the current mode. It could be an integer, but it's more readable as an enumeration. Rule of thumb: If a variable is only tracking state and there is no inherent meaning to any particular value, an enumeration is a good idea. Enum allows us to know what the mode is without having to decode it (as we would have to if it were an arbitrary value to represent each mode).</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">modeType</span> <span class=\"token punctuation\">{</span>UPPERCASE<span class=\"token punctuation\">,</span> LOWERCASE<span class=\"token punctuation\">,</span> PUNCTUATION<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\nmodeType mode <span class=\"token operator\">=</span> UPPERCASE<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter some numbers ending with -1. \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    cin <span class=\"token operator\">>></span> number<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Number read: \"</span> <span class=\"token operator\">&lt;&lt;</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> UPPERCASE<span class=\"token operator\">:</span>\n            number <span class=\"token operator\">=</span> number <span class=\"token operator\">%</span> <span class=\"token number\">27</span><span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\". Modulo 27.\"</span> <span class=\"token operator\">&lt;&lt;</span> number <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\". \"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Switch to Lowercase\"</span><span class=\"token punctuation\">;</span>\n                mode <span class=\"token operator\">=</span> LOWERCASE<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> LOWERCASE<span class=\"token operator\">:</span>\n            number <span class=\"token operator\">=</span> number <span class=\"token operator\">%</span> <span class=\"token number\">27</span><span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\". Modulo 27 \"</span> <span class=\"token operator\">&lt;&lt;</span> number <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\". \"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Switch to Punctuation\"</span><span class=\"token punctuation\">;</span>\n                mode <span class=\"token operator\">=</span> PUNCTUATION<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> PUNCTUATION<span class=\"token operator\">:</span>\n            number <span class=\"token operator\">=</span> number <span class=\"token operator\">%</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\". Modulo 9: \"</span> <span class=\"token operator\">&lt;&lt;</span> number <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\". \"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Switch to Uppercase.\"</span><span class=\"token punctuation\">;</span>\n                mode <span class=\"token operator\">=</span> UPPERCASE<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Putting it all Together</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">char</span> outputCharacter<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">modeType</span> <span class=\"token punctuation\">{</span>UPPERCASE<span class=\"token punctuation\">,</span> LOWERCASE<span class=\"token punctuation\">,</span> PUNCTUATION<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmodeType mode <span class=\"token operator\">=</span> UPPERCASE<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> digitChar<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter numbers to decode: \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    digitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    digitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">!=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">!=</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        number <span class=\"token operator\">=</span> number <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        digitChar <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> UPPERCASE<span class=\"token operator\">:</span>\n            number <span class=\"token operator\">=</span> number <span class=\"token operator\">%</span> <span class=\"token number\">27</span><span class=\"token punctuation\">;</span>\n            outputCharacter <span class=\"token operator\">=</span> number <span class=\"token operator\">+</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mode <span class=\"token operator\">=</span> LOWERCASE<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> LOWERCASE<span class=\"token operator\">:</span>\n            number <span class=\"token operator\">=</span> number <span class=\"token operator\">%</span> <span class=\"token number\">27</span><span class=\"token punctuation\">;</span>\n            outputCharacter <span class=\"token operator\">=</span> number <span class=\"token operator\">+</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mode <span class=\"token operator\">=</span> PUNCTUATION<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> PUNCTUATION<span class=\"token operator\">:</span>\n            number <span class=\"token operator\">=</span> number <span class=\"token operator\">%</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">','</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">';'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span> outputCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'\\''</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mode <span class=\"token operator\">=</span> UPPERCASE<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> outputCharacter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>digitChar <span class=\"token operator\">!=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<h2>2.1</h2>\n<p>Using only single character output statements that output a hash mark, space, or end of line, write a program that produces the following shape:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">########\n ######\n  ####\n   ##</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>2.2</h2>\n<p>Using only single character output statements that output a hash mark, space, or end of line, write a program that produces the following shape:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">   ##\n  ####\n ######\n########\n########\n ######\n  ####\n   ##</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>2.3</h2>\n<p>Using only single character output statements that output a hash mark, space, or end of line, write a program that produces the following shape:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#            #\n ##        ##\n  ###    ###\n   ########\n   ########\n  ###    ###\n ##        ##\n#            #</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>2-4</h2>\n<p>Design a pattern and see if you can code it.</p>\n<h2>2-5</h2>\n<p>If you like the Luhn formula, you can try writing a program for a different check-digit system, like the 13-digit ISBN system. The program could take an identification number and verify it or take a number without a check digit and generate the check digit.</p>\n<h2>2-6</h2>\n<p>If you've learned about binary numbers and how to convert from decimal for binary and the reverse, try writing programs to do those conversions with unlimited length numbers (but you can assume they are small enough to still be stored in an int).</p>\n<h2>2-7</h2>\n<p>Have you learned about hexadecimal? Try writing a program that lets the user specify an input in binary, decimal, or hexadecimal and output in each of the three.</p>\n<h2>2-8</h2>\n<p>Want an extra challenge? Generalize the code for the previous exercise to make a program that converts from any number base-16 or less to any other number base. (Ex: Base-9 to Base-4).</p>\n<h2>2-9</h2>\n<p>Write a program that reads a line of text, counting the number of words, identifying the length of the longest word, and greatest number of vowels in a word and/or any other statistics you can think of.</p>",
      "frontmatter": {
        "date": "2018-11-29",
        "title": "Think Like a Programmer:",
        "chapter": "Chapter Two",
        "subtitle": "Pure Puzzles",
        "tags": ["problem solving", "Think Like a Programmer"],
        "path": "/Think-Like-a-Programmer-Chapter-II"
      }
    }
  },
  "pageContext": {
    "isCreatedByStatefulCreatePages": false,
    "pathSlug": "/Think-Like-a-Programmer-Chapter-II",
    "prev": {
      "frontmatter": {
        "path": "/Think-Like-a-Programmer-Chapter-I",
        "title": "Think Like a Programmer:",
        "tags": ["problem solving", "Think Like a Programmer"],
        "subtitle": "Strategies for Problem Solving",
        "chapter": "Chapter One"
      }
    },
    "next": {
      "frontmatter": {
        "path": "/Think-Like-a-Programmer-Chapter-III",
        "title": "Think Like a Programmer:",
        "tags": ["problem solving", "Think Like a Programmer"],
        "subtitle": "Solving Problems with Arrays",
        "chapter": "Chapter Three"
      }
    }
  }
}
