{
  "data": {
    "markdownRemark": {
      "html": "<h1>A Tour of Go</h1>\n<h2>Packages, Variables, and Functions</h2>\n<h3>Packages</h3>\n<p>Every Go program is made up of packages and programs start running in package <code class=\"language-text\">main</code>.</p>\n<h3>Imports</h3>\n<p>You can import multiple packages by \"factoring\" them (grouping them together):</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"math/rand\"</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>You can also import packages by writing multiple import statements, but it's good style to use the factored import statement.</p>\n<h3>Exported names</h3>\n<p>A name is exported if capitalized. When importing a package, you can only refer to its exported names. Unexported names are inaccessible from outside the package.</p>\n<h3>Functions</h3>\n<p>Functions can take multiple arguments (or none) and can return any number of results.</p>\n<p>Types of arguments are given after the name of the parameter</p>\n<p>If there are multiple arguments of the same type, the type can be given on the last parameter.</p>\n<h3>Named return values</h3>\n<p>Go's return variables can be named and if they are, tey're treated as variables declared at the top of the function.</p>\n<p>A return statement without arguments returns the named return values - this is known as a “naked return statement”</p>\n<h3>Variables</h3>\n<p>The keyword <code class=\"language-text\">var</code> declares a list of variables and can be used at the package or function level.</p>\n<p>A <code class=\"language-text\">var</code> declaration can include initializers (one per variable)</p>\n<p>If an initializer is present, the type can be omitted - the variable takes the type of the initializer</p>\n<h3>Short variable declarations</h3>\n<p>Inside a function, the <code class=\"language-text\">:=</code> short assignment can be used in place of a <code class=\"language-text\">var</code>declaration</p>\n<p>Outside of a function, the <code class=\"language-text\">:=</code> construct is not available</p>\n<h3>Basic types:</h3>\n<ul>\n<li>bool</li>\n<li>string</li>\n<li>int int8 int16 int32 int64</li>\n<li>uint uint8 uint16 uint32 uint64 uintptr</li>\n<li>byte // alias for uint8</li>\n<li>rune // alias for int32 - represents a Unicode code point</li>\n<li>float32 float64</li>\n<li>complex64 complex128</li>\n</ul>\n<p>You should use <code class=\"language-text\">int</code> unless you have a specific reason to use a sized or unsigned integer type.</p>\n<p>Import statements and variable declarations can be “factored” into blocks</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t“fmt\"\n\t“math<span class=\"token operator\">/</span>cmplx”\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tToBe \t<span class=\"token builtin\">bool</span>\t\t\t<span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\tMaxInt \t<span class=\"token builtin\">uint64</span>\t\t<span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">64</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\tz\t\t<span class=\"token builtin\">complex128</span>\t<span class=\"token operator\">=</span> <span class=\"token builtin\">complex</span><span class=\"token punctuation\">.</span><span class=\"token function\">Sqrt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">12i</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>“Type<span class=\"token punctuation\">:</span> <span class=\"token operator\">%</span>T Value<span class=\"token punctuation\">:</span> <span class=\"token operator\">%</span>v\\n”<span class=\"token punctuation\">,</span> ToBe<span class=\"token punctuation\">,</span> ToBe<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>“Type<span class=\"token punctuation\">:</span> <span class=\"token operator\">%</span>T Value<span class=\"token punctuation\">:</span> <span class=\"token operator\">%</span>v\\n”<span class=\"token punctuation\">,</span> MaxInt<span class=\"token punctuation\">,</span> MaxInt<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>“Type<span class=\"token punctuation\">:</span> <span class=\"token operator\">%</span>T Value<span class=\"token punctuation\">:</span> <span class=\"token operator\">%</span>v\\n”<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Zero Values</h3>\n<p>Variables declared without an explicit initial value are given their “zero value”:</p>\n<ul>\n<li>0 for numeric types</li>\n<li>false for boolean type</li>\n<li>“” (empty string) for strings</li>\n</ul>\n<h3>Type conversions</h3>\n<p>The expression <code class=\"language-text\">T(v)</code> converts the value v to the type T</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">var</span> I <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\n<span class=\"token keyword\">var</span> f <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> u <span class=\"token builtin\">uint</span> <span class=\"token operator\">=</span> <span class=\"token function\">uint</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n\ni<span class=\"token operator\">:=</span> <span class=\"token number\">42</span>\nf<span class=\"token operator\">:=</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\nu<span class=\"token operator\">:=</span><span class=\"token function\">uint</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Assignment between items of different types requires an explicit conversion</p>\n<p>When the right hand side of the assignment contains an untyped numeric constant, the new variable may be an int, float64, or complex128 depending on the precision of the constant</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\">i<span class=\"token operator\">:=</span> <span class=\"token number\">42</span> <span class=\"token comment\">// int</span>\nf <span class=\"token operator\">:=</span> <span class=\"token number\">3.142</span> <span class=\"token comment\">// float64</span>\ng <span class=\"token operator\">:=</span> <span class=\"token number\">0.867</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5i</span> <span class=\"token comment\">// complex128</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>Constants</h3>\n<p>Constants can be character, string, boolean, or numeric values</p>\n<p>Constants cannot be declared using the := short syntax</p>\n<p>Constants are declared like variables but with the const keyword</p>\n<h3>Numeric Constants</h3>\n<p>Numeric constants are high precision values - an untyped constant takes the type needed by its context. An int can store at maximum a 64-bit integer (sometimes less)</p>\n<hr>\n<h2>Flow Control Statements: For, If, Else, Switch, and Defer</h2>\n<h3>For</h3>\n<p>Go only has one looping construct - the <code class=\"language-text\">for</code> loop.</p>\n<h6>Basic for loop has three components separated by semicolons:</h6>\n<ul>\n<li>init statement - executed before the first iteration</li>\n<li>condition expression - evaluated before every iteration</li>\n<li>post statement - executed at the end of every iteration</li>\n</ul>\n<p>Variables declared in the init statement are visible only in the scope of the <code class=\"language-text\">for</code> statement. The loop will stop iterating once the boolean condition evaluates to false.</p>\n<ul>\n<li>There are no parentheses surrounding the three components of the for statement and braces are always required</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sum<span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> I <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> I <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> I<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Init and post statements are optional in a for loop</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sum<span class=\"token operator\">:=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">;</span> sum <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> sum\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>You can even drop the semicolons!</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sum <span class=\"token operator\">:=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> sum <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> sum\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If you omit the loop condition, it runs forever!</p>\n<h3>If</h3>\n<p>Like for loops, parentheses are not needed for if statements but the braces are required.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> “i\"\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprint</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">Sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>If</h3>\n<p>Like <code class=\"language-text\">for</code>, <code class=\"language-text\">if</code> statements can also start with a short statement to execute before the condition. Variables declared by that statement are only in scope until the end of the <code class=\"language-text\">if</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">po</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> lim <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> v<span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> lim <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> v\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> lim\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Variables declared inside an if short statement are available inside any of the else blocks.</p>\n<h3>Switch</h3>\n<p>A <code class=\"language-text\">switch</code> statement is a shorter way to write a sequence of if-else statements. Unlike languages like C, Go runs the first case whose value is equal to the condition expression, as though there were a break after every case.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>“Go runs on “<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">switch</span> os <span class=\"token operator\">:=</span> runtime<span class=\"token punctuation\">.</span>GOOS<span class=\"token punctuation\">;</span> os <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> “darwin”<span class=\"token punctuation\">:</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>“OS X<span class=\"token punctuation\">.</span>”<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> “linux” <span class=\"token punctuation\">:</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>“Linux<span class=\"token punctuation\">.</span>”<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>“<span class=\"token operator\">%</span>s<span class=\"token punctuation\">.</span>”<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Switch cases evaluate from top to bottom, stopping when a case succeeds.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">switch</span> i <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// does not call f if i==0</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>A <code class=\"language-text\">switch</code> without a condition is the same as <code class=\"language-text\">switch true</code> - can be a clean way to write long if-then-else chains</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    t<span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Hour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">:</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>“Good morning<span class=\"token operator\">!</span>”<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Hour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">17</span><span class=\"token punctuation\">:</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>“Good afternoon<span class=\"token punctuation\">.</span>”<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>“Good evening<span class=\"token punctuation\">.</span>”<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Defer</h3>\n<p>A defer statement defers execution of a function until the surrounding function returns. The arguments of the deferred function’s call get evaluated immediately, but the function call is not executed until the surrounding function returns.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>“world”<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>“hello”<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Deferred function calls are pushed onto a stack and are executed in last-in-first-out</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>“counting”\n    <span class=\"token keyword\">for</span> I<span class=\"token operator\">:=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> I <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> I<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>I<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>“done”<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>",
      "frontmatter": {
        "date": "2019-03-04",
        "title": "A Tour Of Go",
        "chapter": null,
        "subtitle": "Basics I & II",
        "tags": ["Go"],
        "path": "/A-Tour-Of-Go"
      }
    }
  },
  "pageContext": {
    "isCreatedByStatefulCreatePages": false,
    "pathSlug": "/A-Tour-Of-Go",
    "prev": {
      "frontmatter": {
        "path": "/Computer-Science-Distilled-Chapter-II",
        "title": "Computer Science Distilled",
        "tags": [
          "computer science",
          "Computer Science Distilled",
          "Big O Notation",
          "time complexity",
          "space complexity"
        ],
        "subtitle": "Complexity",
        "chapter": "Chapter Two"
      }
    },
    "next": {
      "frontmatter": {
        "path": "/Cracking-The-Coding-Interview--Technical-Interviews",
        "title": "Cracking the Coding Interview",
        "tags": [
          "Cracking the Coding Interview",
          "technical interviews",
          "algorithms",
          "data structures"
        ],
        "subtitle": "Technical Interviews",
        "chapter": "Chapter 7"
      }
    }
  }
}
