{
  "data": {
    "markdownRemark": {
      "html": "<h1>4 Programming Padigms in 40 Minutes</h1>\n<p><a href=\"https://www.youtube.com/watch?v=cgVVZMfLjEI\">Link to Youtube video</a></p>\n<h2>Object-Oriented (Ruby)</h2>\n<ul>\n<li>Everything is an object</li>\n</ul>\n<p><strong>Object:</strong> A way to encapsulate state and behavior. </p>\n<p><strong>State:</strong> Fields, instance variables, etc.\nBehavior: What you do with state (methods, etc)</p>\n<p>Objects are responsible for manipulating internal state.</p>\n<p>Objects interact with each other</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BankAccount</span>\n    attr_reader <span class=\"token symbol\">:balance</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span>\n        <span class=\"token variable\">@balance</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">deposit</span></span> amount\n        <span class=\"token variable\">@balance</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> amount\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">withdraw</span></span> amount\n        <span class=\"token variable\">@balance</span> <span class=\"token operator\">-</span><span class=\"token operator\">=</span> amount\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Strengths</h4>\n<ul>\n<li>Good at modeling real-life things</li>\n<li>Reusability</li>\n<li>Ease of testing</li>\n</ul>\n<h4>Example (Making Change)</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ruby line-numbers\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CashRegister</span>\n    attr_reader <span class=\"token symbol\">:drawer</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span>\n        <span class=\"token variable\">@drawer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n                     <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_change</span></span> owed<span class=\"token punctuation\">,</span> tendered\n        difference <span class=\"token operator\">=</span> tendered <span class=\"token operator\">-</span> owed\n\n        change <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        denomination <span class=\"token operator\">=</span> <span class=\"token variable\">@drawer</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">while</span> difference <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">do</span>\n            <span class=\"token keyword\">if</span> difference <span class=\"token operator\">&lt;</span> denomination\n                i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n                denomination <span class=\"token operator\">=</span> <span class=\"token variable\">@drawer</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">next</span>\n            <span class=\"token keyword\">end</span>\n\n            change <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> denomination\n            difference <span class=\"token operator\">-</span><span class=\"token operator\">=</span> denomination\n        <span class=\"token keyword\">end</span>\n\n        change\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Functional (Racket)</h2>\n<p>Functions take in data and output data</p>\n<p>Pure functional - functions don't store state and don't mutate incoming data</p>\n<p>Data and procedures are separated</p>\n<p>Infix vs. Prefix:</p>\n<ul>\n<li>Infix: 1 * 2 * 3</li>\n<li>Prefix: * 1 2 3</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-racket line-numbers\"><code class=\"language-racket\">(define (square n)\n    (* n n))\n\n(square 5)\n    25</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-racket line-numbers\"><code class=\"language-racket\">(define (abs x)\n    (cond\n        ((&gt; x 0)\n        x)\n        ((= x 0)\n        0)\n        (else\n            (- x))))</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Lists in racket:</p>\n<ul>\n<li>Represented as set of items separated by spaces in parentheses with a tick in front to separate from function call</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-racket line-numbers\"><code class=\"language-racket\">&#39;(1 2 3)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-racket line-numbers\"><code class=\"language-racket\">(car &#39;(1 2 3))\n1\n(cdr &#39;(1 2 3))\n&#39;(2 3)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-racket line-numbers\"><code class=\"language-racket\">(cons &#39;1 &#39;(2 3))\n&#39;(1 2 3)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-racket line-numbers\"><code class=\"language-racket\">(define (fact n)\n    (cond\n        ((&lt;= n 1)\n            1)\n        (else\n            (* n (fact (- n 1))))))</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-racket line-numbers\"><code class=\"language-racket\">(define (fib n)\n    (cond ((&lt;= n 0)\n        0)\n          ((= n 1)\n            1)\n        (else\n            (+\n                (fib (- n 1))\n                (fib (- n 2))))))</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Strengths</h4>\n<ul>\n<li>\n<p>Don't have to worry about concurrency and threading because everything is a read operation</p>\n</li>\n<li>\n<p>Easier to test because state doesn't matter</p>\n</li>\n<li>\n<p>Reusability</p>\n</li>\n<li>\n<p>Brevity</p>\n</li>\n</ul>\n<h4>Example (Making Change)</h4>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-racket line-numbers\"><code class=\"language-racket\">(define (make-change x denoms)\n    (cond\n        ((= x 0)\n            &#39;())\n        ((empty? denoms)\n            false)\n        ((&lt; x (car denoms))\n            (make-change x (cdr denoms)))\n        (else\n            (cons (car denoms) \n                  (make-change (- x (car denoms)) denoms)))))</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Logic/Constraint (Prolog)</h2>\n<p>Formal Logic (like in philosophy/math)</p>\n<p>Prolog functions are made up of facts and clauses</p>\n<p>Describe the what of the situation, not how</p>\n<h4>Syntax</h4>\n<p>Variables start with capital</p>\n<p>Constants start lowercase</p>\n<p>Facts end with period</p>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-prolog line-numbers\"><code class=\"language-prolog\"><span class=\"token function\">state</span><span class=\"token punctuation\">(</span>washington<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n<span class=\"token function\">border</span><span class=\"token punctuation\">(</span>washington<span class=\"token punctuation\">,</span> oregon<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n<span class=\"token function\">border</span><span class=\"token punctuation\">(</span>washington<span class=\"token punctuation\">,</span> idaho<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n<span class=\"token function\">border</span><span class=\"token punctuation\">(</span>oregon<span class=\"token punctuation\">,</span> california<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Rules specify relationships between facts:</p>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-prolog line-numbers\"><code class=\"language-prolog\"><span class=\"token function\">adjacent</span><span class=\"token punctuation\">(</span><span class=\"token variable\">X</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:-</span> <span class=\"token function\">border</span><span class=\"token punctuation\">(</span><span class=\"token variable\">X</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Y</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><code class=\"language-text\">:-</code> is a logical implication</p>\n<p>Pattern matching!</p>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-prolog line-numbers\"><code class=\"language-prolog\"><span class=\"token function\">border</span><span class=\"token punctuation\">(</span>washington<span class=\"token punctuation\">,</span> oregon<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n<span class=\"token function\">border</span><span class=\"token punctuation\">(</span>washington<span class=\"token punctuation\">,</span> idaho<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n\n<span class=\"token function\">adjacent</span><span class=\"token punctuation\">(</span><span class=\"token variable\">X</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:-</span> <span class=\"token function\">border</span><span class=\"token punctuation\">(</span><span class=\"token variable\">X</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Y</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n\n<span class=\"token operator\">?-</span> <span class=\"token function\">adjacent</span><span class=\"token punctuation\">(</span>washington<span class=\"token punctuation\">,</span> oregon<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\nyes\n\n<span class=\"token operator\">?-</span> <span class=\"token function\">adjacent</span><span class=\"token punctuation\">(</span>oregon<span class=\"token punctuation\">,</span> washington<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\nno</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Prolog is very literal, does not know when reflexive cases are true.</p>\n<h4>Example (Ancestors)</h4>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-prolog line-numbers\"><code class=\"language-prolog\"><span class=\"token function\">father</span><span class=\"token punctuation\">(</span>homer<span class=\"token punctuation\">,</span> bart<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n<span class=\"token function\">father</span><span class=\"token punctuation\">(</span>homer<span class=\"token punctuation\">,</span> lisa<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n<span class=\"token function\">mother</span><span class=\"token punctuation\">(</span>marge<span class=\"token punctuation\">,</span> bart<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n<span class=\"token function\">mother</span><span class=\"token punctuation\">(</span>marge<span class=\"token punctuation\">,</span> lisa<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-prolog line-numbers\"><code class=\"language-prolog\"><span class=\"token operator\">?-</span> <span class=\"token function\">mother</span><span class=\"token punctuation\">(</span><span class=\"token variable\">X</span><span class=\"token punctuation\">,</span> bart<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n<span class=\"token variable\">X</span> <span class=\"token operator\">=</span> marge\n\n<span class=\"token operator\">?-</span> <span class=\"token function\">mother</span><span class=\"token punctuation\">(</span>marge<span class=\"token punctuation\">,</span> <span class=\"token variable\">Y</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n<span class=\"token variable\">Y</span> <span class=\"token operator\">=</span> bart <span class=\"token operator\">?</span> <span class=\"token operator\">;</span>\n<span class=\"token variable\">Y</span> <span class=\"token operator\">=</span> lisa</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-prolog line-numbers\"><code class=\"language-prolog\"><span class=\"token function\">sibling</span><span class=\"token punctuation\">(</span><span class=\"token variable\">X</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:-</span>\n    <span class=\"token function\">mother</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Z</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">X</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">mother</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Z</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">X</span> <span class=\"token operator\">\\==</span> <span class=\"token variable\">Y</span><span class=\"token operator\">.</span>\n\n<span class=\"token function\">sibling</span><span class=\"token punctuation\">(</span><span class=\"token variable\">X</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:-</span>\n    <span class=\"token function\">father</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Z</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">X</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">father</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Z</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">X</span> <span class=\"token operator\">\\==</span> <span class=\"token variable\">Y</span><span class=\"token operator\">.</span>\n\n<span class=\"token operator\">?-</span> <span class=\"token function\">sibling</span><span class=\"token punctuation\">(</span><span class=\"token variable\">X</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Y</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n<span class=\"token variable\">X</span> <span class=\"token operator\">=</span> bart\n<span class=\"token variable\">Y</span> <span class=\"token operator\">=</span> lisa</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Lists</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[]\n[1, 2, 3]\n[apples, bananas]\n[apples, [1, 3], mangos]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Bar notation</p>\n<p>[1, 2, 3][f | r]\nF = 1\nR = [2, 3]</p>\n<p>Racket can also use <code class=\"language-text\">_</code> to say you don't care about a variable</p>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-racket line-numbers\"><code class=\"language-racket\">member(X, [X | _).\nmember(X, [_ | R) :- member(X, R).</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h4>Strengths</h4>\n<ul>\n<li>Programs can be run backwards and forwards</li>\n<li>Constraints </li>\n</ul>\n<h4>Example (Make Change)</h4>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-prolog line-numbers\"><code class=\"language-prolog\"><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">,</span> coins<span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n<span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token variable\">A</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">F</span> <span class=\"token operator\">|</span> <span class=\"token variable\">R</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">F</span> <span class=\"token operator\">|</span> <span class=\"token variable\">X</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:-</span>\n    <span class=\"token variable\">A</span> <span class=\"token operator\">>=</span> <span class=\"token variable\">F</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">B</span> <span class=\"token operator\">is</span> <span class=\"token variable\">A</span> <span class=\"token operator\">-</span> <span class=\"token variable\">F</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token variable\">B</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">F</span> <span class=\"token operator\">|</span> <span class=\"token variable\">R</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">X</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n<span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token variable\">A</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">_</span> <span class=\"token operator\">|</span> <span class=\"token variable\">R</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">X</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:-</span>\n    <span class=\"token variable\">A</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token variable\">A</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">R</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">X</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Procedural (Assembly)</h2>\n<p>Limited vocabulary, limited standard library</p>\n<h4>Syntax</h4>\n<p>Two registers:</p>\n<ul>\n<li>D (data register)</li>\n<li>A (could be data register or address register)</li>\n<li>M (memory - actually what A is pointing to)</li>\n</ul>\n<p><code class=\"language-text\">car</code> - Contents of A register\n<code class=\"language-text\">cdr</code> - Contents of D register</p>\n<h4>Computations</h4>\n<p>A + D</p>\n<p>D - A</p>\n<p>A - D</p>\n<p>[A or D] + 1</p>\n<p>[A or D] - 1</p>\n<p>bitwise !&#x26;| </p>\n<p>-[A or D]</p>\n<p>(Any place you can use A, you can use M)</p>\n<p>No multiplication, no division, no lists.  </p>\n<p>Can assign to values</p>\n<ul>\n<li>D = M + 1</li>\n<li>D = D - A</li>\n<li>MD = A + 1</li>\n</ul>\n<p>constants: @Integer (can only go into A register)\nval;jump type</p>\n<p>Jumps:</p>\n<ul>\n<li>JGT (jump greater than)</li>\n<li>JEQ (jump if equal)</li>\n<li>JLT (jump less than)</li>\n<li>JLE (jump less than or equal to)</li>\n<li>JGE (jump greater than or equal to)</li>\n<li>JMP (jump)</li>\n</ul>\n<h4>Examples (Add)</h4>\n<div class=\"gatsby-highlight\" data-language=\"asm\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-asm line-numbers\"><code class=\"language-asm\">@2\nD=A\n@3\nD=D+A\n@0\nM=D</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Example (Adding 1 - 5)</h3>\n<div class=\"gatsby-highlight\" data-language=\"asm\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-asm line-numbers\"><code class=\"language-asm\">@0\nM=0\n@5\nD=A\n@1\nM=D\n(LOOP)\n@1\nD=M\n@0\nM=M+D\n@1\nMD=M-1\n@END\nD;JLE\n@LOOP\n0;JMP</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Strengths</h4>\n<ul>\n<li>Simple</li>\n<li>Scripting</li>\n<li>Easy to write</li>\n</ul>\n<h4>Example (Making Change)</h4>\n<ul>\n<li>R0: Amount to make</li>\n<li>R1 - R4: Coin denominations</li>\n<li>R5 - R8: Number of each coin to use</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"asm\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-asm line-numbers\"><code class=\"language-asm\">@67\nD=A\n@R0\nM=D\n\n// Load Denominations\n@25\nD=A\n@R1\nM=D\n@10\nD=A\n@R2\nM=D\n\n@5\nD=A\n@R3\nM=D\n\n@1\nD=A\n@R4\nM=D\n\n(QUARTERS)\n@R0\nD=M\n@R1\nD=D-M\n@DIMES\nD;JLT\n@R0\nM=D\n@R5\nM=M+1\n@QUARTERS\n0;JMP\n\n(DIMES)\n@R0\nD=m\n@R2\nD=D-M\n@NICKELS\nD;JLT\n@R0\nM=D\n@R6\nM=M+1\n@DIMES\n0;JMP\n\n(NICKELS)\n@R0\nD=M\n@R3\nD=D-M\n@PENNIES\nD;JLT\n@R0\nM=D\n@R7\nM=M+1\n@NICKELS\n0;JMP\n\n(PENNIES)\n@R0\nD=M\n@R4\nD=D-M\n@END\nD;JLT\n@R0\nM=D\n@R8\nM=M+1\n@PENNIES\n0;JMP\n\n(END)\n@END\n0;JMP</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>",
      "frontmatter": {
        "date": "2019-05-07",
        "title": "4 Programming Paradigms in 40 Minutes",
        "chapter": null,
        "subtitle": null,
        "tags": [
          "languages",
          "programming",
          "object-oriented",
          "functional",
          "logic/constraint",
          "procedural"
        ],
        "path": "/4-Programming-Paradigms"
      }
    }
  },
  "pageContext": {
    "isCreatedByStatefulCreatePages": false,
    "pathSlug": "/4-Programming-Paradigms",
    "prev": {
      "frontmatter": {
        "path": "/Big-O-Notation",
        "title": "Big O Notation",
        "tags": ["Big O Notation", "time complexity"],
        "subtitle": null,
        "chapter": null
      }
    },
    "next": {
      "frontmatter": {
        "path": "/M310-MongoDB-Security-Pt-1",
        "title": "M310 - MongoDB Security",
        "tags": ["security", "MongoDB"],
        "subtitle": "Part I",
        "chapter": null
      }
    }
  }
}
