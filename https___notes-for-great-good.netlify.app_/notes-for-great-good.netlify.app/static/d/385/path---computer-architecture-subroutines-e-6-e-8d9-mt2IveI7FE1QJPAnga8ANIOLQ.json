{
  "data": {
    "markdownRemark": {
      "html": "<h1>Subroutines:</h1>\n<p>Functions as you know them from higher level languages</p>\n<ul>\n<li>Calling a thing and returning from it</li>\n<li>Name of instruction to call a subroutine is CALL (varies by architecture)</li>\n<li>After subroutine runs, return instruction (RET) takes you back to where you were before the CALL.</li>\n</ul>\n<h2>Limitations:</h2>\n<ul>\n<li>CPUs are simple machines</li>\n<li>No arguments (CALL only takes one operand and that operand is where to go)</li>\n<li>No return values (RET doesn't take any operands)</li>\n<li>These can be implemented in other ways (clearly, as other languages do it)</li>\n</ul>\n<h1>Use of Stack:</h1>\n<p>When you make the call, you need to remember where to come back to when you return, so you need to store the return address somewhere.</p>\n<ul>\n<li>CPUs tend to use the stack for this.\nCALL will pusht he address of the instruction after it on the stack, then move the PC to the subroutine address</li>\n<li>RET will pop the return address off the stack and store it in the PC.</li>\n</ul>\n<h2>Subroutine Example:</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">PC  -&gt;  00: LDI, R0, 15                 Stack:\n        03: LDI, R1, 0B\n        06: CALL R1\n        08: PRN R0\n        OA: HLT\n\n        0B: ADD R0, 10  #Subroutine\n        0E: RET\n\n        00: LDI, R0, 15                 Stack:\n        03: LDI, R1, 0B                  08\nPC  -&gt;  06: CALL R1\n        08: PRN R0\n        OA: HLT\n\n        0B: ADD R0, 10  #Subroutine\n        0E: RET\n\n        00: LDI, R0, 15                 Stack:\n        03: LDI, R1, 0B                  08\n        06: CALL R1\n        08: PRN R0\n        OA: HLT\n\n        0B: ADD R0, 10  #Subroutine\nPC  -&gt;  0E: RET\n\n        00: LDI, R0, 15                 Stack:\n        03: LDI, R1, 0B\n        06: CALL R1\nPC  -&gt;  08: PRN R0\n        OA: HLT\n\n        0B: ADD R0, 10  #Subroutine\n        0E: RET</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>Uses of Subroutines:</h1>\n<ul>\n<li>Anywhere you'd use functions in a higher-level language</li>\n<li>DRY principle</li>\n<li>High-level languages eventually use CALL and RET deep down to implement functions</li>\n</ul>\n<h1>Challenge:</h1>\n<ul>\n<li>Why is the stack used to store the return address? Why not just a single register or memory location?</li>\n<li>How might the idea of <em>local variables</em> for the subroutine be implemented using the stack?</li>\n<li>Think of two ways that arguments could be passed as subroutines.</li>\n</ul>",
      "frontmatter": {
        "date": "2018-08-23",
        "title": "Computer Architecture: Subroutines",
        "chapter": null,
        "subtitle": null,
        "tags": ["computer architecture", "subroutines"],
        "path": "/Computer-Architecture-Subroutines"
      }
    }
  },
  "pageContext": {
    "isCreatedByStatefulCreatePages": false,
    "pathSlug": "/Computer-Architecture-Subroutines",
    "prev": {
      "frontmatter": {
        "path": "/Intro-to-Computer-Architecture",
        "title": "Introduction to Computer Architecture",
        "tags": ["computer architecture"],
        "subtitle": null,
        "chapter": null
      }
    },
    "next": {
      "frontmatter": {
        "path": "/Programming-Foundations--Coding-Efficiency",
        "title": "Programming Foundations:",
        "tags": ["foundations", "efficiency"],
        "subtitle": "Coding Efficiency",
        "chapter": null
      }
    }
  }
}
