- Class: meta
  Course: Getting and Cleaning Data
  Lesson: Dates and Times with lubridate
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.13

- Class: text
  Output: In this lesson, we'll explore the lubridate R package, by Garrett Grolemund and Hadley Wickham. According to the package authors, "lubridate has a consistent, memorable syntax, that makes working with dates fun instead of frustrating." If you've ever worked with dates in R, that statement probably has your attention.

- Class: cmd_question
  Output: Unfortunately, due to different date and time representations, this lesson is only guaranteed to work with an "en_US.UTF-8" locale. To view your locale, type Sys.getlocale("LC_TIME").
  CorrectAnswer: Sys.getlocale("LC_TIME")
  AnswerTests: start_timer(); omnitest(correctExpr='Sys.getlocale("LC_TIME")')
  Hint: Type Sys.getlocale("LC_TIME") to view your time locale.

- Class: text
  Output: If the output above is not "en_US.UTF-8", this lesson is not guaranteed to work correctly. Of course, you are welcome to try it anyway. We apologize for this inconvenience.

- Class: cmd_question
  Output: lubridate was automatically installed (if necessary) and loaded upon starting this lesson. To build the habit, we'll go ahead and (re)load the package now. Type library(lubridate) to do so.
  CorrectAnswer: library(lubridate)
  AnswerTests: start_timer(); omnitest(correctExpr='library(lubridate)')
  Hint: Type library(lubridate) to (re)load the package.

- Class: cmd_question
  Output: lubridate contains many useful functions. We'll only be covering the basics here. Type help(package = lubridate) to bring up an overview of the package, including the package DESCRIPTION, a list of available functions, and a link to the official package vignette.
  CorrectAnswer: help(package = lubridate)
  AnswerTests: omnitest(correctExpr='help(package = lubridate)')
  Hint: help(package = lubridate) will bring up the package documentation.

- Class: text
  Output: Let's get going!

- Class: cmd_question
  Output: The today() function returns today's date. Give it a try, storing the result in a new variable called this_day.
  CorrectAnswer: this_day <- today()
  AnswerTests: omnitest(correctExpr='this_day <- today()')
  Hint: Use this_day <- today() to store today's date in a variable called this_day.

- Class: cmd_question
  Output: Print the contents of this_day to the console.
  CorrectAnswer: this_day
  AnswerTests: any_of_exprs('this_day', 'print(this_day)')
  Hint: Type this_day to print its contents.

- Class: cmd_question
  Output: There are three components to this date. In order, they are year, month, and day. We can extract any of these components using the year(), month(), or day() function, respectively. Try any of those on this_day now.
  CorrectAnswer: month(this_day)
  AnswerTests: any_of_exprs('year(this_day)', 'month(this_day)', 'day(this_day)')
  Hint: Try passing one argument, this_day, to year(), month(), or day().

- Class: cmd_question
  Output: We can also get the day of the week from this_day using the wday() function. It will be represented as a number, such that 1 = Sunday, 2 = Monday, 3 = Tuesday, etc. Give it a shot.
  CorrectAnswer: wday(this_day)
  AnswerTests: omnitest('wday(this_day)')
  Hint: wday(this_day) will give the day of the week, represented as a number.

- Class: cmd_question
  Output: "Now try the same thing again, except this time add a second argument, label = TRUE, to display the *name* of the weekday (represented as an ordered factor)."
  CorrectAnswer: wday(this_day, label = TRUE)
  AnswerTests: omnitest('wday(this_day, label = TRUE)')
  Hint: wday(this_day, label = TRUE) will give you the day of the week, represented as a character string.

- Class: cmd_question
  Output: In addition to handling dates, lubridate is great for working with date and time combinations, referred to as date-times. The now() function returns the date-time representing this exact moment in time. Give it a try and store the result in a variable called this_moment.
  CorrectAnswer: this_moment <- now()
  AnswerTests: omnitest('this_moment <- now()')
  Hint: Store the result of now() in a new variable called this_moment.

- Class: cmd_question
  Output: View the contents of this_moment.
  CorrectAnswer: this_moment
  AnswerTests: any_of_exprs('this_moment', 'print(this_moment)')
  Hint: Type this_moment to print its contents to the console.

- Class: cmd_question
  Output: Just like with dates, we can extract the year, month, day, or day of week. However, we can also use hour(), minute(), and second() to extract specific time information. Try any of these three new functions now to extract one piece of time information from this_moment.
  CorrectAnswer: second(this_moment)
  AnswerTests: any_of_exprs('hour(this_moment)', 'minute(this_moment)', 'second(this_moment)')
  Hint: Use hour(), minute(), or second() to extract a single piece of time information from this_moment.

- Class: text
  Output: today() and now() provide neatly formatted date-time information. When working with dates and times 'in the wild', this won't always (and perhaps rarely will) be the case.

- Class: text
  Output: Fortunately, lubridate offers a variety of functions for parsing date-times. These functions take the form of ymd(), dmy(), hms(), ymd_hms(), etc., where each letter in the name of the function stands for the location of years (y), months (m), days (d), hours (h), minutes (m), and/or seconds (s) in the date-time being read in.

- Class: cmd_question
  Output: To see how these functions work, try ymd("1989-05-17"). You must surround the date with quotes. Store the result in a variable called my_date.
  CorrectAnswer: my_date <- ymd("1989-05-17")
  AnswerTests: omnitest('my_date <- ymd("1989-05-17")')
  Hint: Type my_date <- ymd("1989-05-17") to see how ymd() works, storing the result in my_date.

- Class: cmd_question
  Output: Now take a look at my_date.
  CorrectAnswer: my_date
  AnswerTests: omnitest('my_date')
  Hint: Type my_date to view its contents.

- Class: cmd_question
  Output: It looks almost the same, except for the addition of a time zone, which we'll discuss later in the lesson. Below the surface, there's another important change that takes place when lubridate parses a date. Type class(my_date) to see what that is.
  CorrectAnswer: class(my_date)
  AnswerTests: omnitest('class(my_date)')
  Hint: Type class(my_date) to see what important change takes place when lubridate parses a date.

- Class: text
  Output: So ymd() took a character string as input and returned an object of class POSIXct. It's not necessary that you understand what POSIXct is, but just know that it is one way that R stores date-time information internally.

- Class: cmd_question
  Output: '"1989-05-17" is a fairly standard format, but lubridate is ''smart'' enough to figure out many different date-time formats. Use ymd() to parse "1989 May 17". Don''t forget to put quotes around the date!'
  CorrectAnswer: ymd("1989 May 17")
  AnswerTests: omnitest('ymd("1989 May 17")')
  Hint: Try ymd("1989 May 17") to see that ymd() is capable of handling different date-time formats.

- Class: cmd_question
  Output: Despite being formatted differently, the last two dates had the year first, then the month, then the day. Hence, we used ymd() to parse them. What do you think the appropriate function is for parsing "March 12, 1975"? Give it a try.
  CorrectAnswer: mdy("March 12, 1975")
  AnswerTests: any_of_exprs('mdy("March 12, 1975")', 'mdy("March 12 1975")')
  Hint: mdy() will correctly parse "March 12, 1975". The function name, mdy(), stands for year (y), month (m), and day (d), in order from left to right.

- Class: cmd_question
  Output: We can even throw something funky at it and lubridate will often know the right thing to do. Parse 25081985, which is supposed to represent the 25th day of August 1985. Note that we are actually parsing a numeric value here -- not a character string -- so leave off the quotes.
  CorrectAnswer: dmy(25081985)
  AnswerTests: omnitest('dmy(25081985)')
  Hint: Use dmy(25081985) to see how lubridate handles something a little different from what we've seen so far.

- Class: cmd_question
  Output: But be careful, it's not magic. Try ymd("192012") to see what happens when we give it something more ambiguous. Surround the number with quotes again, just to be consistent with the way most dates are represented (as character strings).
  CorrectAnswer: ymd("192012")
  AnswerTests: omnitest('ymd("192012")')
  Hint: Try ymd("192012") to see what happens when lubridate can't figure out what the format of the date is.

- Class: cmd_question
  Output: You got a warning message because it was unclear what date you wanted. When in doubt, it's best to be more explicit. Repeat the same command, but add two dashes OR two forward slashes to "192012" so that it's clear we want January 2, 1920.
  CorrectAnswer: ymd("1920/1/2")
  AnswerTests: any_of_exprs('ymd("1920/1/2")', 'ymd("1920-1-2")')
  Hint: ymd("1920/1/2") is more explicit than ymd("192012") and lubridate knows how to handle it.

- Class: cmd_question
  Output: In addition to dates, we can parse date-times. I've created a date-time object called dt1. Take a look at it now.
  CorrectAnswer: dt1
  AnswerTests: any_of_exprs('dt1', 'print(dt1)')
  Hint: Type dt1 to view its contents.

- Class: cmd_question
  Output: Now parse dt1 with ymd_hms().
  CorrectAnswer: ymd_hms(dt1)
  AnswerTests: omnitest('ymd_hms(dt1)')
  Hint: ymd_hms(dt1) will parse dt1.

- Class: cmd_question
  Output: What if we have a time, but no date? Use the appropriate lubridate function to parse "03:22:14" (hh:mm:ss).
  CorrectAnswer: hms("03:22:14")
  AnswerTests: omnitest('hms("03:22:14")')
  Hint: Give hms("03:22:14") a try. In this case, hms() stands for hours (h), minutes (m), and seconds (s).

- Class: cmd_question
  Output: lubridate is also capable of handling vectors of dates, which is particularly helpful when you need to parse an entire column of data. I've created a vector of dates called dt2. View its contents now.
  CorrectAnswer: dt2
  AnswerTests: any_of_exprs('dt2', 'print(dt2)')
  Hint: Type dt2 to view its contents.

- Class: cmd_question
  Output: Now parse dt2 using the appropriate lubridate function.
  CorrectAnswer: ymd(dt2)
  AnswerTests: omnitest('ymd(dt2)')
  Hint: Use ymd(dt2) to parse the vector of dates named dt2.

- Class: cmd_question
  Output: "The update() function allows us to update one or more components of a date-time. For example, let's say the current time is 08:34:55 (hh:mm:ss). Update this_moment to the new time using the following command:\n\nupdate(this_moment, hours = 8, minutes = 34, seconds = 55)."
  CorrectAnswer: update(this_moment, hours = 8, minutes = 34, seconds = 55)
  AnswerTests: omnitest('update(this_moment, hours = 8, minutes = 34, seconds = 55)')
  Hint: update(this_moment, hours = 8, minutes = 34, seconds = 55) will update this_moment to reflect a new time of 08:34:55.

- Class: cmd_question
  Output: It's important to recognize that the previous command does not alter this_moment unless we reassign the result to this_moment. To see this, print the contents of this_moment.
  CorrectAnswer: this_moment
  AnswerTests: any_of_exprs('this_moment', 'print(this_moment)')
  Hint: Type this_moment to view its contents.

- Class: cmd_question
  Output: Unless you're a superhero, some time has passed since you first created this_moment. Use update() to make it match the current time, specifying at least hours and minutes. Assign the result to this_moment, so that this_moment will contain the new time.
  CorrectAnswer: this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
  AnswerTests: expr_uses_func('update'); func_uses_args('hours', 'minutes'); expr_creates_var('this_moment')
  Hint: Try update(this_moment, hours = 10, minutes = 16, seconds = 0), which will update the time to 10:16:00. Make sure to reassign the result to this_moment.

- Class: cmd_question
  Output: Take one more look at this_moment to see that it's been updated.
  CorrectAnswer: this_moment
  AnswerTests: any_of_exprs('this_moment', 'print(this_moment)')
  Hint: Type this_moment to see its new value.

- Class: text
  Output: Now, pretend you are in New York City and you are planning to visit a friend in Hong Kong. You seem to have misplaced your itinerary, but you know that your flight departs New York at 17:34 (5:34pm) the day after tomorrow. You also know that your flight is scheduled to arrive in Hong Kong exactly 15 hours and 50 minutes after departure.

- Class: text
  Output: Let's reconstruct your itinerary from what you can remember, starting with the full date and time of your departure. We will approach this by finding the current date in New York, adding 2 full days, then setting the time to 17:34.

- Class: cmd_question
  Output: 'To find the current date in New York, we''ll use the now() function again. This time, however, we''ll specify the time zone that we want: "America/New_York". Store the result in a variable called nyc. Check out ?now if you need help.'
  CorrectAnswer: nyc <- now("America/New_York")
  AnswerTests: match_call('nyc <- now("America/New_York")')
  Hint: now("America/New_York") will give the current date in New York. Store the result in a variable called nyc.

- Class: text
  Output: "For a complete list of valid time zones for use with lubridate, check out the following Wikipedia page:\n\nhttp://en.wikipedia.org/wiki/List_of_tz_database_time_zones"

- Class: cmd_question
  Output: View the contents of nyc, which now contains the current date and time in New York.
  CorrectAnswer: nyc
  AnswerTests: any_of_exprs('nyc', 'print(nyc)')
  Hint: Type nyc to see the current date and time in New York.

- Class: cmd_question
  Output: "Your flight is the day after tomorrow (in New York time), so we want to add two days to nyc. One nice aspect of lubridate is that it allows you to use arithmetic operators on dates and times. In this case, we'd like to add two days to nyc, so we can use the following expression: nyc + days(2). Give it a try, storing the result in a variable called depart."
  CorrectAnswer: depart <- nyc + days(2)
  AnswerTests: any_of_exprs('depart <- nyc + days(2)', 'depart <- days(2) + nyc')
  Hint: Use nyc + days(2) to add two days to the current date in New York. Store the result in a variable called depart.

- Class: cmd_question
  Output: Take a look at depart.
  CorrectAnswer: depart
  AnswerTests: any_of_exprs('depart', 'print(depart)')
  Hint: Type depart to view its contents.

- Class: cmd_question
  Output: So now depart contains the date of the day after tomorrow. Use update() to add the correct hours (17) and minutes (34) to depart. Reassign the result to depart.
  CorrectAnswer: depart <- update(depart, hours = 17, minutes = 34)
  AnswerTests: any_of_exprs('depart <- update(depart, hours = 17, minutes = 34)', 'depart <- update(depart, minutes = 34, hours = 17)')
  Hint: Use depart <- update(depart, hours = 17, minutes = 34) to update depart with the correct time of 17:34.

- Class: cmd_question
  Output: Take one more look at depart.
  CorrectAnswer: depart
  AnswerTests: any_of_exprs('depart', 'print(depart)')
  Hint: Type depart to view its contents.

- Class: text
  Output: Your friend wants to know what time she should pick you up from the airport in Hong Kong. Now that we have the exact date and time of your departure from New York, we can figure out the exact time of your arrival in Hong Kong.

- Class: cmd_question
  Output: The first step is to add 15 hours and 50 minutes to your departure time. Recall that nyc + days(2) added two days to the current time in New York. Use the same approach to add 15 hours and 50 minutes to the date-time stored in depart. Store the result in a new variable called arrive.
  CorrectAnswer: arrive <- depart + hours(15) + minutes(50)
  AnswerTests: expr_creates_var('arrive'); test_arrive_val()
  Hint: arrive <- depart + hours(15) + minutes(50) will add 15 hours and 50 minutes to depart and store the result in arrive.

- Class: text
  Output: The arrive variable contains the time that it will be in New York when you arrive in Hong Kong. What we really want to know is what time it will be in Hong Kong when you arrive, so that your friend knows when to meet you.

- Class: cmd_question
  Output: The with_tz() function returns a date-time as it would appear in another time zone. Use ?with_tz to check out the documentation.
  CorrectAnswer: ?with_tz
  AnswerTests: any_of_exprs('?with_tz', 'help(with_tz)')
  Hint: View the help file using ?with_tz.

- Class: cmd_question
  Output: Use with_tz() to convert arrive to the "Asia/Hong_Kong" time zone. Reassign the result to arrive, so that it will get the new value.
  CorrectAnswer: arrive <- with_tz(arrive, "Asia/Hong_Kong")
  AnswerTests: match_call('arrive <- with_tz(arrive, "Asia/Hong_Kong")')
  Hint: with_tz(arrive, "Asia/Hong_Kong") will convert arrive to Hong Kong time. Assign the result back to arrive.

- Class: cmd_question
  Output: Print the value of arrive to the console, so that you can tell your friend what time to pick you up from the airport.
  CorrectAnswer: arrive
  AnswerTests: any_of_exprs('arrive', 'print(arrive)')
  Hint: Type arrive to view its contents.

- Class: text
  Output: Fast forward to your arrival in Hong Kong. You and your friend have just met at the airport and you realize that the last time you were together was in Singapore on June 17, 2008. Naturally, you'd like to know exactly how long it has been.

- Class: cmd_question
  Output: Use the appropriate lubridate function to parse "June 17, 2008", just like you did near the beginning of this lesson. This time, however, you should specify an extra argument, tz = "Singapore". Store the result in a variable called last_time.
  CorrectAnswer: last_time <- mdy("June 17, 2008", tz = "Singapore")
  AnswerTests: omnitest('last_time <- mdy("June 17, 2008", tz = "Singapore")')
  Hint: Use mdy("June 17, 2008", tz = "Singapore") to parse the date with the correct time zone and store the result in last_time.

- Class: cmd_question
  Output: View the contents of last_time.
  CorrectAnswer: last_time
  AnswerTests: any_of_exprs('last_time', 'print(last_time)')
  Hint: Type last_time to view its contents.

- Class: cmd_question
  Output: Pull up the documentation for interval(), which we'll use to explore how much time has passed between arrive and last_time.
  CorrectAnswer: ?interval
  AnswerTests: any_of_exprs('?interval', 'help(interval)')
  Hint: Type ?interval to bring up the help file.

- Class: cmd_question
  Output: Create an interval() that spans from last_time to arrive. Store it in a new variable called how_long.
  CorrectAnswer: how_long <- interval(last_time, arrive)
  AnswerTests: match_call('how_long <- interval(last_time, arrive)')
  Hint: Call interval with two arguments, last_time and arrive, and store the result in how_long.

- Class: cmd_question
  Output: Now use as.period(how_long) to see how long it's been.
  CorrectAnswer: as.period(how_long)
  AnswerTests: omnitest('as.period(how_long)')
  Hint: as.period(how_long) will tell you how many years, months, days, etc. have passed since you last saw your friend.

- Class: text
  Output: This is where things get a little tricky. Because of things like leap years, leap seconds, and daylight savings time, the length of any given minute, day, month, week, or year is relative to when it occurs. In contrast, the length of a second is always the same, regardless of when it occurs.

- Class: text
  Output: "To address these complexities, the authors of lubridate introduce four classes of time related objects: instants, intervals, durations, and periods. These topics are beyond the scope of this lesson, but you can find a complete discussion in the 2011 Journal of Statistical Software paper titled 'Dates and Times Made Easy with lubridate'."

- Class: cmd_question
  Output: This concludes our introduction to working with dates and times in lubridate. I created a little timer that started running in the background when you began this lesson. Type stopwatch() to see how long you've been working!
  CorrectAnswer: stopwatch()
  AnswerTests: omnitest('stopwatch()'); stop_timer()
  Hint: Type stopwatch() to see how long you've been working!

- Class: mult_question
  Output: "Would you like to receive credit for completing this course on
    Coursera.org?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: coursera_on_demand()
  Hint: ""
