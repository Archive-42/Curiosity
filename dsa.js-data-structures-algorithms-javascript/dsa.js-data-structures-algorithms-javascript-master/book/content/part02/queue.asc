ifndef::imagesdir[]
:imagesdir: ../../images
:codedir: ../../../src
endif::[]

[[queue]]
=== Queue
(((Queue)))
(((Data Structures, Linear, Queue)))
(((First-In First-out)))
(((FIFO)))
A queue is a linear data structure where the data flows in a *First-In-First-Out* (FIFO) manner.

.Queue data structure is like a line of people: the First-in, is the First-out
image::image30.png[image,width=528,height=171]

A queue is like a line of people at the bank; the person who arrived first is the first to go out.

Similar to the stack, we only have two operations (insert and remove). In a Queue, we add elements to the back of the list and remove it from the front.

We could use an array or a linked list to implement a Queue. However, it is recommended only to use a linked list. Why? An array has a linear runtime _O(n)_ to remove an element from the start, while a linked list has constant time _O(1)_.

.Queue's constructor
[source, javascript]
----
include::{codedir}/data-structures/queues/queue.js[tag=constructor]
  // ... methods go here ...
}
----

We initialize the Queue creating a linked list. Now, letâ€™s add the `enqueue` and `dequeue` methods.

==== Insertion
(((Enqueue)))
For inserting elements into a queue, also know as *enqueue*, we add items to the back of the list using `addLast`:

.Queue's enqueue
[source, javascript]
----
include::{codedir}/data-structures/queues/queue.js[tag=enqueue, indent=0]
----

As discussed, this operation has a constant runtime.

==== Deletion
(((Dequeue)))
For removing elements from a queue, also known as *dequeue*, we remove elements from the front of the list using `removeFirst`:

.Queue's dequeue
[source, javascript]
----
include::{codedir}/data-structures/queues/queue.js[tag=dequeue, indent=0]
----

As discussed, this operation has a constant runtime.

==== Implementation usage

We can use our Queue class as follows:

.Queue usage example
[source, javascript]
----
include::{codedir}/data-structures/queues/queue.js[tag=snippet, indent=0]
----

You can see that the items are dequeued in the same order they were added, FIFO (first-in, first-out).

==== Queue Complexity

As an experiment, we can see in the following table that if we had implemented the Queue using an array, its enqueue time would be _O(n)_ instead of _O(1)_. Check it out:
(((Tables, Linear DS, Queue complexities)))

// tag::table[]
.Time/Space complexity for queue operations
|===
.2+.^s| Data Structure 2+^s| Searching By 3+^s| Inserting at the 3+^s| Deleting from .2+.^s| Space
^|_Index/Key_ ^|_Value_ ^|_beginning_ ^|_middle_ ^|_end_ ^|_beginning_ ^|_middle_ ^|_end_
| Queue (w/array) ^|- ^|- ^|- ^|- ^|O(1) ^|*O(n)* ^|- ^|- ^|O(n)
| Queue (w/list) ^|- ^|- ^|- ^|- ^|O(1) ^|O(1) ^|- ^|- ^|O(n)
|===
// end::table[]
indexterm:[Runtime, Linear]


==== Practice Questions
(((Interview Questions, Queue)))


// tag::queue-q-recent-counter[]
===== Recent Counter

*QU-1*) _Design a class that counts the most recent requests within a time window._

Example:

[source, javascript]
----
const counter = new RecentCounter(10); // The time window is 10 ms.
counter.request(1000); // 1 (first request, it always counts)
counter.request(3000); // 1 (last requests was 2000 ms ago, > 10ms, so doesn't count)
counter.request(3100); // 1 (last requests was 100 ms ago, > 10ms, so doesn't count)
counter.request(3105); // 2 (last requests was 5 ms ago, <= 10ms, so it counts)
----

_Common in interviews at: FAANG, Bloomberg, Yandex_
// end::queue-q-recent-counter[]


[source, javascript]
----
include::../../interview-questions/recent-counter.js[tag=description]
  // write you code here
}
----

_Solution: <<queue-q-recent-counter>>_


// tag::queue-q-design-snake-game[]
===== Design Snake Game

*QU-2*) _Design the `move` function for the snake game. The move function returns an integer representing the current score. If the snake goes out of the given height and width or hit itself, the game is over and return `-1`._

Example:

[source, javascript]
----
const snakeGame = new SnakeGame(4, 2, [[1, 2], [0, 1]]);
expect(snakeGame.move('R')).toEqual(0); //  0
expect(snakeGame.move('D')).toEqual(0); //  0
expect(snakeGame.move('R')).toEqual(1); //  1 (ate food1)
expect(snakeGame.move('U')).toEqual(1); //  1
expect(snakeGame.move('L')).toEqual(2); //  2 (ate food2)
expect(snakeGame.move('U')).toEqual(-1); // -1 (hit wall)
----

_Common in interviews at: Amazon, Bloomberg, Apple_
// end::queue-q-design-snake-game[]

[source, javascript]
----
include::../../interview-questions/design-snake-game.js[tag=description]
----

_Solution: <<queue-q-design-snake-game>>_
