ifndef::imagesdir[]
:imagesdir: ../../images
:codedir: ../../../src
endif::[]

=== Sorting Algorithms

Sorting is one of the most common solutions when we want to extract some insights about data.
We can sort to get the maximum or minimum value, and many algorithmic problems can benefit from sorting.

.We are going to explore three basic sorting algorithms _O(n^2^)_ which have low overhead:
- <<part04-algorithmic-toolbox#bubble-sort>>
- <<part04-algorithmic-toolbox#selection-sort>>
- <<part04-algorithmic-toolbox#insertion-sort>>

.and then discuss efficient sorting algorithms _O(n log n)_ such as:
- <<part04-algorithmic-toolbox#merge-sort>>
- <<quicksort-chap>>

Before we dive into the most well-known sorting algorithms, let's discuss the sorting properties.

==== Sorting Properties

Sorting implementations with the same time complexity might manipulate the data differently. We want to understand these differences to be aware of the side effects on data or extra resources they will require. For instance, some solutions will need auxiliary memory to store temporary data while sorting, while others can do it in place.

Sorting properties are stable, adaptive, online, and in-place. Let's go one by one.

===== Stable
(((Sorting, stable)))
An ((stable sorting)) algorithms keep the relative order of items with the same comparison criteria.

This incredibly useful when you want to sort on multiple phases.

.Let's say you have the following data:
[source, javascript]
----
const users = [
  { name: 'Bob', age: 32 },
  { name: 'Alice', age: 30 },
  { name: 'Don', age: 30 },
  { name: 'Charly', age: 32 },
];
----

.If you sort by `name`, you would have:
[source, javascript]
----
[
  { name: 'Alice', age: 30 },
  { name: 'Bob', age: 32 },
  { name: 'Charly', age: 32 },
  { name: 'Don', age: 30 },
];
----

Then, here comes the _critical_ part; if you sort by `age`, you might get (at least two) different results.

.If the sorting algorithm is *stable*; it should keep the items with the same age ordered by `name`:
[source, javascript]
----
[
  { name: 'Alice', age: 30 },
  { name: 'Don', age: 30 },
  { name: 'Bob', age: 32 },
  { name: 'Charly', age: 32 },
];
----

.However, if the sorting is *not stable*, then you will lose the relative order of the items and get something like this:
[source, javascript]
----
[
  { name: 'Don', age: 30 },
  { name: 'Alice', age: 30 },
  { name: 'Charly', age: 32 },
  { name: 'Bob', age: 32 },
];
----

Both results are sorted by `age`; however, having a stable sorting is better if you want to keep the relative position of data with the same value.

===== In-place
(((Sorting, in-place)))
An ((in-place sorting)) algorithm would have a _space complexity_ of O(1). In other words, it does not use any additional memory because it moves the items in-place.
No extra memory for sorting is especially useful for large amounts of data or in memory constraint environments like robotics, smart devices, or embedded systems in appliances.

===== Online
(((Sorting, online)))
It can sort a list as it receives it.
((Online sorting)) algorithms don't have to re-sort the whole collection for every new item added.

===== Adaptive
(((Sorting, adaptive)))
Algorithms with ((adaptive sorting)) run faster, close to _O(n)_, on an already sorted (or partially sorted) collection.

<<<
include::bubble-sort.asc[]

<<<
include::insertion-sort.asc[]

<<<
include::selection-sort.asc[]

<<<
include::merge-sort.asc[]

<<<
include::quick-sort.asc[]

<<<
==== Summary

We explored the most common sorting algorithms, some of which are simple and others more performant. Also, we cover the properties of sorting algorithms such as stable, in-place, online, and adaptive.
(((Tables, Algorithms, Sorting Complexities)))
(((Tables, Algorithms, Sorting Summary)))

// tag::table[]
.Sorting algorithms comparison
[cols="20,80"]
|===
| Algorithms         | Comments
| <<part04-algorithmic-toolbox#bubble-sort>>    | Swap pairs bubbling up largest numbers to the right
| <<part04-algorithmic-toolbox#insertion-sort>> | Look for biggest number to the left and swap it with current
| <<part04-algorithmic-toolbox#selection-sort>> | Iterate array looking for smallest value to the right
| <<part04-algorithmic-toolbox#merge-sort>>     | Split numbers in pairs, sort pairs and join them in ascending order
| <<quicksort-chap>>      | Choose a pivot, set smaller values to the left and bigger to the right.
// | Tim sort        | Hybrid of merge sort and insertion sort
|===

.Sorting algorithms time/space complexity and properties
|===
| Algorithms         | Avg        | Best | Worst | Space       | Stable | In-place | Online | Adaptive
| <<part04-algorithmic-toolbox#bubble-sort>>    | O(n^2^)    | O(n) | O(n^2^) | O(1)      | Yes    | Yes      | Yes    | Yes
| <<part04-algorithmic-toolbox#insertion-sort>> | O(n^2^)    | O(n) | O(n^2^) | O(1)      | Yes    | Yes      | Yes    | Yes
| <<part04-algorithmic-toolbox#selection-sort>> | O(n^2^)    | O(n^2^) | O(n^2^) | O(1)        | No     | Yes      | No    | No
| <<part04-algorithmic-toolbox#merge-sort>>     | O(n log n) | O(n log n) | O(n log n) | O(n)        | Yes     | No       | No     | No
| <<quicksort-chap>>      | O(n log n) | O(n log n) | O(n^2^) | O(log n) | No     | Yes      | No     | No
// | Tim sort       | O(n log n) | O(log n)    | Yes    | No       | No     | Yes
|===
// end::table[]









==== Practice Questions
(((Interview Questions, sorting)))





// tag::sorting-q-merge-intervals[]
===== Merge Intervals

*so-1*) _Given an array of intervals `[start, end]`, merge all overlapping intervals._

// end::sorting-q-merge-intervals[]

_Common in interviews at: Facebook, Amazon, Bloomberg._

*Starter code*:

[source, javascript]
----
include::../../interview-questions/merge-intervals.js[tags=description;placeholder]
----

*Examples*:

[source, javascript]
----
merge([[0, 2], [2, 4]]); // [[0, 4]] (0-2 overlaps with 2-4)
merge([[2, 2], [3, 4]]); // [[2, 2], [3, 4]] (no overlap)
merge([[1, 10], [3, 4]]); // [[1, 10]] (1-10 covers the other)
----


_Solution: <<sorting-q-merge-intervals>>_






// tag::sorting-q-sort-colors[]
===== Sort Colors (The Dutch flag problem)

*so-2*) _Given an array with three possible values (0, 1, 2), sort them in linear time, and in-place. Hint: similar to quicksort, where the pivot is 1._

// end::sorting-q-sort-colors[]

_Common in interviews at: Amazon, Microsoft, Facebook._

*Starter code*:

[source, javascript]
----
include::../../interview-questions/sort-colors.js[tags=description;placeholder]
----

*Examples*:

[source, javascript]
----
sortColors([0, 2, 1]); // [0, 1, 2]
sortColors([2, 0, 2, 1, 0, 1, 0]); // [0, 0, 0, 1, 1, 2, 2]
sortColors([1, 1, 1]); // [1, 1, 1]
----

_Solution: <<sorting-q-sort-colors>>_
