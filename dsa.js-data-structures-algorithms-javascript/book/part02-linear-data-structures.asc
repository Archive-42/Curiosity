[[part02-linear-data-structures]]
== Linear Data Structures

Data Structures come in many flavors. There's no one to rule them all. You have to know the tradeoffs so you can choose the right one for the job.

In your day-to-day work, you might not need to re-implement basic data structures. However, knowing how they work internally can help you understand their time complexity better (Remember the chapter <<big-o-function-statement, How to determine Big-O from code?>>).

When you are aware of the data structures implementations, you spot when to use one over the other or even extend them to create a new one. We are going to explore the most common data structures' time and space complexity.

.In this part we are going to learn about the following linear data structures:
- <<array-chap>>
- <<hashmap-chap>>
- <<hash-set-chap>>
- <<part02-linear-data-structures#linked-list>>
- <<part02-linear-data-structures#stack>>
- <<part02-linear-data-structures#queue>>

Later, in the next part, we are going to explore non-linear data structures like <<part03-graph-data-structures#graph, Graphs>> and <<part03-graph-data-structures#tree, Trees>>.

ifdef::backend-html5[]
If you want to have a general overview of each one, take a look at the following interactive diagram:
+++
<iframe
  src="https://embed.kumu.io/85f1a4de5fb8430a10a1bf9c5118e015"
  width="940" height="600" frameborder="0"></iframe>
+++
endif::[]

<<<
include::content/part02/array.asc[]

<<<
include::content/part02/hash-map.asc[]

<<<
include::content/part02/hash-set.asc[]

<<<
include::content/part02/linked-list.asc[]

<<<
include::content/part02/stack.asc[]

<<<
include::content/part02/queue.asc[]

<<<
include::content/part02/array-vs-list-vs-queue-vs-stack.asc[]
