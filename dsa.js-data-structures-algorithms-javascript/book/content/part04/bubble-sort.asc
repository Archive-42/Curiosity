ifndef::imagesdir[]
:imagesdir: ../../images
:codedir: ../../../src
endif::[]

[[bubble-sort]]
==== Bubble Sort
(((Bubble Sort)))
(((Sorting, Bubble Sort)))
(((Sinking Sort)))
(((Sorting, Sinking Sort)))
Bubble sort is a simple sorting algorithm that "bubbles up" the biggest values to the array's right side.
It's also called _sinking sort_ because of the most significant values "sink" to the array's right side.
This algorithm is adaptive, which means that if the array is already sorted, it will take only _O(n)_ to "sort".
However, if the array is entirely out of order, it will require _O(n^2^)_ to sort.
(((Quadratic)))
(((Runtime, Quadratic)))

===== Bubble Sort Implementation

.Bubble Sort implementation in JavaScript
[source, javascript]
----
include::{codedir}/algorithms/sorting/bubble-sort.js[tag=sort, indent=0]
----
<1> Convert any iterable (array, sets, etc.) into an array or if it's already an array, it clones it, so the input is not modified.
<2> Starting from index 0 compare current and next element
<3> If they are out of order, swap the pair
<4> Repeat pair comparison until the last element that has been bubbled up to the right side `array.length - i`.
<5> (optimization) If there were no swaps, this means that the array is sorted. This single-pass makes this sorting _adaptive_, and it will only require _O(n)_ operations.
<6> Each step moves the largest element from where it was to the right side. We need to do this `n - 1`  times to cover all items.

.The `swap` function is implemented as follows:
[source, javascript]
----
include::{codedir}/algorithms/sorting/sorting-common.js[tag=swap, indent=0]
----

It uses JavaScript ES6 destructing arrays.

.JavaScript Array destructuring
****
*Assignment separate from declaration*

A variable can be assigned to its values using the destructing syntax.

[source, javascript]
----
let a, b;

[a, b] = [1, 2];
console.log(a); //↪️ 1
console.log(b); //️↪️ 2
----

*Swapping variables*

Two variables' values can be swapped in one line using the destructuring expression.

[source, javascript]
----
[a, b] = [b, a];
console.log(a); //↪️ 2
console.log(b); //️↪️ 1
----

Without the destructuring assignment, swapping two values requires a temporary variable.
****

Bubble sort has a <<part01-algorithms-analysis#quadratic>> running time, as you might infer from the nested for-loop.

===== Bubble Sort Properties

- <<Stable>>: [big]#✅# Yes
- <<In-place>>: [big]#✅# Yes
- <<Online>>: [big]#✅# Yes
- <<Adaptive>>: [big]#✅# Yes, _O(n)_ when already sorted
- Time Complexity: [big]#⛔️# <<part01-algorithms-analysis#quadratic>> _O(n^2^)_
- Space Complexity: [big]#✅# <<part01-algorithms-analysis#constant>> _O(1)_

indexterm:[Runtime, Quadratic]
