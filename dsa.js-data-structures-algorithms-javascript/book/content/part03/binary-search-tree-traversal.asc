ifndef::imagesdir[]
:imagesdir: ../../images
:codedir: ../../../src
endif::[]

=== Binary Tree Traversal
(((Binary Tree Traversal)))
In this section, we are going to focus on depth-first tree traversal.

==== In Order Traversal
(((Tree Traversal, In Order)))
(((In Order Traversal)))
If your tree happens to be a binary search tree (BST), then you can use "in order" traversal to get the values sorted in ascending order. To accomplish this, you have to visit the nodes in a `left-root-right` order.

If we have the following tree:
----
         10
       /    \
      5      30
    /       /  \
   4       15   40
 /
3
----

In-order traverval will return `3, 4, 5, 10, 15, 30, 40`.

Check out the implementation:

.In-order traversal implementation
[source, javascript]
----
include::{codedir}/data-structures/trees/binary-search-tree.js[tag=inOrderTraversal, indent=0]
----

This function gets the leftmost element (recursively) and then yields that node, then we go to the right child (if any) and repeat the process. This method will get us the values ordered.

==== Pre Order Traversal
(((Tree Traversal, Pre Order)))
(((Pre Order Traversal)))
Pre-order traversal visits nodes in this order `root-left-right` recursively.

.Usage of pre-order traversal:
- Create a copy of the tree.
- Get prefix expression on of an expression tree used in the https://en.wikipedia.org/wiki/Polish_notation[polish notation].


.Pre-order traversal implementation
[source, javascript]
----
include::{codedir}/data-structures/trees/binary-search-tree.js[tag=preOrderTraversal, indent=0]
----

If we have the following tree:
----
         10
       /    \
      5      30
    /       /  \
   4       15   40
 /
3
----

Pre-order traverval will return `10, 5, 4, 3, 30, 15, 40`.

==== Post-order Traversal
(((Tree Traversal, Post Order)))
(((Post Order Traversal)))
Post-order traversal goes to each node in this order `left-right-root` recursively.

.Usages of the post-order tree traversal
- Traversal is used to delete the tree because you visit the children before removing the parent.
- Get the postfix expression of an expression tree used in the http://en.wikipedia.org/wiki/Reverse_Polish_notation[reverse polish notation].

.Post-order traversal implementation
[source, javascript]
----
include::{codedir}/data-structures/trees/binary-search-tree.js[tag=postOrderTraversal, indent=0]
----


If we have the following tree:
----
         10
       /    \
      5      30
    /       /  \
   4       15   40
 /
3
----

Post-order traverval will return `3, 4, 5, 15, 40, 30, 10`.


==== Practice Questions
(((Interview Questions, Binary Tree)))


// tag::binary-tree-q-diameter-of-binary-tree[]
===== Binary Tree Diameter

*BT-1*) _Find the diameter of a binary tree. A tree's diameter is the longest possible path from two nodes (it doesn't need to include the root). The length of a diameter is calculated by counting the number of edges on the path._

// end::binary-tree-q-diameter-of-binary-tree[]

_Common in interviews at: FAANG_

// Example 1:
// [graphviz, tree-diameter-example-1, png]
// ....
// graph G {
//     1 -- 2 [color=red]
//     1 -- 3 [color=red]

//     2 -- 4
//     2 -- 5 [color=red]
// }
// ....

// Example 2:
// [graphviz, tree-diameter-example-2, png]
// ....
// graph G {
//     1
//     2
//     3
//     4
//     5
//     6
//     "null" [color=white, fontcolor = white]
//     "null." [color=white, fontcolor = white]
//     7
//     8
//     "null.." [color=white, fontcolor = white]
//     "null..." [color=white, fontcolor = white]
//     9

//     1 -- 2
//     1 -- 3

//     3 -- 4 [color=red]
//     3 -- 5 [color=red]

//     4 -- 6 [color=red]
//     4 -- "null." [color=white]

//     5 -- "null" [color=white]
//     5 -- 7 [color=red]

//     6 -- 8 [color=red]
//     6 -- "null.." [color=white]

//     7 -- "null..." [color=white]
//     7 -- 9 [color=red]
// }
// ....

Examples:

[source, javascript]
----
/*           1
            / \
           2   3
          / \
         4   5          */
diameterOfBinaryTree(toBinaryTree([1,2,3,4,5])); // 3
// For len 3, the path could be 3-1-2-5 or 3-1-2-4

/*           1
            / \
           2   3
              / \
             4   5
            /     \
           6       7
          /         \
         8           9      */
const array = [1,2,3,null,null,4,5,6,null,null,7,8,null,null,9];
const tree = BinaryTreeNode.from(array);
diameterOfBinaryTree(tree); // 6 (path: 8-6-4-3-5-7-9)
----

Starter code:

[source, javascript]
----
include::../../interview-questions/diameter-of-binary-tree.js[tags=description;placeholder]
----


_Solution: <<binary-tree-q-diameter-of-binary-tree>>_




// tag::binary-tree-q-binary-tree-right-side-view[]
===== Binary Tree from right side view

*BT-2*) _Imagine that you are viewing the tree from the right side. What nodes would you see?_

// end::binary-tree-q-binary-tree-right-side-view[]

_Common in interviews at: Facebook, Amazon, ByteDance (TikTok)._

Examples:

[source, javascript]
----
/*
 1      <- 1 (only node on level)
 /   \
2     3   <- 3 (3 is the rightmost)
 \
  4       <- 4 (only node on level) */
rightSideView(BinaryTreeNode.from([1, 2, 3, null, 4])); // [1, 3, 4]

rightSideView(BinaryTreeNode.from([])); // []
rightSideView(BinaryTreeNode.from([1, 2, 3, null, 5, null, 4, 6])); // [1, 3, 4, 6]
----

Starter code:

[source, javascript]
----
include::../../interview-questions/binary-tree-right-side-view.js[tags=description;placeholder]
----

_Solution: <<binary-tree-q-binary-tree-right-side-view>>_
