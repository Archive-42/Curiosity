ifndef::imagesdir[]
:imagesdir: ../../images
:codedir: ../../../src
endif::[]

=== Summary

In this section, we learned about Graphs, applications, properties, and how we can create them. We mention that you can represent a graph as a matrix or as a list of adjacencies. We went for implementing the latter since it's more space-efficient. We cover the basic graph operations like adding and removing nodes and edges.  In the algorithms section, we are going to cover searching values in the graph.
(((Tables, Non-Linear DS, BST/Maps/Sets Complexities)))

// tag::table[]
.Time and Space Complexity for Graph-based Data Structures
|===
.2+.^s| Data Structure 2+^s| Searching By .2+^.^s| Insert .2+^.^s| Delete .2+^.^s| Space Complexity
^|_Index/Key_ ^|_Value_
| <<part03-graph-data-structures#bst, BST (unbalanced)>> ^|- ^|O(n) ^|O(n) ^|O(n) ^|O(n)
| <<b-self-balancing-binary-search-trees, BST (balanced)>> ^|- ^|O(log n) ^|O(log n) ^|O(log n) ^|O(n)
| Hash Map (na√Øve) ^|O(n) ^|O(n) ^|O(n) ^|O(n) ^|O(n)
| <<hashmap-chap, HashMap>> (optimized) ^|O(1) ^|O(n) ^|O(1)* ^|O(1) ^|O(n)
| <<tree-map-chap, TreeMap>> (Red-Black Tree) ^|O(log n) ^|O(n) ^|O(log n) ^|O(log n) ^|O(n)
| <<hash-set-chap, HashSet>> ^|O(1) ^|- ^|O(1)* ^|O(1) ^|O(n)
| <<tree-set-chap, TreeSet>> ^|O(log n) ^|- ^|O(log n) ^|O(log n) ^|O(n)
|===
{empty}* = Amortized run time. E.g. rehashing might affect run time to *O(n)*.
// end::table[]
