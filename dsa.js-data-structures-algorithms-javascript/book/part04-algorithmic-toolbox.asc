[[part04-algorithmic-toolbox]]
== Algorithmic Toolbox

In this part of the book, we will cover examples of classical algorithms in more detail. Also, we will provide algorithmic tools for improving your problem-solving skills.


IMPORTANT: There's no single approach to solve all problems, but knowing well-known techniques can help you build your own faster.

We are going to start with <<Sorting Algorithms>>
//  and searching algorithms,
such as <<part04-algorithmic-toolbox#insertion-sort>>, <<part04-algorithmic-toolbox#merge-sort>> and some others.
Later, you will learn some algorithmic paradigms that will help you identify common patterns and solve problems from different angles.


.We are going to discuss the following techniques for solving algorithms problems:
- <<Greedy Algorithms>>: makes greedy choices using heuristics to find the best solution without looking back.
- <<dynamic-programming-chap>>: a technique for speeding up recursive algorithms when there are many _overlapping subproblems_. It uses _memoization_ to avoid duplicating work.
- <<Divide and Conquer>>: _divide_ problems into smaller pieces, _conquer_ each subproblem, and then _join_ the results.
- <<Backtracking>>: search _all (or some)_ possible paths. However, it stops and _go back_ as soon as notice the current solution is not working.
- _Brute Force_: generate all possible solutions and tries all of them. (Use it as a last resort or as the starting point and to later optimize it).


include::content/part04/sorting-algorithms.asc[]

<<<
include::content/part04/divide-and-conquer.asc[]

<<<
include::content/part04/dynamic-programming.asc[]

<<<
include::content/part04/greedy-algorithms.asc[]

<<<
include::content/part04/backtracking.asc[]

<<<
include::content/part04/algorithmic-toolbox.asc[]
